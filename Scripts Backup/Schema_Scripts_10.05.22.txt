--
-- Create Schema Script 
--   Database Version          : 11.2.0.4.0 
--   Database Compatible Level : 11.2.0.4.0 
--   Script Compatible Level   : 11.2.0.4.0 
--   Toad Version              : 12.0.0.61 
--   DB Connect String         : SSMDB1 
--   Schema                    : SPA_SFBL_BI 
--   Script Created by         : SPA_SFBL_BI 
--   Script Created at         : 5/10/2022 4:37:33 PM 
--   Physical Location         :  
--   Notes                     :  
--

-- Object Counts: 
--   Database Links: 1 
--   Functions: 69      Lines of Code: 14093 
--   Indexes: 41        Columns: 42         
--   Materialized Views: 167 
--   Procedures: 2      Lines of Code: 57 
--   Scheduler Jobs: 164 
--   Sequences: 1 
--   Tables: 189        Columns: 3567       Constraints: 406    
--   Triggers: 2 
--   Views: 53          Columns: 636        


CREATE TABLE DEPOT_INFO
(
  DEPOT_ID          NUMBER                      NOT NULL,
  DEPOT_CODE        VARCHAR2(10 BYTE),
  DEPOT_NAME        VARCHAR2(500 BYTE)          NOT NULL,
  DEPOT_STATUS      VARCHAR2(20 BYTE)           NOT NULL,
  DEPOT_ADDRESS     VARCHAR2(500 BYTE),
  SHORT_CODE        VARCHAR2(500 BYTE),
  ENTERED_DATE      DATE,
  ENTERED_TERMINAL  VARCHAR2(150 BYTE),
  UPDATED_DATE      DATE,
  UPDATED_TERMINAL  VARCHAR2(150 BYTE),
  ENTERED_BY        NUMBER,
  UPDATED_BY        NUMBER
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_COMPANY
(
  COMP_CODE         VARCHAR2(20 BYTE),
  COMP_NAME         VARCHAR2(100 BYTE),
  COMP_ADDR1        VARCHAR2(100 BYTE),
  COMP_ADDR2        VARCHAR2(100 BYTE),
  PHONE_NO          VARCHAR2(100 BYTE),
  FAX               VARCHAR2(50 BYTE),
  EMAIL             VARCHAR2(100 BYTE),
  BUSINESS_NATURE   VARCHAR2(150 BYTE),
  TIN               VARCHAR2(30 BYTE),
  PARAM_FLAG        VARCHAR2(1 BYTE),
  SLOGAN1           VARCHAR2(200 BYTE),
  SLOGAN2           VARCHAR2(200 BYTE),
  COMP_LOGO         LONG RAW,
  ABBR_NAME         VARCHAR2(20 BYTE),
  ENTRY_TIME        DATE,
  ENTERED_TERMINAL  VARCHAR2(50 BYTE),
  UPDATE_TIME       DATE,
  UPDATED_TERMINAL  VARCHAR2(20 BYTE),
  ID                NUMBER                      NOT NULL,
  ENTERED_BY        NUMBER,
  UPDATED_BY        NUMBER,
  COMP_LOGO_URL     VARCHAR2(200 BYTE)          NOT NULL
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_DESIGNATION
(
  DESIGNATION_ID    NUMBER,
  DESIGNATION_CODE  VARCHAR2(20 BYTE),
  DESIGNATION_NAME  VARCHAR2(100 BYTE),
  DESIGNATION_DESC  VARCHAR2(200 BYTE),
  ENTRY_TIME        DATE,
  ENTERED_TERMINAL  VARCHAR2(50 BYTE),
  UPDATE_TIME       DATE,
  UPDATED_TERMINAL  VARCHAR2(20 BYTE),
  ENTERED_BY        NUMBER,
  UPDATED_BY        NUMBER
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_EMPLOYEE_INFO
(
  MST_ID           NUMBER,
  EMPLOYEE_ID      NUMBER                       NOT NULL,
  EMPLOYEE_CODE    VARCHAR2(20 BYTE),
  EMPLOYEE_NAME    VARCHAR2(50 BYTE)            NOT NULL,
  EMPLOYEE_STATUS  VARCHAR2(10 BYTE),
  COMPANY_ID       NUMBER
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_FIELD_LOCATION
(
  FIELD_CODE        VARCHAR2(20 BYTE)           NOT NULL,
  FIELD_NAME        VARCHAR2(100 BYTE),
  ENTRY_TIME        DATE,
  ENTERED_TERMINAL  VARCHAR2(50 BYTE),
  UPDATE_TIME       DATE,
  UPDATED_TERMINAL  VARCHAR2(20 BYTE),
  ID                NUMBER,
  ENTERED_BY        NUMBER,
  UPDATED_BY        NUMBER
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_MENU_CONF
(
  ID          NUMBER                            NOT NULL,
  PARENT_ID   NUMBER                            NOT NULL,
  PARENT_SEQ  NUMBER                            NOT NULL,
  CHILD_ID    NUMBER                            NOT NULL,
  CHILD_SEQ   NUMBER                            NOT NULL,
  URL         VARCHAR2(100 BYTE),
  BG_COLOR    VARCHAR2(20 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_MENU_INFO
(
  MENU_ID            NUMBER                     NOT NULL,
  MENU_NAME          VARCHAR2(100 BYTE),
  MENU_DISPLAY_NAME  VARCHAR2(100 BYTE),
  MENU_TYPE          VARCHAR2(100 BYTE),
  MENU_STATUS        VARCHAR2(20 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_REPORT_INFO
(
  REPORT_ID     NUMBER                          NOT NULL,
  REPORT_NAME   VARCHAR2(100 BYTE),
  DISPLAY_NAME  VARCHAR2(100 BYTE),
  FORM_NAME     VARCHAR2(100 BYTE),
  FORM_URL      VARCHAR2(100 BYTE),
  STATUS        VARCHAR2(20 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_ROLE_INFO
(
  ROLE_ID    NUMBER(10),
  ROLE_NAME  VARCHAR2(50 BYTE),
  STATUS     VARCHAR2(20 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_ROLE_MENU_CONF
(
  ID       NUMBER(10)                           NOT NULL,
  MC_ID    NUMBER(10),
  ROLE_ID  NUMBER(10),
  SV       VARCHAR2(50 BYTE),
  VW       VARCHAR2(50 BYTE),
  DL       VARCHAR2(50 BYTE),
  PDF      VARCHAR2(10 BYTE),
  EXCEL    VARCHAR2(10 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_ROLE_REPORT_CONF
(
  ID         NUMBER(10)                         NOT NULL,
  REPORT_ID  NUMBER(10),
  ROLE_ID    NUMBER(10)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_ROLE_USER_CONF
(
  ID       NUMBER(10)                           NOT NULL,
  ROLE_ID  NUMBER(10),
  USER_ID  NUMBER(10)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_USER_LOGIN
(
  USER_ID           NUMBER(10),
  USER_NAME         VARCHAR2(50 BYTE),
  PASSWORD          VARCHAR2(50 BYTE),
  ACCESS_LOCATION   VARCHAR2(20 BYTE),
  LOCATION_ID       NUMBER,
  EMPLOYEE_ID       NUMBER,
  STATUS            VARCHAR2(10 BYTE),
  ENTERED_DATE      DATE,
  ENTERED_TERMINAL  VARCHAR2(150 BYTE),
  UPDATED_DATE      DATE,
  UPDATED_TERMINAL  VARCHAR2(150 BYTE),
  ENTERED_BY        NUMBER,
  UPDATED_BY        NUMBER,
  DOWNLOAD_STATUS   CHAR(1 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_USER_REPORT_DOWNLOAD_YN
(
  USER_ID          NUMBER(10),
  REPORT_NAME      VARCHAR2(200 BYTE),
  DOWNLOAD_STATUS  CHAR(10 BYTE),
  MENU_ID          INTEGER
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_VAR_DESIG_NAME
(
  VAR_ID               VARCHAR2(20 BYTE),
  DEPOT_DESIG_VAR      VARCHAR2(500 BYTE)       NOT NULL,
  ZONE_DESIG_VAR       VARCHAR2(500 BYTE)       NOT NULL,
  REGION_DESIG_VAR     VARCHAR2(500 BYTE)       NOT NULL,
  AREA_DESIG_VAR       VARCHAR2(500 BYTE)       NOT NULL,
  TERRITORY_DESIG_VAR  VARCHAR2(500 BYTE)       NOT NULL,
  MARKET_DESIG_VAR     VARCHAR2(500 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_VAR_FIELD_NAME
(
  VAR_ID          VARCHAR2(20 BYTE),
  DEPOT_VAR       VARCHAR2(500 BYTE)            NOT NULL,
  ZONE_VAR        VARCHAR2(500 BYTE)            NOT NULL,
  REGION_VAR      VARCHAR2(500 BYTE)            NOT NULL,
  AREA_VAR        VARCHAR2(500 BYTE)            NOT NULL,
  TERRITORY_VAR   VARCHAR2(500 BYTE)            NOT NULL,
  MARKET_VAR      VARCHAR2(500 BYTE),
  PRICE_UNIT_VAR  VARCHAR2(500 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE USER_PRODUCT_DTL
(
  PRODUCT_DTL_ID     NUMBER,
  PRODUCT_TYPE_ID    NUMBER,
  USER_ID            NUMBER(10),
  PRODUCT_CODE       VARCHAR2(30 BYTE),
  PRODUCT_NAME       VARCHAR2(150 BYTE),
  PACK_SIZE          VARCHAR2(30 BYTE),
  PRODUCT_TYPE_CODE  VARCHAR2(30 BYTE),
  PRODUCT_TYPE_DESC  VARCHAR2(250 BYTE),
  TYPE_NAME          VARCHAR2(100 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE USER_PRODUCT_MST
(
  MST_ID     NUMBER,
  USER_ID    NUMBER(10),
  TYPE_NAME  VARCHAR2(50 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE USER_PRODUCT_TYPE
(
  PRODUCT_TYPE_ID    NUMBER,
  MST_ID             NUMBER,
  USER_ID            NUMBER(10),
  PRODUCT_TYPE_CODE  VARCHAR2(30 BYTE),
  PRODUCT_TYPE_DESC  VARCHAR2(250 BYTE),
  TYPE_NAME          VARCHAR2(100 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_AUDIT_TRAIL
(
  AUDIT_ID        NUMBER,
  ACTION_BY       NUMBER,
  TERMINAL        VARCHAR2(50 BYTE),
  ACTION_DATE     DATE,
  ACTIVITY_TYPE   VARCHAR2(10 BYTE),
  ACTION_FORM     VARCHAR2(50 BYTE),
  ACTION_TABLE    VARCHAR2(50 BYTE),
  TRANSACTION_ID  VARCHAR2(10 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_AUDIT_TRAIL_BK
(
  AUDIT_ID        NUMBER,
  ACTION_BY       NUMBER,
  TERMINAL        VARCHAR2(50 BYTE),
  ACTION_DATE     DATE,
  ACTIVITY_TYPE   VARCHAR2(10 BYTE),
  ACTION_FORM     VARCHAR2(50 BYTE),
  ACTION_TABLE    VARCHAR2(50 BYTE),
  TRANSACTION_ID  VARCHAR2(10 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE TABLE SC_REPORT_ACCESS_INFO
(
  SLNO                    NUMBER,
  USER_ID                 NUMBER,
  REPORT_NAME             VARCHAR2(250 BYTE),
  REPORT_ACCESS_DATE      DATE,
  REPORT_ACCESS_TERMINAL  VARCHAR2(150 BYTE),
  REPORT_ACCESS_IP        VARCHAR2(100 BYTE)
)
TABLESPACE SPA_SFBL_BI_TS
RESULT_CACHE (MODE DEFAULT)
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


CREATE SEQUENCE SEQ_REPORT_ACCESS_INFO
  START WITH 2267
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE UNIQUE INDEX PK1_DEPOT_INFO ON DEPOT_INFO
(DEPOT_ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX UK1_DEPOT_INFO ON DEPOT_INFO
(DEPOT_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX PK_SC_COMPANY_ID ON SC_COMPANY
(ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX UK_SC_COMPANY_CCODE ON SC_COMPANY
(COMP_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX PK_SC_DESIG_ID ON SC_DESIGNATION
(DESIGNATION_ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX UK_SC_DESIG_DCODE ON SC_DESIGNATION
(DESIGNATION_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX UK1_EMPLOYEE_INFO ON SC_EMPLOYEE_INFO
(EMPLOYEE_ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX PK_SC_FIELD_LOCATION_ID ON SC_FIELD_LOCATION
(ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX UK_SC_FIELD_LOCATION_FCODE ON SC_FIELD_LOCATION
(FIELD_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX PK_REPORT_INFO_ID ON SC_REPORT_INFO
(REPORT_ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX PK_ROLE_INFO_ROLE_ID ON SC_ROLE_INFO
(ROLE_ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX PK_ROLE_MENU_CONF_ID ON SC_ROLE_MENU_CONF
(ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX UK_ROLE_MENU_CONF_RMID ON SC_ROLE_MENU_CONF
(MC_ID, ROLE_ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX PK_ROLE_REPORT_ID ON SC_ROLE_REPORT_CONF
(ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX PK_ROLE_USER_CONF_RC_ID ON SC_ROLE_USER_CONF
(ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE UNIQUE INDEX AUDIT_TRAIL_PK ON SC_AUDIT_TRAIL
(AUDIT_ID)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


CREATE DATABASE LINK "DL_SPASFBL.SQUAREGROUP.COM"
 CONNECT TO SPA_SFBL
 IDENTIFIED BY <PWD>
 USING 'SPASFBL';


CREATE OR REPLACE PROCEDURE Prc_ReportDownloadStatus( pUserId number,  pMenuId number,  pReportName varchar2,  pDownloadStatus varchar2)  IS

    vUserId number:=pUserId;
    vMenuId number:=pMenuId;
    vCount  number:=0;
    vReportName varchar2(100):=pReportName;
    vOldStatus varchar2(100):=ltrim(rtrim(pDownloadStatus));  
    vNewStatus varchar2(100);  
 

BEGIN

    
     select count(*)
     into vCount
     from SC_USER_REPORT_DOWNLOAD_YN
     where USER_ID=vUserId
     and   MENU_ID=vMenuId;
     
     if vOldStatus = 'Yes' then
     
           vNewStatus := 'No';
                
     elsif vOldStatus = 'No' then
     
          vNewStatus := 'Yes';
     
     end if;
     
     
     if vCount>0 then
     
        update SC_USER_REPORT_DOWNLOAD_YN
        set    DOWNLOAD_STATUS=vNewStatus
        where USER_ID=vUserId
        and   MENU_ID=vMenuId;
     
     else
     
        insert into SC_USER_REPORT_DOWNLOAD_YN(USER_ID, REPORT_NAME, DOWNLOAD_STATUS, MENU_ID) values(vUserId,vReportName,vNewStatus,vMenuId);
     
     end if;


 
END;
/

CREATE OR REPLACE PROCEDURE Prc_RefreshMaterializedView(pJobName VARCHAR2)  IS

    vJobName varchar2(100):=pJobName;
 

BEGIN

    dbms_scheduler.run_job (job_name => vJobName);

   
END;
/

CREATE OR REPLACE function             FN_INVOICE_PROD_IMS_DATE_RANGE(pfrom_date varchar2,
                                                                  pto_date varchar2,
                                                                  pdivision_code varchar2, 
                                                                  pregion_code varchar2,
                                                                  parea_code varchar2,
                                                                  pterritory_code varchar2,
                                                                  pcustomer_code varchar2,                                                                  
                                                                  pbase_product_code varchar2,
                                                                  pbrand_code varchar2,
                                                                  pcategory_code varchar2,                                                                                                                                    
                                                                  pproduct_code varchar2,
                                                                  puser_id number
                                                                  )
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   pCode varchar2(100)    :=pproduct_code;
   
   vbase_product_code varchar2(100)    :=pbase_product_code;
   vbrand_code varchar2(100)           :=pbrand_Code;
   vcategory_code varchar2(100)        :=pcategory_code;   
   
   userId   number        :=puser_id;
   vCount   number:=0;   

begin

   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 


     if vCount = 0 then 
     
     
           
            begin
            
            
                   open Ims for                                                                            

                               SELECT b.zone_code division_code,
                                      b.zone_name division_name,
                                      b.area_code region_code,
                                      b.area_name region_name,
                                      b.belt_code area_code,
                                      b.belt_name area_name,
                                      b.territory_code,
                                      b.territory_name,
                                      a.market_code,
                                      b.market_name,
                                      a.customer_code,
                                      b.customer_name,
                                      b.db_location,
                                      a.route_code,
                                      c.route_name,
                                      a.retailer_code,
                                      d.retailer_name,
                                      p.base_product_code,
                                      f.base_product_name,
                                      p.brand_code,
                                      g.brand_name,
                                      p.product_category product_category_code,
                                      h.category_name product_category_name,
                                      a.invoice_no,
                                      to_char(inv.invoice_date,'MM/DD/RRRR HH:MI:SS AM') invoice_date,
                                      a.product_code,
                                      p.product_name,
                                      p.pack_size,
                                      i.unit_tp product_price,
                                      NVL (a.invoice_amt, 0) invoice_amt,
                                      NVL (a.issued_qty, 0) sales_qty,
                                      NVL (a.bonus_qty, 0) sales_bonus_qty,
                                      NVL (a.bonus_price_discount, 0) bonus_price_discount,
                                      NVL (a.replace_qty, 0) replace_qty,
                                      NVL (a.return_sales_qty, 0) return_sales_qty,
                                      NVL (a.return_bns_qty, 0) return_bns_qty,
                                      NVL (a.issued_qty, 0) - NVL (a.return_sales_qty, 0) ims_sales_qty,
                                      NVL (a.bonus_qty, 0) - NVL (a.return_bns_qty, 0) ims_bns_qty,
                                      NVL (a.return_value, 0) return_value,
                                      NVL (a.bns_disc_ret, 0) bns_disc_ret,
                                      NVL (a.bonus_price_discount, 0) - NVL (a.bns_disc_ret, 0)
                                         discount_val,
                                      NVL (a.invoice_amt, 0) - NVL (return_value, 0) net_ims,
                                      NVL (a.number_of_invoice, 0) number_of_invoice,
                                      NVL (e.target_qty, 0) target_qty
                                 FROM (  SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                product_code,
                                                SUM (NVL (issued_qty, 0)) issued_qty,
                                                SUM (NVL (bonus_qty, 0)) bonus_qty,
                                                SUM (NVL (bonus_price_discount, 0)) bonus_price_discount,
                                                SUM (NVL (invoice_amt, 0)) invoice_amt,
                                                SUM (NVL (replace_qty, 0)) replace_qty,
                                                SUM (NVL (return_sales_qty, 0)) return_sales_qty,
                                                SUM (NVL (return_value, 0)) return_value,
                                                SUM (NVL (return_bns_qty, 0)) return_bns_qty,
                                                SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                                                SUM (NVL (number_of_invoice, 0)) number_of_invoice
                                           FROM (  SELECT customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code,
                                                          SUM (issued_qty) issued_qty,
                                                            SUM (bonus_qty)
                                                          + SUM (trade_qty)
                                                          + SUM (spec_bonus_qty)
                                                          + SUM (display_bonus_qty)
                                                          + SUM (trade_bonus_qty) bonus_qty,
                                                          SUM (bonus_price_discount) bonus_price_discount,
                                                          SUM (total) invoice_amt,
                                                          SUM (replace_qty) replace_qty,
                                                          0 return_sales_qty,
                                                          0 return_value,
                                                          0 return_bns_qty,
                                                          0 bns_disc_ret,
                                                          0 number_of_invoice
                                                     FROM (SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  NVL (d.issued_qty, 0) issued_qty,
                                                                  0 bonus_qty,
                                                                  NVL (d.bonus_price_discount, 0)
                                                                     bonus_price_discount,
                                                                    NVL (d.total_val, 0)
                                                                  - (  NVL (d.bonus_price_discount, 0)
                                                                     + NVL (rtl_discount_val, 0))
                                                                     total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_dtl d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND m.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (m.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  i.product_code,
                                                                  0 issued_qty,
                                                                  NVL (i.bonus_qty, 0) bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m,
                                                                  mv_invoice_dtl d,
                                                                  mv_invoice_bonus i
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND d.inv_dtl_slno = i.inv_dtl_slno
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (m.invoice_date) between fDate and tDate
                                                                  AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  i.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  NVL (i.trade_qty, 0) trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m,
                                                                  mv_invoice_dtl d,
                                                                  mv_invoice_trade i
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND d.inv_dtl_slno = i.inv_dtl_slno
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (m.invoice_date) between fDate and tDate
                                                                  AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  NVL (d.spec_bonus_qty, 0) spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_spec_bonus d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            AND TRUNC (m.invoice_date) between fDate and tDate
                                                            AND m.inv_type_code = 'INV001'
                                                            UNION ALL
                                                            SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  nvl (d.display_bonus_qty, 0)display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_display_bonus d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            --and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                            AND TRUNC (m.invoice_date) between fDate and tDate
                                                            AND m.inv_type_code = 'INV001'
                                                            UNION ALL
                                                               SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  nvl (d.trade_bonus_qty, 0)trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_trade_bonus d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            --and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                            AND TRUNC (m.invoice_date) between fDate and tDate
                                                            AND m.inv_type_code = 'INV001'
                                                            
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  NVL (issued_qty, 0) replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_dtl d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (m.invoice_date) between fDate and tDate
                                                                  AND m.inv_type_code = 'INV002')
                                                 GROUP BY customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code
                                                 UNION ALL
                                                   SELECT customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code,
                                                          0 issued_qty,
                                                          0 bonus_qty,
                                                          0 bonus_price_discount,
                                                          0 invoice_amt,
                                                          0 replace_qty,
                                                          SUM (NVL (return_qty, 0)) return_sales_qty,
                                                          SUM (NVL (return_value, 0)) return_value,
                                                            SUM (NVL (ret_bns_qty, 0))
                                                          + SUM (NVL (ret_trd_qty, 0))
                                                          + SUM (NVL (spec_bonus_qty, 0))
                                                             return_bns_qty,
                                                          SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                                                          0 number_of_invoice
                                                     FROM (SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  NVL (d.return_qty, 0) return_qty,
                                                                  NVL (d.return_value, 0) return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_dtl d,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  NVL (bonus_price_discount, 0) bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_dtl d,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  b.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  NVL (b.bonus_qty, 0) ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_dtl d,
                                                                  mv_ret_return_bonus b,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND d.ret_recv_dtl_slno =
                                                                         b.ret_recv_dtl_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  b.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  NVL (b.trade_qty, 0) ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_dtl d,
                                                                  mv_ret_return_trade b,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND d.ret_recv_dtl_slno =
                                                                         b.ret_recv_dtl_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  NVL (d.spec_bonus_qty, 0) spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_spec_bonus d,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                                  )
                                                 GROUP BY customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code
                                       )
                                       GROUP BY customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                product_code) a,
                                      (
                                       SELECT market_code, product_code, target_qty
                                         FROM mv_target_l3years
                                        WHERE (year || month_code) between to_char(to_date(fDate,'dd/mm/rrrr'),'rrrrmm') and to_char(to_date(tDate,'dd/mm/rrrr'),'rrrrmm')
                                        and  (product_code =  pCode or pCode='ALL') 
                                      ) e,
                                      mv_division_customer_relation b,
                                      mv_route_info c,
                                      mv_retailer_info d,
                                      mv_product_info p,
                                      mv_base_product_info f,
                                      mv_brand_info g,
                                      mv_category_info h,
                                      mv_product_price i,
                                      mv_invoice_mst inv
                                WHERE     a.market_code = b.market_code(+)
                                      AND a.route_code = c.route_code
                                      AND a.retailer_code = d.retailer_code
                                      AND a.market_code = e.market_code(+)
                                      AND a.product_code = e.product_code(+)
                                      AND a.product_code = p.product_code(+)
                                      AND p.base_product_code = f.base_product_code
                                      AND p.brand_code = g.brand_code
                                      AND p.product_category = h.category_code
                                      AND a.product_code = i.product_code
                                      AND a.invoice_no = inv.invoice_no
                                      and  (b.zone_code = dCode or dCode='ALL')
                                      and  (b.area_code = rCode or rCode='ALL')
                                      and  (b.belt_code = aCode or aCode='ALL')
                                      and  (b.territory_code = tCode or tCode='ALL')  
                                      and  (a.customer_code = cCode or cCode='ALL')                             
                                      and  (p.base_product_code =  vbase_product_code or vbase_product_code='ALL')   
                                      and  (p.brand_code =  vbrand_code or vbrand_code='ALL')   
                                      and  (p.product_category =  vcategory_code or vcategory_code='ALL')                                                          
                                      and  (a.product_code =  pCode or pCode='ALL'); 
            
            
            end;
           

     
     elsif vCount > 0 then
          
          begin
          
                   open Ims for                                                                            

                               SELECT b.zone_code division_code,
                                      b.zone_name division_name,
                                      b.area_code region_code,
                                      b.area_name region_name,
                                      b.belt_code area_code,
                                      b.belt_name area_name,
                                      b.territory_code,
                                      b.territory_name,
                                      a.market_code,
                                      b.market_name,
                                      a.customer_code,
                                      b.customer_name,
                                      b.db_location,
                                      a.route_code,
                                      c.route_name,
                                      a.retailer_code,
                                      d.retailer_name,
                                      p.base_product_code,
                                      f.base_product_name,
                                      p.brand_code,
                                      g.brand_name,
                                      p.product_category product_category_code,
                                      h.category_name product_category_name,
                                      a.invoice_no,
                                      TO_DATE (inv.invoice_date, 'dd/mm/rrrr') invoice_date,
                                      a.product_code,
                                      p.product_name,
                                      p.pack_size,
                                      i.unit_tp product_price,
                                      NVL (a.invoice_amt, 0) invoice_amt,
                                      NVL (a.issued_qty, 0) sales_qty,
                                      NVL (a.bonus_qty, 0) sales_bonus_qty,
                                      NVL (a.bonus_price_discount, 0) bonus_price_discount,
                                      NVL (a.replace_qty, 0) replace_qty,
                                      NVL (a.return_sales_qty, 0) return_sales_qty,
                                      NVL (a.return_bns_qty, 0) return_bns_qty,
                                      NVL (a.issued_qty, 0) - NVL (a.return_sales_qty, 0) ims_sales_qty,
                                      NVL (a.bonus_qty, 0) - NVL (a.return_bns_qty, 0) ims_bns_qty,
                                      NVL (a.return_value, 0) return_value,
                                      NVL (a.bns_disc_ret, 0) bns_disc_ret,
                                      NVL (a.bonus_price_discount, 0) - NVL (a.bns_disc_ret, 0)
                                         discount_val,
                                      NVL (a.invoice_amt, 0) - NVL (return_value, 0) net_ims,
                                      NVL (a.number_of_invoice, 0) number_of_invoice,
                                      NVL (e.target_qty, 0) target_qty
                                 FROM (  SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                product_code,
                                                SUM (NVL (issued_qty, 0)) issued_qty,
                                                SUM (NVL (bonus_qty, 0)) bonus_qty,
                                                SUM (NVL (bonus_price_discount, 0)) bonus_price_discount,
                                                SUM (NVL (invoice_amt, 0)) invoice_amt,
                                                SUM (NVL (replace_qty, 0)) replace_qty,
                                                SUM (NVL (return_sales_qty, 0)) return_sales_qty,
                                                SUM (NVL (return_value, 0)) return_value,
                                                SUM (NVL (return_bns_qty, 0)) return_bns_qty,
                                                SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                                                SUM (NVL (number_of_invoice, 0)) number_of_invoice
                                           FROM (  SELECT customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code,
                                                          SUM (issued_qty) issued_qty,
                                                            SUM (bonus_qty)
                                                          + SUM (trade_qty)
                                                          + SUM (spec_bonus_qty)
                                                          + SUM (display_bonus_qty)
                                                          + SUM (trade_bonus_qty)
                                                             bonus_qty,
                                                          SUM (bonus_price_discount) bonus_price_discount,
                                                          SUM (total) invoice_amt,
                                                          SUM (replace_qty) replace_qty,
                                                          0 return_sales_qty,
                                                          0 return_value,
                                                          0 return_bns_qty,
                                                          0 bns_disc_ret,
                                                          0 number_of_invoice
                                                     FROM (SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  NVL (d.issued_qty, 0) issued_qty,
                                                                  0 bonus_qty,
                                                                  NVL (d.bonus_price_discount, 0)
                                                                     bonus_price_discount,
                                                                    NVL (d.total_val, 0)
                                                                  - (  NVL (d.bonus_price_discount, 0)
                                                                     + NVL (rtl_discount_val, 0))
                                                                     total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_dtl d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND m.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (m.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  i.product_code,
                                                                  0 issued_qty,
                                                                  NVL (i.bonus_qty, 0) bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m,
                                                                  mv_invoice_dtl d,
                                                                  mv_invoice_bonus i
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND d.inv_dtl_slno = i.inv_dtl_slno
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (m.invoice_date) between fDate and tDate
                                                                  AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  i.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  NVL (i.trade_qty, 0) trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m,
                                                                  mv_invoice_dtl d,
                                                                  mv_invoice_trade i
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND d.inv_dtl_slno = i.inv_dtl_slno
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (m.invoice_date) between fDate and tDate
                                                                  AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  NVL (d.spec_bonus_qty, 0) spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_spec_bonus d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                            AND TRUNC (m.invoice_date) between fDate and tDate
                                                            AND m.inv_type_code = 'INV001'
                                                            
                                                            UNION ALL
                                                            SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  nvl (d.display_bonus_qty, 0)display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_display_bonus d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                            AND TRUNC (m.invoice_date) between fDate and tDate
                                                            AND m.inv_type_code = 'INV001'
                                                            UNION ALL
                                                               SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  nvl (d.trade_bonus_qty, 0)trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_trade_bonus d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                            AND TRUNC (m.invoice_date) between fDate and tDate
                                                            AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  NVL (issued_qty, 0) replace_qty
                                                             FROM mv_invoice_mst m, mv_invoice_dtl d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (m.invoice_date) between fDate and tDate
                                                                  AND m.inv_type_code = 'INV002')
                                                 GROUP BY customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code
                                                 UNION ALL
                                                   SELECT customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code,
                                                          0 issued_qty,
                                                          0 bonus_qty,
                                                          0 bonus_price_discount,
                                                          0 invoice_amt,
                                                          0 replace_qty,
                                                          SUM (NVL (return_qty, 0)) return_sales_qty,
                                                          SUM (NVL (return_value, 0)) return_value,
                                                            SUM (NVL (ret_bns_qty, 0))
                                                          + SUM (NVL (ret_trd_qty, 0))
                                                          + SUM (NVL (spec_bonus_qty, 0))
                                                             return_bns_qty,
                                                          SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                                                          0 number_of_invoice
                                                     FROM (SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  NVL (d.return_qty, 0) return_qty,
                                                                  NVL (d.return_value, 0) return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_dtl d,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  NVL (bonus_price_discount, 0) bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_dtl d,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  b.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  NVL (b.bonus_qty, 0) ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_dtl d,
                                                                  mv_ret_return_bonus b,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND d.ret_recv_dtl_slno =
                                                                         b.ret_recv_dtl_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  b.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  NVL (b.trade_qty, 0) ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_dtl d,
                                                                  mv_ret_return_trade b,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND d.ret_recv_dtl_slno =
                                                                         b.ret_recv_dtl_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  NVL (d.spec_bonus_qty, 0) spec_bonus_qty
                                                             FROM mv_ret_return_mst m,
                                                                  mv_ret_return_spec_bonus d,
                                                                  mv_invoice_mst i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) between fDate and tDate
                                                                  )
                                                 GROUP BY customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code
                                       )
                                       GROUP BY customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                product_code) a,
                                      (
                                       SELECT market_code, product_code, target_qty
                                         FROM mv_target_l3years
                                        WHERE (year || month_code) between to_char(to_date(fDate,'dd/mm/rrrr'),'rrrrmm') and to_char(to_date(tDate,'dd/mm/rrrr'),'rrrrmm')
                                        and  (product_code =  pCode or pCode='ALL') 
                                        and   product_code in (select product_code from user_product_dtl where user_id=userId)
                                      ) e,
                                      mv_division_customer_relation b,
                                      mv_route_info c,
                                      mv_retailer_info d,
                                      mv_product_info p,
                                      mv_base_product_info f,
                                      mv_brand_info g,
                                      mv_category_info h,
                                      mv_product_price i,
                                      mv_invoice_mst inv
                                WHERE     a.market_code = b.market_code(+)
                                      AND a.route_code = c.route_code
                                      AND a.retailer_code = d.retailer_code
                                      AND a.market_code = e.market_code(+)
                                      AND a.product_code = e.product_code(+)
                                      AND a.product_code = p.product_code(+)
                                      AND p.base_product_code = f.base_product_code
                                      AND p.brand_code = g.brand_code
                                      AND p.product_category = h.category_code
                                      AND a.product_code = i.product_code
                                      AND a.invoice_no = inv.invoice_no
                                      and  (b.zone_code = dCode or dCode='ALL')
                                      and  (b.area_code = rCode or rCode='ALL')
                                      and  (b.belt_code = aCode or aCode='ALL')
                                      and  (b.territory_code = tCode or tCode='ALL')  
                                      and  (a.customer_code = cCode or cCode='ALL')                             
                                      and  (p.base_product_code =  vbase_product_code or vbase_product_code='ALL')   
                                      and  (p.brand_code =  vbrand_code or vbrand_code='ALL')   
                                      and  (p.product_category =  vcategory_code or vcategory_code='ALL')                                                          
                                      and  (a.product_code =  pCode or pCode='ALL'); 
                   
          end;
          
      
      
      end if;         


    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE FUNCTION             FN_DOWNLOAD_STATUS(vUSER_ID NUMBER,vMENU_ID NUMBER)
RETURN CHAR
IS
vDOWNLOAD_STATUS VARCHAR2(200);
BEGIN
    
    SELECT REGEXP_REPLACE (DOWNLOAD_STATUS, '[[:space:]]', ' ') DOWNLOAD_STATUS 
    INTO vDOWNLOAD_STATUS
    FROM SC_USER_REPORT_DOWNLOAD_YN
    WHERE USER_ID=vUSER_ID
    AND   MENU_ID=vMENU_ID;
    
    RETURN vDOWNLOAD_STATUS;
    
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    RETURN 'Yes';

END;
/

CREATE OR REPLACE FUNCTION             FN_AREA_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT DISTINCT AREA_NAME
INTO vNAME
FROM MV_AREA_INFO
WHERE AREA_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN null;
END;
/

CREATE OR REPLACE FUNCTION             FN_BASE_PRODUCT_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
    SELECT BASE_PRODUCT_NAME
    INTO vNAME
    FROM MV_BASE_PRODUCT_INFO
    WHERE BASE_PRODUCT_CODE=vCODE;
    
    
    RETURN vNAME;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    RETURN null;
END;
/

CREATE OR REPLACE FUNCTION FN_BELT_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT BELT_NAME
INTO vNAME
FROM MV_BELT_INFO
WHERE BELT_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 'ANONYMOUS';
END;
/

CREATE OR REPLACE FUNCTION FN_BRAND_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT BRAND_NAME
INTO vNAME
FROM MV_BRAND_INFO
WHERE BRAND_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN '';
END;
/

CREATE OR REPLACE FUNCTION FN_CATEGORY_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
    SELECT CATEGORY_NAME
    INTO vNAME
    FROM MV_CATEGORY_INFO
    WHERE CATEGORY_CODE=vCODE;
    
    
    RETURN vNAME;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    RETURN null;
END;
/

CREATE OR REPLACE FUNCTION FN_CUSTOMER_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT  CUSTOMER_NAME
INTO vNAME
FROM MV_CUSTOMER_INFO
WHERE CUSTOMER_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 'ANONYMOUS';
END;
/

CREATE OR REPLACE FUNCTION FN_MARKET_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT MARKET_NAME
INTO vNAME
FROM MV_MARKET_INFO
WHERE MARKET_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 'ANONYMOUS';
END;
/

CREATE OR REPLACE FUNCTION FN_PRODUCT_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT DISTINCT PRODUCT_NAME
INTO vNAME
FROM MV_PRODUCT_INFO
WHERE PRODUCT_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN '';
END;
/

CREATE OR REPLACE FUNCTION FN_RETAILER_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT DISTINCT RETAILER_NAME
INTO vNAME
FROM MV_RETAILER_INFO
WHERE RETAILER_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN null;
END;
/

CREATE OR REPLACE FUNCTION FN_ROUTE_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT DISTINCT ROUTE_NAME
INTO vNAME
FROM MV_ROUTE_INFO
WHERE ROUTE_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN null;
END;
/

CREATE OR REPLACE FUNCTION             FN_TERRITORY_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT DISTINCT TERRITORY_NAME
INTO vNAME
FROM MV_TERRITORY_INFO
WHERE TERRITORY_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN null;
END;
/

CREATE OR REPLACE FUNCTION             FN_ZONE_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT DISTINCT ZONE_NAME
INTO vNAME
FROM MV_ZONE_INFO
WHERE ZONE_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN null;
END;
/

CREATE OR REPLACE FUNCTION FN_EMPLOYEE_NAME(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT  EMPLOYEE_NAME
INTO vNAME
FROM MV_EMPLOYEE_INFO
WHERE EMPLOYEE_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 'ANONYMOUS';
END;
/

CREATE OR REPLACE FUNCTION FN_PRODUCT_PRICE(vCODE VARCHAR2)
RETURN NUMBER
IS
vPRICE NUMBER;
BEGIN
SELECT UNIT_TP
INTO vPRICE
FROM MV_PRODUCT_PRICE
WHERE PRODUCT_CODE=vCODE;
RETURN vPRICE;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 0;
END;
/

CREATE OR REPLACE FUNCTION FN_PACK_SIZE(vCODE VARCHAR2)
RETURN CHAR
IS
vNAME VARCHAR2(200);
BEGIN
SELECT DISTINCT PACK_SIZE
INTO vNAME
FROM MV_PRODUCT_INFO
WHERE PRODUCT_CODE=vCODE;
RETURN vNAME;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN '';
END;
/

CREATE OR REPLACE function             FN_MARKET_PROD_IMS_DATE_RANGE(pfrom_date varchar2,
                                                                     pto_date varchar2,
                                                                     pdivision_code varchar2, 
                                                                     pregion_code varchar2,
                                                                     parea_code varchar2,
                                                                     pterritory_code varchar2,
                                                                     pcustomer_code varchar2,
                                                                     puser_id number
                                                                     )
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   userId   number        :=puser_id;
   vCount   number:=0;    

begin


   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 
   
     if vCount = 0 then 
     
             
         begin
          
         
           open Ims for                                                                            
                        select b.zone_code division_code,
                               b.zone_name division_name,
                               b.area_code region_code,
                               b.area_name region_name,
                               b.belt_code area_code,
                               b.belt_name area_name,
                               b.territory_code,
                               b.territory_name,
                               b.db_location,
                               a.customer_code,
                               c.customer_name,        
                               a.market_code,
                               b.market_name,
                               a.product_code,
                               d.product_name,
                               d.pack_size,
                               e.unit_tp product_price,                                              
                               nvl(a.sales_qty,0) sales_qty,
                               nvl(a.return_sales_qty,0) return_sales_qty,
                               nvl(a.ims_sales_qty,0) ims_sales_qty,                                       
                               nvl(a.bonus_qty,0) bonus_qty,
                               nvl(a.return_bonus_qty,0) return_bonus_qty,
                               nvl(a.ims_bonus_qty,0) ims_bonus_qty,       
                               nvl(a.invoice_value,0) invoice_value,              
                               nvl(a.return_value,0) return_value,       
                               nvl(a.ims_sales_val,0) ims_sales_val,                                       
                               nvl(a.ims_bonus_val,0) ims_bonus_val,                                       
                               nvl(a.bonus_price_discount,0) bonus_price_discount,
                               nvl(a.ret_bonus_price_discount,0) ret_bonus_price_discount,                                              
                               nvl(a.net_ims,0) net_ims,                                                                              
                               nvl(round(a.bonus_per,2),0) bonus_per,
                               0 target_qty,       
                               0 target_val
                        FROM
                            (                       
                              select   a.customer_code, 
                                       a.market_code,    
                                       a.product_code,                                                       
                                       sum(nvl(issued_qty,0)) sales_qty, 
                                       sum(nvl(return_sales_qty,0)) return_sales_qty ,                                                       
                                       sum(nvl(bonus_qty,0)) bonus_qty,
                                       sum(nvl(return_bonus_qty,0)) return_bonus_qty,                                                       
                                       sum(nvl(bonus_price_discount,0)) bonus_price_discount,                                                       
                                       sum(nvl(ret_bonus_price_discount,0)) ret_bonus_price_discount,                                                      
                                       (sum(nvl(issued_qty,0))-sum(nvl(return_sales_qty,0))) ims_sales_qty,                                                       
                                       (sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0))) ims_bonus_qty,                                                       
                                        ( ( sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0)) )*( select unit_tp from mv_product_price where product_code=a.product_code))   ims_bonus_val,                                                                                                                   
                                       sum(nvl(invoice_value,0))+sum(nvl(bonus_price_discount,0)) invoice_value,                                                                               
                                       sum(nvl(return_value,0))+sum(nvl(ret_bonus_price_discount,0)) return_value,                                                            
                                      (sum(nvl(invoice_value,0)) +sum(nvl(bonus_price_discount,0)))-  (sum(nvl(return_value,0))+sum(nvl(ret_bonus_price_discount,0))) ims_sales_val,       
                                       sum(nvl(invoice_value,0)) -   sum(nvl(return_value,0))   net_ims,                                                                                                               
                                     ((nvl((sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0))),0)+ sum(nvl(bonus_price_discount,0)) )/ nvl(decode((sum(nvl(invoice_value,0))- sum(nvl(return_value,0)) + sum(nvl(ret_bonus_price_discount,0))),'0',1,(sum(nvl(invoice_value,0))- sum(nvl(return_value,0)) +sum(nvl(ret_bonus_price_discount,0)))),1))*100 bonus_per,                                                     
                                     0 target_qty,                                                     
                                     0 target_val    
                                from
                                  (                    
                                   select   customer_code,
                                            market_code,
                                            invoice_no,
                                            product_code,
                                            sum(nvl(issued_qty,0))  issued_qty,
                                            sum(nvl(bonus_qty,0)) bonus_qty,
                                            sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                            sum(nvl(total,0)) invoice_value
                                    from
                                       (                                                                                                                                                    
                                         select m.invoice_no,
                                                m.customer_code,
                                                m.market_code,
                                                d.product_code,
                                                nvl(d.issued_qty,0) issued_qty,
                                                0 bonus_qty,
                                                nvl(bonus_price_discount,0) bonus_price_discount ,
                                                NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0) total
                                        from  vw_invoice_mst m,  vw_invoice_dtl  d
                                        where m.inv_mst_slno=d.inv_mst_slno  
                                        and   m.inv_type_code='INV001'       
                                        and   trunc (m.invoice_date) between fDate and tDate
                                        and   (m.customer_code = cCode or cCode='ALL')
                                                                                                                                                                              
                                        union all
                                                                                            
                                        select m.invoice_no,
                                               m.customer_code,
                                               m.market_code,
                                               i.product_code,
                                               0 issued_qty,
                                               nvl(i.bonus_qty,0) bonus_qty,
                                               0 bonus_price_discount,
                                               0 total
                                        from  vw_invoice_mst m,  vw_invoice_dtl  d, vw_invoice_bonus i
                                        where m.inv_mst_slno=d.inv_mst_slno
                                        and   d.inv_dtl_slno=i.inv_dtl_slno          
                                        and   m.inv_type_code='INV001'
                                        and  trunc (m.invoice_date) between fDate and tDate
                                        and   (m.customer_code = cCode or cCode='ALL')                                                                     
                                       ) 
                                        group by   customer_code,market_code,invoice_no,product_code                                 
                                   ) a,                   
                                   (                                                                                        
                                    select  invoice_no, 
                                            product_code,
                                            sum(nvl(return_qty,0))  return_sales_qty,
                                            sum(nvl(return_value,0))  return_value,
                                            sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bonus_qty,
                                            sum(nvl(ret_bonus_price_discount,0)) ret_bonus_price_discount
                                  from 
                                      (                           
                                        select   m.invoice_no,
                                                 d.product_code,
                                                 nvl(d.return_qty,0) return_qty,
                                                 nvl(d.return_value,0) return_value,
                                                 0 ret_bns_qty,
                                                 0 ret_trd_qty,
                                                 nvl(d.bonus_price_discount,0) ret_bonus_price_discount             
                                         from   vw_ret_return_mst m, vw_ret_return_dtl d,  vw_invoice_mst i
                                         where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                         and    m.invoice_no   =i.invoice_no
                                         and    trunc (i.invoice_date) between fDate and tDate
                                         and     (m.customer_code = cCode or cCode='ALL')
                                         and    i.inv_type_code='INV001'  
                                                                                           
                                        union all
                                                                                            
                                        select   m.invoice_no,
                                                 b.product_code,
                                                 0 return_qty,
                                                 0 return_value,
                                                 bonus_qty ret_bns_qty,
                                                 0 ret_trd_qty,
                                                 0 ret_bonus_price_discount
                                        from     vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_bonus b,vw_invoice_mst i
                                        where    m.ret_recv_mst_slno =d.ret_recv_mst_slno
                                        and      d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                                        and      m.invoice_no  = i.invoice_no
                                        and      trunc (i.invoice_date) between fDate and tDate
                                        and     (m.customer_code = cCode or cCode='ALL')
                                        and      i.inv_type_code='INV001'    
                                                                                                                                                                  
                                        union all
                                                                                            
                                        select  m.invoice_no,
                                                b.product_code,
                                                0 return_qty,
                                                0 return_value,
                                                0 ret_bns_qty,
                                                nvl(trade_qty,0) ret_trd_qty,
                                                0 ret_bonus_price_discount
                                        from    vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_trade b,vw_invoice_mst i
                                        where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                                        and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                                        and     m.invoice_no  = i.invoice_no
                                        and     trunc (i.invoice_date) between fDate and tDate
                                        and     (m.customer_code = cCode or cCode='ALL')
                                        and     i.inv_type_code='INV001'                                                                            
                                    )                                                                        
                                    group by invoice_no,product_code                                                                                                                                                                
                                ) b    
                                where a.invoice_no=b.invoice_no(+)
                                and   a.product_code=b.product_code(+)
                                group by a.customer_code,a.market_code,a.product_code
                         ) a, mv_division_customer_relation b,mv_customer_info c,mv_product_info d,mv_product_price e
                        where a.market_code=b.market_code(+)                                
                        and   a.customer_code=c.customer_code
                        and   a.product_code=d.product_code
                        and   a.product_code=e.product_code                        
                        and  (b.zone_code = dCode or dCode='ALL')
                        and  (b.area_code = rCode or rCode='ALL')
                        and  (b.belt_code = aCode or aCode='ALL')
                        and  (b.territory_code = tCode or tCode='ALL')  
                        and  (a.customer_code = cCode or cCode='ALL');     
                                 
                         
            
             
         end;
     
     elsif vCount > 0 then 
     
     
         begin
             
           open Ims for                                                                            
                        select b.zone_code division_code,
                               b.zone_name division_name,
                               b.area_code region_code,
                               b.area_name region_name,
                               b.belt_code area_code,
                               b.belt_name area_name,
                               b.territory_code,
                               b.territory_name,
                               b.db_location,
                               a.customer_code,
                               c.customer_name,        
                               a.market_code,
                               b.market_name,
                               a.product_code,
                               d.product_name,
                               d.pack_size,
                               e.unit_tp product_price,                                              
                               nvl(a.sales_qty,0) sales_qty,
                               nvl(a.return_sales_qty,0) return_sales_qty,
                               nvl(a.ims_sales_qty,0) ims_sales_qty,                                       
                               nvl(a.bonus_qty,0) bonus_qty,
                               nvl(a.return_bonus_qty,0) return_bonus_qty,
                               nvl(a.ims_bonus_qty,0) ims_bonus_qty,       
                               nvl(a.invoice_value,0) invoice_value,              
                               nvl(a.return_value,0) return_value,       
                               nvl(a.ims_sales_val,0) ims_sales_val,                                       
                               nvl(a.ims_bonus_val,0) ims_bonus_val,                                       
                               nvl(a.bonus_price_discount,0) bonus_price_discount,
                               nvl(a.ret_bonus_price_discount,0) ret_bonus_price_discount,                                              
                               nvl(a.net_ims,0) net_ims,                                                                              
                               nvl(round(a.bonus_per,2),0) bonus_per,
                               0 target_qty,       
                               0 target_val
                        FROM
                            (                       
                              select   a.customer_code, 
                                       a.market_code,    
                                       a.product_code,                                                       
                                       sum(nvl(issued_qty,0)) sales_qty, 
                                       sum(nvl(return_sales_qty,0)) return_sales_qty ,                                                       
                                       sum(nvl(bonus_qty,0)) bonus_qty,
                                       sum(nvl(return_bonus_qty,0)) return_bonus_qty,                                                       
                                       sum(nvl(bonus_price_discount,0)) bonus_price_discount,                                                       
                                       sum(nvl(ret_bonus_price_discount,0)) ret_bonus_price_discount,                                                      
                                       (sum(nvl(issued_qty,0))-sum(nvl(return_sales_qty,0))) ims_sales_qty,                                                       
                                       (sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0))) ims_bonus_qty,                                                       
                                        ( ( sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0)) )*( select unit_tp from mv_product_price where product_code=a.product_code))   ims_bonus_val,                                                                                                                   
                                       sum(nvl(invoice_value,0))+sum(nvl(bonus_price_discount,0)) invoice_value,                                                                               
                                       sum(nvl(return_value,0))+sum(nvl(ret_bonus_price_discount,0)) return_value,                                                            
                                      (sum(nvl(invoice_value,0)) +sum(nvl(bonus_price_discount,0)))-  (sum(nvl(return_value,0))+sum(nvl(ret_bonus_price_discount,0))) ims_sales_val,       
                                       sum(nvl(invoice_value,0)) -   sum(nvl(return_value,0))   net_ims,                                                                                                               
                                     ((nvl((sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0))),0)+ sum(nvl(bonus_price_discount,0)) )/ nvl(decode((sum(nvl(invoice_value,0))- sum(nvl(return_value,0)) + sum(nvl(ret_bonus_price_discount,0))),'0',1,(sum(nvl(invoice_value,0))- sum(nvl(return_value,0)) +sum(nvl(ret_bonus_price_discount,0)))),1))*100 bonus_per,                                                     
                                     0 target_qty,                                                     
                                     0 target_val    
                                from
                                  (                    
                                   select   customer_code,
                                            market_code,
                                            invoice_no,
                                            product_code,
                                            sum(nvl(issued_qty,0))  issued_qty,
                                            sum(nvl(bonus_qty,0)) bonus_qty,
                                            sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                            sum(nvl(total,0)) invoice_value
                                    from
                                       (                                                                                                                                                    
                                         select m.invoice_no,
                                                m.customer_code,
                                                m.market_code,
                                                d.product_code,
                                                nvl(d.issued_qty,0) issued_qty,
                                                0 bonus_qty,
                                                nvl(bonus_price_discount,0) bonus_price_discount ,
                                                NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0) total
                                        from  vw_invoice_mst m,  vw_invoice_dtl  d
                                        where m.inv_mst_slno=d.inv_mst_slno  
                                        and   m.inv_type_code='INV001'       
                                        and   trunc (m.invoice_date) between fDate and tDate
                                        and   (m.customer_code = cCode or cCode='ALL')
                                                                                                                                                                              
                                        union all
                                                                                            
                                        select m.invoice_no,
                                               m.customer_code,
                                               m.market_code,
                                               i.product_code,
                                               0 issued_qty,
                                               nvl(i.bonus_qty,0) bonus_qty,
                                               0 bonus_price_discount,
                                               0 total
                                        from  vw_invoice_mst m,  vw_invoice_dtl  d, vw_invoice_bonus i
                                        where m.inv_mst_slno=d.inv_mst_slno
                                        and   d.inv_dtl_slno=i.inv_dtl_slno          
                                        and   m.inv_type_code='INV001'
                                        and  trunc (m.invoice_date) between fDate and tDate
                                        and   (m.customer_code = cCode or cCode='ALL')                                                                     
                                       ) 
                                        group by   customer_code,market_code,invoice_no,product_code                                 
                                   ) a,                   
                                   (                                                                                        
                                    select  invoice_no, 
                                            product_code,
                                            sum(nvl(return_qty,0))  return_sales_qty,
                                            sum(nvl(return_value,0))  return_value,
                                            sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bonus_qty,
                                            sum(nvl(ret_bonus_price_discount,0)) ret_bonus_price_discount
                                  from 
                                      (                           
                                        select   m.invoice_no,
                                                 d.product_code,
                                                 nvl(d.return_qty,0) return_qty,
                                                 nvl(d.return_value,0) return_value,
                                                 0 ret_bns_qty,
                                                 0 ret_trd_qty,
                                                 nvl(d.bonus_price_discount,0) ret_bonus_price_discount             
                                         from   vw_ret_return_mst m, vw_ret_return_dtl d,  vw_invoice_mst i
                                         where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                         and    m.invoice_no   =i.invoice_no
                                         and    trunc (i.invoice_date) between fDate and tDate
                                         and     (m.customer_code = cCode or cCode='ALL')
                                         and    i.inv_type_code='INV001'  
                                                                                           
                                        union all
                                                                                            
                                        select   m.invoice_no,
                                                 b.product_code,
                                                 0 return_qty,
                                                 0 return_value,
                                                 bonus_qty ret_bns_qty,
                                                 0 ret_trd_qty,
                                                 0 ret_bonus_price_discount
                                        from     vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_bonus b,vw_invoice_mst i
                                        where    m.ret_recv_mst_slno =d.ret_recv_mst_slno
                                        and      d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                                        and      m.invoice_no  = i.invoice_no
                                        and      trunc (i.invoice_date) between fDate and tDate
                                        and     (m.customer_code = cCode or cCode='ALL')
                                        and      i.inv_type_code='INV001'    
                                                                                                                                                                  
                                        union all
                                                                                            
                                        select  m.invoice_no,
                                                b.product_code,
                                                0 return_qty,
                                                0 return_value,
                                                0 ret_bns_qty,
                                                nvl(trade_qty,0) ret_trd_qty,
                                                0 ret_bonus_price_discount
                                        from    vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_trade b,vw_invoice_mst i
                                        where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                                        and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                                        and     m.invoice_no  = i.invoice_no
                                        and     trunc (i.invoice_date) between fDate and tDate
                                        and     (m.customer_code = cCode or cCode='ALL')
                                        and     i.inv_type_code='INV001'                                                                            
                                    )                                                                        
                                    group by invoice_no,product_code                                                                                                                                                                
                                ) b    
                                where a.invoice_no=b.invoice_no(+)
                                and   a.product_code=b.product_code(+)
                                group by a.customer_code,a.market_code,a.product_code
                         ) a, mv_division_customer_relation b,mv_customer_info c,mv_product_info d,mv_product_price e
                        where a.market_code=b.market_code(+)                                
                        and   a.customer_code=c.customer_code
                        and   a.product_code=d.product_code
                        and   a.product_code=e.product_code
                        and   a.product_code in (select product_code from user_product_dtl where user_id=userId) 
                        and  (b.zone_code = dCode or dCode='ALL')
                        and  (b.area_code = rCode or rCode='ALL')
                        and  (b.belt_code = aCode or aCode='ALL')
                        and  (b.territory_code = tCode or tCode='ALL')  
                        and  (a.customer_code = cCode or cCode='ALL');           
            
         end;     
     
     end if;

    
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_MARKET_PROD_IMS_TODAY(pdivision_code varchar2, 
                                                                pregion_code varchar2,
                                                                parea_code varchar2,
                                                                pterritory_code varchar2,
                                                                pcustomer_code varchar2,
                                                                puser_id number
                                                                )
   return sys_refcursor
as
   Ims       sys_refcursor;  

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   userId   number        :=puser_id;
   vCount   number:=0;   

begin


   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 
   
   
     if vCount = 0 then 
     
             
         begin
                   
                   open Ims for                                                                            
                                select b.zone_code division_code,
                                       b.zone_name division_name,
                                       b.area_code region_code,
                                       b.area_name region_name,
                                       b.belt_code area_code,
                                       b.belt_name area_name,
                                       b.territory_code,
                                       b.territory_name,
                                       b.db_location,
                                       a.customer_code,
                                       c.customer_name,        
                                       a.market_code,
                                       b.market_name,
                                       a.product_code,
                                       d.product_name,
                                       d.pack_size,
                                       e.unit_tp product_price,                                              
                                       nvl(a.sales_qty,0) sales_qty,
                                       nvl(a.return_sales_qty,0) return_sales_qty,
                                       nvl(a.ims_sales_qty,0) ims_sales_qty,                                       
                                       nvl(a.bonus_qty,0) bonus_qty,
                                       nvl(a.return_bonus_qty,0) return_bonus_qty,
                                       nvl(a.ims_bonus_qty,0) ims_bonus_qty,       
                                       nvl(a.invoice_value,0) invoice_value,              
                                       nvl(a.return_value,0) return_value,       
                                       nvl(a.ims_sales_val,0) ims_sales_val,                                       
                                       nvl(a.ims_bonus_val,0) ims_bonus_val,                                       
                                       nvl(a.bonus_price_discount,0) bonus_price_discount,
                                       nvl(a.ret_bonus_price_discount,0) ret_bonus_price_discount,                                              
                                       nvl(a.net_ims,0) net_ims,                                                                              
                                       nvl(round(a.bonus_per,2),0) bonus_per,
                                       nvl(a.target_qty,0) target_qty,       
                                       nvl(a.target_val,0) target_val
                                FROM
                                    (
                                    select customer_code,
                                           market_code,
                                           product_code,
                                           sum(nvl(sales_qty,0))sales_qty,
                                           sum(nvl(return_sales_qty,0))return_sales_qty,                                           
                                           sum(nvl(bonus_qty,0))bonus_qty,
                                           sum(nvl(return_bonus_qty,0))return_bonus_qty,                                                                                      
                                           sum(nvl(bonus_price_discount,0))bonus_price_discount,
                                           sum(nvl(ret_bonus_price_discount,0))ret_bonus_price_discount,                                                                                      
                                           sum(nvl(ims_sales_qty,0))ims_sales_qty,
                                           sum(nvl(ims_bonus_qty,0))ims_bonus_qty,                                           
                                           sum(nvl(invoice_value,0))invoice_value,
                                           sum(nvl(return_value,0))return_value,                                           
                                           sum(nvl(ims_sales_val,0))ims_sales_val,           
                                           sum(nvl(ims_bonus_val,0))ims_bonus_val,                                           
                                           sum(nvl(net_ims,0))net_ims,                                           
                                           sum(nvl(bonus_per,0))bonus_per,                                           
                                           sum(nvl(target_qty,0))target_qty,       
                                           sum(nvl(target_val,0))target_val
                                    from
                                              (                       
                                              select   a.customer_code, 
                                                       a.market_code,    
                                                       a.product_code,                                                       
                                                       sum(nvl(issued_qty,0)) sales_qty, 
                                                       sum(nvl(return_sales_qty,0)) return_sales_qty ,                                                       
                                                       sum(nvl(bonus_qty,0)) bonus_qty,
                                                       sum(nvl(return_bonus_qty,0)) return_bonus_qty,                                                       
                                                       sum(nvl(bonus_price_discount,0)) bonus_price_discount,                                                       
                                                       sum(nvl(ret_bonus_price_discount,0)) ret_bonus_price_discount,                                                      
                                                       (sum(nvl(issued_qty,0))-sum(nvl(return_sales_qty,0))) ims_sales_qty,                                                       
                                                       (sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0))) ims_bonus_qty,                                                       
                                                        ( ( sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0)) )*( select unit_tp from mv_product_price where product_code=a.product_code))   ims_bonus_val,                                                                                                                   
                                                       sum(nvl(invoice_value,0))+sum(nvl(bonus_price_discount,0)) invoice_value,                                                                               
                                                       sum(nvl(return_value,0))+sum(nvl(ret_bonus_price_discount,0)) return_value,                                                            
                                                      (sum(nvl(invoice_value,0)) +sum(nvl(bonus_price_discount,0)))-  (sum(nvl(return_value,0))+sum(nvl(ret_bonus_price_discount,0))) ims_sales_val,       
                                                      sum(nvl(invoice_value,0)) -   sum(nvl(return_value,0))   net_ims,                                                                                                               
                                                     ((nvl((sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0))),0)+ sum(nvl(bonus_price_discount,0)) )/ nvl(decode((sum(nvl(invoice_value,0))- sum(nvl(return_value,0)) + sum(nvl(ret_bonus_price_discount,0))),'0',1,(sum(nvl(invoice_value,0))- sum(nvl(return_value,0)) +sum(nvl(ret_bonus_price_discount,0)))),1))*100 bonus_per,                                                     
                                                     0 target_qty,                                                     
                                                     0 target_val    
                                                from
                                                  (                                                                                                                                                                                                                       
                                                   select   customer_code,
                                                            market_code,
                                                            invoice_no,
                                                            product_code,
                                                            sum(nvl(issued_qty,0))  issued_qty,
                                                            sum(nvl(bonus_qty,0)) bonus_qty,
                                                            sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                                            sum(nvl(total,0)) invoice_value
                                                    from
                                                       (                                                                                                                                                    
                                                         select m.invoice_no,
                                                                m.customer_code,
                                                                m.market_code,
                                                                d.product_code,
                                                                nvl(d.issued_qty,0) issued_qty,
                                                                0 bonus_qty,
                                                                nvl(bonus_price_discount,0) bonus_price_discount ,
                                                                nvl(net_val,0) total
                                                        from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d
                                                        where m.inv_mst_slno=d.inv_mst_slno  
                                                        and   m.inv_type_code='INV001'       
                                                        and   trunc (m.invoice_date) =  trunc(sysdate)
                                                                                  
                                                                                            
                                                        union all
                                                                                            
                                                        select m.invoice_no,
                                                               m.customer_code,
                                                               m.market_code,
                                                               i.product_code,
                                                               0 issued_qty,
                                                               nvl(i.bonus_qty,0) bonus_qty,
                                                               0 bonus_price_discount,
                                                               0 total
                                                        from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d, spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com i
                                                        where m.inv_mst_slno=d.inv_mst_slno
                                                        and   d.inv_dtl_slno=i.inv_dtl_slno          
                                                        and   m.inv_type_code='INV001'
                                                        and  trunc (m.invoice_date) =  trunc(sysdate)
                                                                     
                                                       ) 
                                                        group by   customer_code,market_code,invoice_no,product_code
                                                                           
                                                                                      
                                                                                      
                                                   ) A, 

                                                                     
                                                                     
                                                   (
                                                                                        
                                                    select  invoice_no, 
                                                            product_code,
                                                            sum(nvl(return_qty,0))  return_sales_qty,
                                                            sum(nvl(return_value,0))  return_value,
                                                            sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bonus_qty,
                                                            sum(nvl(ret_bonus_price_discount,0)) ret_bonus_price_discount
                                                  from 
                                                      (
                                                                                     
                                                                                     
                                                    select   m.invoice_no,
                                                             d.product_code,
                                                             nvl(d.return_qty,0) return_qty,
                                                             nvl(d.return_value,0) return_value,
                                                             0 ret_bns_qty,
                                                             0 ret_trd_qty,
                                                             nvl(d.bonus_price_discount,0) ret_bonus_price_discount             
                                                     from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                     where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                     and    m.invoice_no   =i.invoice_no
                                                     and    trunc (i.invoice_date) =  trunc(sysdate)
                                                     and    i.inv_type_code='INV001'  
                                                                                       
                                                    union all
                                                                                        
                                                    select   m.invoice_no,
                                                             b.product_code,
                                                             0 return_qty,
                                                             0 return_value,
                                                             bonus_qty ret_bns_qty,
                                                             0 ret_trd_qty,
                                                             0 ret_bonus_price_discount
                                                    from     spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d, spa_sfbl.ret_return_bonus@dl_spasfbl.squaregroup.com b, spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                    where    m.ret_recv_mst_slno =d.ret_recv_mst_slno
                                                    and      d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                                                    and      m.invoice_no  = i.invoice_no
                                                    and      trunc (i.invoice_date) =  trunc(sysdate)
                                                    and      i.inv_type_code='INV001'    
                                                                      
                                                                                        
                                                    union all
                                                                                        
                                                    select  m.invoice_no,
                                                            b.product_code,
                                                            0 return_qty,
                                                            0 return_value,
                                                            0 ret_bns_qty,
                                                            nvl(trade_qty,0) ret_trd_qty,
                                                            0 ret_bonus_price_discount
                                                    from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com b,spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                    where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                                                    and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                                                    and     m.invoice_no  = i.invoice_no
                                                    and trunc (i.invoice_date) =  trunc(sysdate)
                                                    and     i.inv_type_code='INV001'
                                                                            
                                                    )
                                                                        
                                                    group by invoice_no,product_code
                                                                        
                                                                                        
                                                ) b    

                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                group by a.customer_code,a.market_code,a.product_code

                                             ) 
                                            group by customer_code,market_code,product_code
                                 ) a, mv_division_customer_relation b,mv_customer_info c,mv_product_info d, mv_product_price e
                                where a.market_code=b.market_code(+)
                                and   a.customer_code=c.customer_code                                
                                and   a.product_code=d.product_code
                                and   a.product_code=e.product_code

                                and  (b.zone_code = dCode or dCode='ALL')
                                and  (b.area_code = rCode or rCode='ALL')
                                and  (b.belt_code = aCode or aCode='ALL')
                                and  (b.territory_code = tCode or tCode='ALL')  
                                and  (a.customer_code = cCode or cCode='ALL') ;    
                                --order by division_name,region_name,area_name,territory_name,customer_name,market_name,product_name; 
                         
            
             
         end;
     
     elsif vCount > 0 then 
     
     
         begin
             
                   open Ims for                                                                            
                                select b.zone_code division_code,
                                       b.zone_name division_name,
                                       b.area_code region_code,
                                       b.area_name region_name,
                                       b.belt_code area_code,
                                       b.belt_name area_name,
                                       b.territory_code,
                                       b.territory_name,
                                       b.db_location,
                                       a.customer_code,
                                       c.customer_name,        
                                       a.market_code,
                                       b.market_name,
                                       a.product_code,
                                       d.product_name,
                                       d.pack_size,
                                       e.unit_tp product_price,                                             
                                       nvl(a.sales_qty,0) sales_qty,
                                       nvl(a.return_sales_qty,0) return_sales_qty,
                                       nvl(a.ims_sales_qty,0) ims_sales_qty,                                       
                                       nvl(a.bonus_qty,0) bonus_qty,
                                       nvl(a.return_bonus_qty,0) return_bonus_qty,
                                       nvl(a.ims_bonus_qty,0) ims_bonus_qty,       
                                       nvl(a.invoice_value,0) invoice_value,              
                                       nvl(a.return_value,0) return_value,       
                                       nvl(a.ims_sales_val,0) ims_sales_val,                                       
                                       nvl(a.ims_bonus_val,0) ims_bonus_val,                                       
                                       nvl(a.bonus_price_discount,0) bonus_price_discount,
                                       nvl(a.ret_bonus_price_discount,0) ret_bonus_price_discount,                                              
                                       nvl(a.net_ims,0) net_ims,                                                                              
                                       nvl(round(a.bonus_per,2),0) bonus_per,
                                       nvl(a.target_qty,0) target_qty,       
                                       nvl(a.target_val,0) target_val
                                FROM
                                    (
                                    select customer_code,
                                           market_code,
                                           product_code,
                                           sum(nvl(sales_qty,0))sales_qty,
                                           sum(nvl(return_sales_qty,0))return_sales_qty,                                           
                                           sum(nvl(bonus_qty,0))bonus_qty,
                                           sum(nvl(return_bonus_qty,0))return_bonus_qty,                                                                                      
                                           sum(nvl(bonus_price_discount,0))bonus_price_discount,
                                           sum(nvl(ret_bonus_price_discount,0))ret_bonus_price_discount,                                                                                      
                                           sum(nvl(ims_sales_qty,0))ims_sales_qty,
                                           sum(nvl(ims_bonus_qty,0))ims_bonus_qty,                                           
                                           sum(nvl(invoice_value,0))invoice_value,
                                           sum(nvl(return_value,0))return_value,                                           
                                           sum(nvl(ims_sales_val,0))ims_sales_val,           
                                           sum(nvl(ims_bonus_val,0))ims_bonus_val,                                           
                                           sum(nvl(net_ims,0))net_ims,                                           
                                           sum(nvl(bonus_per,0))bonus_per,                                           
                                           sum(nvl(target_qty,0))target_qty,       
                                           sum(nvl(target_val,0))target_val
                                    from
                                              (                       
                                              select   a.customer_code, 
                                                       a.market_code,    
                                                       a.product_code,                                                       
                                                       sum(nvl(issued_qty,0)) sales_qty, 
                                                       sum(nvl(return_sales_qty,0)) return_sales_qty ,                                                       
                                                       sum(nvl(bonus_qty,0)) bonus_qty,
                                                       sum(nvl(return_bonus_qty,0)) return_bonus_qty,                                                       
                                                       sum(nvl(bonus_price_discount,0)) bonus_price_discount,                                                       
                                                       sum(nvl(ret_bonus_price_discount,0)) ret_bonus_price_discount,                                                      
                                                       (sum(nvl(issued_qty,0))-sum(nvl(return_sales_qty,0))) ims_sales_qty,                                                       
                                                       (sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0))) ims_bonus_qty,                                                       
                                                        ( ( sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0)) )*( select unit_tp from mv_product_price where product_code=a.product_code))   ims_bonus_val,                                                                                                                   
                                                       sum(nvl(invoice_value,0))+sum(nvl(bonus_price_discount,0)) invoice_value,                                                                               
                                                       sum(nvl(return_value,0))+sum(nvl(ret_bonus_price_discount,0)) return_value,                                                            
                                                      (sum(nvl(invoice_value,0)) +sum(nvl(bonus_price_discount,0)))-  (sum(nvl(return_value,0))+sum(nvl(ret_bonus_price_discount,0))) ims_sales_val,       
                                                      sum(nvl(invoice_value,0)) -   sum(nvl(return_value,0))   net_ims,                                                                                                               
                                                     ((nvl((sum(nvl(bonus_qty,0))-sum(nvl(return_bonus_qty,0))),0)+ sum(nvl(bonus_price_discount,0)) )/ nvl(decode((sum(nvl(invoice_value,0))- sum(nvl(return_value,0)) + sum(nvl(ret_bonus_price_discount,0))),'0',1,(sum(nvl(invoice_value,0))- sum(nvl(return_value,0)) +sum(nvl(ret_bonus_price_discount,0)))),1))*100 bonus_per,                                                     
                                                     0 target_qty,                                                     
                                                     0 target_val    
                                                from
                                                  (                     
                                                   select   customer_code,
                                                            market_code,
                                                            invoice_no,
                                                            product_code,
                                                            sum(nvl(issued_qty,0))  issued_qty,
                                                            sum(nvl(bonus_qty,0)) bonus_qty,
                                                            sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                                            sum(nvl(total,0)) invoice_value
                                                    from
                                                       (  
                                                                           
                                                                       
                                                         select m.invoice_no,
                                                                m.customer_code,
                                                                m.market_code,
                                                                d.product_code,
                                                                nvl(d.issued_qty,0) issued_qty,
                                                                0 bonus_qty,
                                                                nvl(bonus_price_discount,0) bonus_price_discount ,
                                                                nvl(net_val,0) total
                                                        from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d
                                                        where m.inv_mst_slno=d.inv_mst_slno  
                                                        and   m.inv_type_code='INV001'       
                                                        and   trunc (m.invoice_date) =  trunc(sysdate)
                                                        and   d.product_code in (select product_code from user_product_dtl where user_id=userId)   
                                                                                  
                                                                                            
                                                        union all
                                                                                            
                                                        select m.invoice_no,
                                                               m.customer_code,
                                                               m.market_code,
                                                               i.product_code,
                                                               0 issued_qty,
                                                               nvl(i.bonus_qty,0) bonus_qty,
                                                               0 bonus_price_discount,
                                                               0 total
                                                        from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d, spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com i
                                                        where m.inv_mst_slno=d.inv_mst_slno
                                                        and   d.inv_dtl_slno=i.inv_dtl_slno          
                                                        and   m.inv_type_code='INV001'
                                                        and  trunc (m.invoice_date) =  trunc(sysdate)
                                                        and   d.product_code in (select product_code from user_product_dtl where user_id=userId)   
                                                                     
                                                       ) 
                                                        group by   customer_code,market_code,invoice_no,product_code
                                                                           
                                                                                      
                                                                                      
                                                   ) A, 

                                                                     
                                                                     
                                                   (
                                                                                        
                                                    select  invoice_no, 
                                                            product_code,
                                                            sum(nvl(return_qty,0))  return_sales_qty,
                                                            sum(nvl(return_value,0))  return_value,
                                                            sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bonus_qty,
                                                            sum(nvl(ret_bonus_price_discount,0)) ret_bonus_price_discount
                                                  from 
                                                      (
                                                                                     
                                                                                     
                                                    select   m.invoice_no,
                                                             d.product_code,
                                                             nvl(d.return_qty,0) return_qty,
                                                             nvl(d.return_value,0) return_value,
                                                             0 ret_bns_qty,
                                                             0 ret_trd_qty,
                                                             nvl(d.bonus_price_discount,0) ret_bonus_price_discount             
                                                     from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                     where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                     and    m.invoice_no   =i.invoice_no
                                                     and    trunc (i.invoice_date) =  trunc(sysdate)
                                                     and    i.inv_type_code='INV001'
                                                     and    d.product_code in (select product_code from user_product_dtl where user_id=userId)     
                                                                                       
                                                    union all
                                                                                        
                                                    select   m.invoice_no,
                                                             b.product_code,
                                                             0 return_qty,
                                                             0 return_value,
                                                             bonus_qty ret_bns_qty,
                                                             0 ret_trd_qty,
                                                             0 ret_bonus_price_discount
                                                    from     spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,spa_sfbl.ret_return_bonus@dl_spasfbl.squaregroup.com b,spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                    where    m.ret_recv_mst_slno =d.ret_recv_mst_slno
                                                    and      d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                                                    and      m.invoice_no  = i.invoice_no
                                                    and      trunc (i.invoice_date) =  trunc(sysdate)
                                                    and      i.inv_type_code='INV001' 
                                                    and     d.product_code in (select product_code from user_product_dtl where user_id=userId)      
                                                                      
                                                                                        
                                                    union all
                                                                                        
                                                    select  m.invoice_no,
                                                            b.product_code,
                                                            0 return_qty,
                                                            0 return_value,
                                                            0 ret_bns_qty,
                                                            nvl(trade_qty,0) ret_trd_qty,
                                                            0 ret_bonus_price_discount
                                                    from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com b,spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                    where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                                                    and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                                                    and     m.invoice_no  = i.invoice_no
                                                    and     trunc (i.invoice_date) =  trunc(sysdate)
                                                    and     i.inv_type_code='INV001'
                                                    and     d.product_code in (select product_code from user_product_dtl where user_id=userId)   
                                                                            
                                                    )
                                                                        
                                                    group by invoice_no,product_code
                                                                        
                                                                                        
                                                ) b    

                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                group by a.customer_code,a.market_code,a.product_code

                                             ) 
                                            group by customer_code,market_code,product_code
                                 ) a, mv_division_customer_relation b,mv_customer_info c,mv_product_info d, mv_product_price e
                                where a.market_code=b.market_code(+)
                                and   a.customer_code=c.customer_code                                
                                and   a.product_code=d.product_code
                                and   a.product_code=e.product_code

                                and  (b.zone_code = dCode or dCode='ALL')
                                and  (b.area_code = rCode or rCode='ALL')
                                and  (b.belt_code = aCode or aCode='ALL')
                                and  (b.territory_code = tCode or tCode='ALL')  
                                and  (a.customer_code = cCode or cCode='ALL');     
                                --order by division_name,region_name,area_name,territory_name,customer_name,market_name,product_name;          
            
         end;     
     
     end if;

   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_TRADE_PROGRAM_PARTICI_BK( p_division_code varchar2, 
                                                                       p_region_code varchar2,
                                                                       p_area_code varchar2,
                                                                       p_territory_code varchar2,
                                                                       p_customer_code varchar2,
                                                                       p_program_no varchar2,
                                                                       p_effect_type varchar2
                                                                       )
   return sys_refcursor
as
   trade_ims       sys_refcursor;  
   
   


   
   v_divisionCode varchar2(100)   :=p_division_code;
   v_regionCode varchar2(100)     :=p_region_code;
   v_areaCode varchar2(100)       :=p_area_code;
   v_territoryCode varchar2(100)  :=p_territory_code;
   v_customerCode varchar2(100)   :=p_customer_code;
   
   
   v_program_no varchar2(100)  :=p_program_no;
   v_effect_type varchar2(100)   :=p_effect_type;   
   
   
      

begin
   open trade_ims for                                                                            
                        select division_code,
                               division_name,
                               region_code,
                               region_name,
                               area_code,
                               area_name,
                               territory_code,
                               territory_name,
                               customer_code,
                               customer_name,
                               db_location,
                               market_code,
                               market_name,
                               route_code,
                               route_name,
                               retailer_code,
                               retailer_name,
                               trade_program_no,
                               program_name,
                               effect_type,
                               trade_policy_no,
                               slab_target_val,
                               slab_upper_amt,
                               no_of_inv,
                               gift,
                               discount_amt,
                               discount_percentage,
                               entry_date,
                               program_type_code,
                               program_type,
                               effect_from_date,
                               effect_to_date,
                               sales_value,
                               return_value,
                               ims_value
                         from 
                            ( 
                            select b.zone_code division_code,
                                   b.zone_name division_name,
                                   b.area_code region_code,
                                   b.area_name region_name,
                                   b.belt_code area_code,
                                   b.belt_name area_name,
                                   b.territory_code,
                                   b.territory_name,
                                   c.customer_code,
                                   c.customer_name,
                                   c.db_location,
                                   b.market_code,
                                   b.market_name,
                                   b.route_code,
                                   b.route_name,
                                   t.retailer_code,
                                   b.retailer_name,
                                   t.trade_program_no,
                                   s.title program_name,
                                   m.effect_type,
                                   t.trade_policy_no,
                                   nvl(s.slab_target_val,0) slab_target_val,
                                   nvl(s.slab_upper_amt,0) slab_upper_amt,
                                   nvl( s.no_inv_month,0) no_of_inv,
                                   s.gift,
                                   nvl (s.discount_amt, 0) discount_amt,
                                   nvl (s.discount_percentage, 0) discount_percentage,
                                   to_char (t.entry_date, 'MM/DD/YYYY') entry_date,
                                   program_type program_type_code,
                                   'Trade Program' program_type,
                                   to_char(s.effect_from_date,'dd/mm/rrrr') effect_from_date,
                                   to_char(s.effect_to_date,'dd/mm/rrrr')effect_to_date,
                                   fn_ret_trade_inv_value (t.retailer_code,t.trade_program_no,s.effect_from_date, s.effect_to_date,t.program_type) sales_value,
                                   fn_ret_trade_return_value (t.retailer_code,t.trade_program_no,s.effect_from_date,s.effect_to_date,t.program_type) return_value,
                                   fn_ret_achievement_value (t.retailer_code,t.trade_program_no,s.effect_from_date,s.effect_to_date,t.program_type) ims_value
                             from  mv_trade_program_retailer  t,spa_sfbl.vw_trade_gift_details@dl_spasfbl.squaregroup.com  s,mv_trade_prog_prod_mst  m , mv_division_retailer_relation b, mv_division_customer_relation c      
                             where t.trade_program_no = s.program_no(+)
                             and   t.trade_program_no = m.trade_prog_prod_mst_slno(+)
                             and   t.trade_policy_no = s.slab_no(+)
                             and   t.program_type = s.category(+)     
                             and   t.retailer_code = b.retailer_code
                             and   b.market_code=c.market_code
                             and   t.trade_program_no=v_program_no
                             and   m.effect_type=v_effect_type
                             )
        where  (division_code = v_divisionCode or v_divisionCode='ALL')
        and    (region_code = v_regionCode or v_regionCode='ALL')
        and    (area_code = v_areaCode or v_areaCode='ALL')
        and    (territory_code = v_territoryCode or v_territoryCode='ALL')  
        and    (customer_code = v_customerCode or v_customerCode='ALL') ;                 

                        
      


   
    return trade_ims;
    
exception
   when no_data_found
   then
   open trade_ims for
         select *
           from dual
          where 1 = 2;
      return trade_ims;
end;
/

CREATE OR REPLACE function             fn_Invoice_Ims_Date_Range(   
                                                    pfrom_date varchar2,
                                                    pto_date varchar2,
                                                    pdivision_code varchar2, 
                                                    pregion_code varchar2,
                                                    parea_code varchar2,
                                                    pterritory_code varchar2,
                                                    pcustomer_code varchar2
                                                    )
   return sys_refcursor
as
   Invoice_Ims       sys_refcursor;  
   
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Invoice_Ims for                                                                            
                        select b.zone_code division_code, 
                               b.zone_name division_name, 
                               b.area_code region_code, 
                               b.area_name region_name, 
                               b.belt_code area_code, 
                               b.belt_name area_name, 
                               b.territory_code, 
                               b.territory_name,
                               a.customer_code,
                               d.customer_name,
                               d.db_location, 
                               a.fso_code,
                               c.employee_name fso_name,
                               a.market_code, 
                               b.market_name,
                               a.route_code,
                               e.route_name,
                               a.retailer_code,
                               f.retailer_name,
                               a.invoice_no,
                               to_char(A.invoice_date,'MM/DD/RRRR HH:MI:SS AM') invoice_date,
                               to_char(a.return_date,'mm/dd/rrrr') return_date,
                               a.invoice_amt,
                               a.slab_adjustment_amt,
                               a.net_invoince_amt,
                               a.return_amt,
                               a.return_slab_adjustment_amt,
                               a.net_return_amt,
                               a.ims_amt                
                        from
                            (
                                select customer_code,
                                       fso_code,
                                       market_code,
                                       route_code,
                                       retailer_code,
                                       a.invoice_no,
                                       invoice_date,
                                       return_date,
                                       invoice_amt,
                                       slab_adjustment_amt,
                                       net_invoince_amt,
                                       nvl(return_amt,0) return_amt,
                                       nvl(return_slab_adjustment_amt,0) return_slab_adjustment_amt,
                                       nvl(net_return_amt,0) net_return_amt,
                                       nvl(net_invoince_amt,0) -  nvl(net_return_amt,0) ims_amt  
                                from
                                   (
                                        select customer_code,
                                               employee_code fso_code,
                                               market_code,
                                               route_code,
                                               retailer_code,
                                               invoice_no,
                                               invoice_date,
                                               nvl(grand_total,0) invoice_amt, 
                                               nvl(slab_adjustment,0)+nvl(special_bonus_disc,0) slab_adjustment_amt, 
                                               nvl(net_inv_amount,0)net_invoince_amt                                
                                        from   vw_invoice_mst  
                                        where  inv_type_code='INV001'
                                        and    TRUNC(invoice_date) between fDate and tDate
                                        and   (customer_code = cCode or cCode='ALL')         
                                   )a,
                                   (
                                        select a.invoice_no,
                                               a.return_date,
                                               nvl(a.return_value,0) return_amt,
                                               nvl(a.return_slab_amount,0)+ nvl(a.special_bonus_disc,0) return_slab_adjustment_amt,
                                               nvl(net_return_val,0) net_return_amt
                                        from   vw_ret_return_mst a,vw_invoice_mst b
                                        where  a.invoice_no=b.invoice_no
                                        and    b.inv_type_code='INV001'
                                        and    TRUNC(b.invoice_date) between fDate and tDate
                                        and   (b.customer_code = cCode or cCode='ALL')   
                                   )b
                                where a.invoice_no=b.invoice_no(+)   
                                  
                            )a,mv_division_market_relation b,mv_employee_info c,mv_customer_info d,mv_route_info e,mv_retailer_info f
                        where a.market_code=b.market_code
                        and   a.fso_code=c.employee_code
                        and   a.customer_code=d.customer_code  
                        and   a.route_code=e.route_code
                        and   a.retailer_code=f.retailer_code  
                        and  (b.zone_code = dCode or dCode='ALL')
                        and  (b.area_code = rCode or rCode='ALL')
                        and  (b.belt_code = aCode or aCode='ALL')
                        and  (b.territory_code = tCode or tCode='ALL')  
                        and  (a.customer_code = cCode or cCode='ALL');
    
    


   
    return Invoice_Ims;
    
exception
   when no_data_found
   then
   open Invoice_Ims for
         select *
           from dual
          where 1 = 2;
      return Invoice_Ims;
end;
/

CREATE OR REPLACE function             fn_Fso_Ims_Date_Range(   
                                                            pfrom_date varchar2,
                                                            pto_date varchar2,
                                                            pdivision_code varchar2, 
                                                            pregion_code varchar2,
                                                            parea_code varchar2,
                                                            pterritory_code varchar2,
                                                            pcustomer_code varchar2
                                                            )
   return sys_refcursor
as
   fso_wise_ims       sys_refcursor;  
   
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open fso_wise_ims for   
                select b.zone_code division_code, 
                       b.zone_name division_name, 
                       b.area_code region_code, 
                       b.area_name region_name, 
                       b.belt_code area_code, 
                       b.belt_name area_name, 
                       b.territory_code, 
                       b.territory_name,
                       a.customer_code,
                       d.customer_name,
                       d.db_location, 
                       a.fso_code,
                       c.employee_name fso_name,
                       a.market_code, 
                       b.market_name,
                       a.no_of_invoice,
                       a.invoice_amt,
                       a.slab_adjustment_amt,
                       a.net_invoince_amt,
                       a.return_amt,
                       a.return_slab_adjustment_amt,
                       a.net_return_amt,
                       a.ims_amt                
                from
                    (
                       select customer_code,
                               fso_code,
                               market_code,                                    
                               count(invoice_no) no_of_invoice,                                                                                
                               sum(nvl(invoice_amt,0)) invoice_amt,
                               sum(nvl(slab_adjustment_amt,0)) slab_adjustment_amt,
                               sum(nvl(net_invoince_amt,0)) net_invoince_amt,
                               sum(nvl(return_amt,0)) return_amt,
                               sum(nvl(return_slab_adjustment_amt,0)) return_slab_adjustment_amt,
                               sum(nvl(net_return_amt,0)) net_return_amt,
                               sum(nvl(ims_amt,0)) ims_amt                                                                                                                    
                        from
                           (
                                select customer_code,
                                       fso_code,
                                       market_code,                                    
                                       a.invoice_no ,                                                                                
                                       nvl(invoice_amt,0) invoice_amt,
                                       nvl(slab_adjustment_amt,0) slab_adjustment_amt,
                                       nvl(net_invoince_amt,0) net_invoince_amt,
                                       nvl(return_amt,0) return_amt,
                                       nvl(return_slab_adjustment_amt,0) return_slab_adjustment_amt,
                                       nvl(net_return_amt,0) net_return_amt,
                                       nvl(net_invoince_amt,0) -  nvl(net_return_amt,0) ims_amt                                                                                                                    
                                from
                                   (
                                        select customer_code,
                                               employee_code fso_code,
                                               market_code,
                                               route_code,
                                               retailer_code,
                                               invoice_no,
                                               trunc(invoice_date) invoice_date,
                                               nvl(grand_total,0) invoice_amt, 
                                               nvl(slab_adjustment,0)+nvl(special_bonus_disc,0) slab_adjustment_amt, 
                                               nvl(net_inv_amount,0)net_invoince_amt                                
                                        from   vw_invoice_mst  
                                        where  inv_type_code='INV001'
                                        and    invoice_date between fDate and tDate
                                        and   (customer_code = cCode or cCode='ALL')         
                                   )a,
                                   (
                                        select a.invoice_no,
                                               a.return_date,
                                               nvl(a.return_value,0) return_amt,
                                               nvl(a.return_slab_amount,0)+ nvl(a.special_bonus_disc,0) return_slab_adjustment_amt,
                                               nvl(net_return_val,0) net_return_amt
                                        from   vw_ret_return_mst a,vw_invoice_mst b
                                        where  a.invoice_no=b.invoice_no
                                        and    b.inv_type_code='INV001'
                                        and    b.invoice_date between fDate and tDate
                                        and   (b.customer_code = cCode or cCode='ALL')   
                                   )b
                                where a.invoice_no=b.invoice_no(+)
                             )
                             group by customer_code, fso_code,market_code  
                                  
                            )a,mv_division_market_relation b,mv_employee_info c,mv_customer_info d
                        where a.market_code=b.market_code(+)
                        and   a.fso_code=c.employee_code(+)
                        and   a.customer_code=d.customer_code
                        and   (b.zone_code = dCode or dCode='ALL')
                        and    (b.area_code = rCode or rCode='ALL');
                        --and    (b.belt_code = aCode or aCode='ALL');
                        --and    (b.territory_code = :tCode or :tCode='ALL');                         
    
    


   
    return fso_wise_ims;
    
exception
   when no_data_found
   then
   open fso_wise_ims for
         select *
           from dual
          where 1 = 2;
      return fso_wise_ims;
end;
/

CREATE OR REPLACE function FN_RET_PROD_IMS_TODAY   ( pdivision_code varchar2, 
                                                     pregion_code varchar2,
                                                     parea_code varchar2,
                                                     pterritory_code varchar2,
                                                     pcustomer_code varchar2,                                                                                     
                                                     pbase_product_code varchar2,
                                                     pbrand_Code varchar2,
                                                     pcategory_code varchar2,                                                                                     
                                                     pproduct_code varchar2,
                                                     puser_id number
                                                     )
   return sys_refcursor
as
   Ims       sys_refcursor;  

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   
   
   vbase_product_code varchar2(100)    :=pbase_product_code;
   vbrand_Code varchar2(100)           :=pbrand_Code;
   vcategory_code varchar2(100)        :=pcategory_code;
   
   pCode varchar2(100)    :=pproduct_code;
   userId   number        :=puser_id;
   vCount   number:=0;   

begin


   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 
   
   
     if vCount = 0 then 
     
             
         begin

                   open Ims for                                                                            
                            select    
                                     c.zone_code division_code,
                                     c.zone_name division_name,
                                     c.area_code region_code,
                                     c.area_name region_name,
                                     c.belt_code area_code,
                                     c.belt_name area_name,
                                     c.territory_code,
                                     c.territory_name,
                                     a.market_code,
                                     c.market_name,         
                                     a.customer_code,
                                     c.customer_name,
                                     c.db_location, 
                                     a.route_code,
                                     d.route_name,
                                     a.retailer_code,
                                     e.retailer_name,
                                     p.base_product_code,
                                     g.base_product_name, 
                                     p.brand_code,
                                     h.brand_name,
                                     p.product_category product_category_code,
                                     i.category_code product_category_name,                                            
                                     a.product_code,
                                     p.product_name,
                                     p.pack_size,
                                     f.unit_tp product_price,
                                     nvl(a.invoice_amt, 0) invoice_amt,
                                     nvl(a.issued_qty, 0) sales_qty,
                                     nvl(a.bonus_qty, 0) sales_bonus_qty,
                                     nvl(a.bonus_price_discount, 0) bonus_price_discount,
                                     nvl(a.replace_qty, 0) replace_qty,
                                     nvl(a.return_sales_qty, 0) return_sales_qty,
                                     nvl(a.return_bns_qty, 0) return_bns_qty,
                                     nvl(a.issued_qty, 0) - nvl (a.return_sales_qty, 0) ims_sales_qty,
                                     nvl(a.bonus_qty, 0) - nvl (a.return_bns_qty, 0) ims_bns_qty,
                                     nvl(a.return_value, 0) return_value,
                                     nvl(a.bns_disc_ret, 0) bns_disc_ret,
                                     nvl(a.bonus_price_discount, 0) - nvl (a.bns_disc_ret, 0) discount_val,
                                     nvl(a.invoice_amt, 0) - nvl (return_value, 0) net_ims,
                                     nvl(a.number_of_invoice,0) number_of_invoice,
                                     nvl(b.target_qty,0) target_qty
                                from (
                                        select customer_code,
                                               market_code,
                                               route_code,
                                               retailer_code,
                                               product_code,
                                               sum(nvl(issued_qty,0)) issued_qty,
                                               sum(nvl(bonus_qty,0)) bonus_qty,
                                               sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                               sum(nvl(invoice_amt,0))invoice_amt ,
                                               sum(nvl(replace_qty,0)) replace_qty,                   
                                               sum(nvl(return_sales_qty,0)) return_sales_qty,
                                               sum(nvl(return_value,0)) return_value,
                                               sum(nvl(return_bns_qty,0)) return_bns_qty,
                                               sum(nvl(bns_disc_ret,0)) bns_disc_ret, 
                                               sum(nvl(number_of_invoice,0)) number_of_invoice                  
                                                           
                                          from (    
                                                    select customer_code,
                                                           market_code,
                                                           route_code,
                                                           retailer_code,
                                                           product_code,
                                                           sum (issued_qty) issued_qty,
                                                           sum (bonus_qty) + sum (trade_qty) + sum (spec_bonus_qty) bonus_qty,
                                                           sum (bonus_price_discount) bonus_price_discount,
                                                           sum (total) invoice_amt,
                                                           sum (replace_qty) replace_qty,                   
                                                           0 return_sales_qty,
                                                           0 return_value,
                                                           0 return_bns_qty,
                                                           0 bns_disc_ret,
                                                           0 number_of_invoice                    
                                                           
                                                      from (                    
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     sum (nvl (d.issued_qty, 0)) issued_qty,
                                                                     0 bonus_qty,
                                                                     sum (d.bonus_price_discount) bonus_price_discount,
                                                                     sum (d.net_val) total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                              where m.inv_mst_slno = d.inv_mst_slno
                                                              and   m.inv_type_code = 'INV001'
                                                              and  (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and   trunc(m.invoice_date) = trunc(sysdate) 
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     i.product_code,
                                                                     0 issued_qty,
                                                                     sum (nvl (i.bonus_qty, 0)) bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from   spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d, spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com i
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.inv_dtl_slno = i.inv_dtl_slno
                                                              and   trunc(m.invoice_date) = trunc(sysdate)
                                                              and  (m.customer_code = cCode or cCode='ALL') 
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by i.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                    
                                                            UNION ALL
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     i.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     sum (nvl (i.trade_qty, 0)) trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d, spa_sfbl.invoice_trade@dl_spasfbl.squaregroup.com i
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.inv_dtl_slno = i.inv_dtl_slno
                                                              and   trunc(m.invoice_date) = trunc(sysdate) 
                                                              and  (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by i.product_code, m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                              
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     sum (d.spec_bonus_qty) spec_bonus_qty,
                                                                     0 replace_qty
                                                              from   spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_spec_bonus@dl_spasfbl.squaregroup.com d
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    trunc(m.invoice_date) = trunc(sysdate) 
                                                              and   (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                              
                                                              
                                                              
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     sum (issued_qty) replace_qty
                                                              from   spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    trunc(m.invoice_date) = trunc(sysdate) 
                                                              and   (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV002'
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code     
                                                  )
                                                  group by product_code, customer_code,market_code,route_code,retailer_code
                                                  

                                                 
                                                 union all
                                                 
                                                 
                                                  select customer_code,
                                                         market_code,
                                                         route_code,
                                                         retailer_code,                      
                                                         product_code,                 
                                                         0 issued_qty,
                                                         0 bonus_qty,
                                                         0 bonus_price_discount,
                                                         0 invoice_amt,
                                                         0 replace_qty,                                  
                                                         sum (nvl (return_qty, 0)) return_sales_qty,
                                                         sum (nvl (return_value, 0)) return_value,
                                                         sum (nvl (ret_bns_qty, 0))+ sum (nvl (ret_trd_qty, 0))+ sum (nvl (spec_bonus_qty, 0)) return_bns_qty,
                                                         sum (nvl (bns_disc_ret, 0)) bns_disc_ret,
                                                         0 number_of_invoice                             
                                                   FROM (  
                                                         
                                                         
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 d.product_code,
                                                                 sum (d.return_qty) return_qty,
                                                                 sum (nvl (d.return_value, 0)) return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                         from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d
                                                         where   m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                         and    trunc(m.invoice_date) = trunc(sysdate)
                                                         and   (m.customer_code = cCode or cCode='ALL')
                                                         and  (d.product_code =  pCode or pCode='ALL')
                                                         and     m.inv_type_code = 'INV001'
                                                         group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,d.product_code
                                                         
                                                         
                                                         
                                                         UNION ALL
                                                            
                                                            
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 d.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 sum (bonus_price_discount) bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    trunc(m.invoice_date) = trunc(sysdate)
                                                          and   (m.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    m.inv_type_code = 'INV001'
                                                          group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,d.product_code
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 b.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 sum (b.bonus_qty) ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d, spa_sfbl.ret_return_bonus@dl_spasfbl.squaregroup.com b
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                                                          and    trunc(m.invoice_date) = trunc(sysdate)
                                                          and   (m.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    m.inv_type_code = 'INV001'                  
                                                          group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,b.product_code
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 b.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 sum (b.trade_qty) ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d, spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com b
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                                                          and    trunc(m.invoice_date) = trunc(sysdate)
                                                          and   (m.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    m.inv_type_code = 'INV001'                  
                                                          group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,b.product_code
                                                            
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 d.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 sum (d.spec_bonus_qty) spec_bonus_qty
                                                          from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_spec_bonus@dl_spasfbl.squaregroup.com d
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    trunc(m.invoice_date) = trunc(sysdate)
                                                          and   (m.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    m.inv_type_code = 'INV001'                               
                                                          group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,d.product_code
                                                            
                                                            
                                                            )
                                                  group by  customer_code,market_code,route_code,retailer_code,product_code
                                            
                                            
                                                 union all
                                                 
                                                 
                                                    select   customer_code,
                                                             market_code,
                                                             route_code,
                                                             retailer_code,
                                                             d.product_code,
                                                             0 issued_qty,
                                                             0 bonus_qty,
                                                             0 bonus_price_discount,
                                                             0 invoice_amt,
                                                             0 replace_qty,                                  
                                                             0 return_sales_qty,
                                                             0 return_value,
                                                             0 return_bns_qty,
                                                             0 bns_disc_ret,                                
                                                            count(invoice_no) number_of_invoice 
                                                    from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and    m.inv_type_code = 'INV001'
                                                    and    trunc(m.invoice_date) = trunc(sysdate)
                                                    and  (m.customer_code = cCode or cCode='ALL')
                                                    and  (d.product_code =  pCode or pCode='ALL')
                                                    group by customer_code,market_code,route_code,retailer_code,d.product_code                     
                                            
                                            
                                            
                                            )          
                                         group by  customer_code,market_code,route_code,retailer_code,product_code
                                ) a, 
                                (
                                

                                select market_code,
                                       product_code,
                                       target_qty 
                               from mv_target_l3years
                               where   (year||month_code) =to_char (trunc (sysdate, 'MM'), 'YYYYMM')
                               and  (product_code =  pCode or pCode='ALL')
                               
                                
                                
                                )  b, mv_division_customer_relation c,mv_route_info d,mv_retailer_info e,mv_product_info p,mv_product_price f,
                                      mv_base_product_info g, mv_brand_info h, mv_category_info i
                            where a.market_code=b.market_code(+)
                            and   a.product_code=b.product_code(+)
                            and   a.market_code=c.market_code(+)
                            and   a.route_code=d.route_code
                            and   a.retailer_code=e.retailer_code
                            and   a.product_code=p.product_code(+)
                            and   a.product_code=f.product_code(+)

                            and   p.base_product_code=g.base_product_code
                            and   p.brand_code=h.brand_code
                            and   p.product_category=i.category_code                                   
                            
                            and  (c.zone_code = dCode or dCode='ALL')
                            and  (c.area_code = rCode or rCode='ALL')
                            and  (c.belt_code = aCode or aCode='ALL')
                            and  (c.territory_code = tCode or tCode='ALL')  
                            and  (a.customer_code = cCode or cCode='ALL')                            
                            and  (p.base_product_code =  vbase_product_code or vbase_product_code='ALL')   
                            and  (p.brand_code =  vbrand_code or vbrand_code='ALL')   
                            and  (p.product_category =  vcategory_code or vcategory_code='ALL')                               
                            and  (a.product_code =  pCode or pCode='ALL');   
                            --order by division_name,region_name,area_name,territory_name,customer_name,market_name,route_name,retailer_name,product_name;             

                         
            
             
         end;
     
    
   
    elsif vCount > 0 then 
     
     
         begin
             

                   open Ims for                                                                            
                            select    
                                     c.zone_code division_code,
                                     c.zone_name division_name,
                                     c.area_code region_code,
                                     c.area_name region_name,
                                     c.belt_code area_code,
                                     c.belt_name area_name,
                                     c.territory_code,
                                     c.territory_name,
                                     a.market_code,
                                     c.market_name,         
                                     a.customer_code,
                                     c.customer_name,
                                     c.db_location, 
                                     a.route_code,
                                     d.route_name,
                                     a.retailer_code,
                                     e.retailer_name,
                                     p.base_product_code,
                                     g.base_product_name, 
                                     p.brand_code,
                                     h.brand_name,
                                     p.product_category product_category_code,
                                     i.category_code product_category_name,                                            
                                     a.product_code,
                                     p.product_name,
                                     p.pack_size,
                                     f.unit_tp product_price,
                                     nvl(a.invoice_amt, 0) invoice_amt,
                                     nvl(a.issued_qty, 0) sales_qty,
                                     nvl(a.bonus_qty, 0) sales_bonus_qty,
                                     nvl(a.bonus_price_discount, 0) bonus_price_discount,
                                     nvl(a.replace_qty, 0) replace_qty,
                                     nvl(a.return_sales_qty, 0) return_sales_qty,
                                     nvl(a.return_bns_qty, 0) return_bns_qty,
                                     nvl(a.issued_qty, 0) - nvl (a.return_sales_qty, 0) ims_sales_qty,
                                     nvl(a.bonus_qty, 0) - nvl (a.return_bns_qty, 0) ims_bns_qty,
                                     nvl(a.return_value, 0) return_value,
                                     nvl(a.bns_disc_ret, 0) bns_disc_ret,
                                     nvl(a.bonus_price_discount, 0) - nvl (a.bns_disc_ret, 0) discount_val,
                                     nvl(a.invoice_amt, 0) - nvl (return_value, 0) net_ims,
                                     nvl(a.number_of_invoice,0) number_of_invoice,
                                     nvl(b.target_qty,0) target_qty
                                from (
                                        select customer_code,
                                               market_code,
                                               route_code,
                                               retailer_code,
                                               product_code,
                                               sum(nvl(issued_qty,0)) issued_qty,
                                               sum(nvl(bonus_qty,0)) bonus_qty,
                                               sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                               sum(nvl(invoice_amt,0))invoice_amt ,
                                               sum(nvl(replace_qty,0)) replace_qty,                   
                                               sum(nvl(return_sales_qty,0)) return_sales_qty,
                                               sum(nvl(return_value,0)) return_value,
                                               sum(nvl(return_bns_qty,0)) return_bns_qty,
                                               sum(nvl(bns_disc_ret,0)) bns_disc_ret, 
                                               sum(nvl(number_of_invoice,0)) number_of_invoice                  
                                                           
                                          from (    
                                                    select customer_code,
                                                           market_code,
                                                           route_code,
                                                           retailer_code,
                                                           product_code,
                                                           sum (issued_qty) issued_qty,
                                                           sum (bonus_qty) + sum (trade_qty) + sum (spec_bonus_qty) bonus_qty,
                                                           sum (bonus_price_discount) bonus_price_discount,
                                                           sum (total) invoice_amt,
                                                           sum (replace_qty) replace_qty,                   
                                                           0 return_sales_qty,
                                                           0 return_value,
                                                           0 return_bns_qty,
                                                           0 bns_disc_ret,
                                                           0 number_of_invoice                    
                                                           
                                                      from (                    
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     sum (nvl (d.issued_qty, 0)) issued_qty,
                                                                     0 bonus_qty,
                                                                     sum (d.bonus_price_discount) bonus_price_discount,
                                                                     sum (d.net_val) total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                              where m.inv_mst_slno = d.inv_mst_slno
                                                              and   m.inv_type_code = 'INV001'
                                                              and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and  (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and   trunc(m.invoice_date) = trunc(sysdate) 
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     i.product_code,
                                                                     0 issued_qty,
                                                                     sum (nvl (i.bonus_qty, 0)) bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from   spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d, spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com i
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.inv_dtl_slno = i.inv_dtl_slno
                                                              and    d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and   trunc(m.invoice_date) = trunc(sysdate)
                                                              and  (m.customer_code = cCode or cCode='ALL') 
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by i.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                    
                                                            UNION ALL
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     i.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     sum (nvl (i.trade_qty, 0)) trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d, spa_sfbl.invoice_trade@dl_spasfbl.squaregroup.com i
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.inv_dtl_slno = i.inv_dtl_slno
                                                              and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and   trunc(m.invoice_date) = trunc(sysdate) 
                                                              and  (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by i.product_code, m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                              
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     sum (d.spec_bonus_qty) spec_bonus_qty,
                                                                     0 replace_qty
                                                              from   spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_spec_bonus@dl_spasfbl.squaregroup.com d
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and    trunc(m.invoice_date) = trunc(sysdate) 
                                                              and   (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                              
                                                              
                                                              
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     sum (issued_qty) replace_qty
                                                              from   spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and    trunc(m.invoice_date) = trunc(sysdate) 
                                                              and   (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV002'
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code     
                                                  )
                                                  group by product_code, customer_code,market_code,route_code,retailer_code
                                                  

                                                 
                                                 union all
                                                 
                                                 
                                                  select customer_code,
                                                         market_code,
                                                         route_code,
                                                         retailer_code,                      
                                                         product_code,                 
                                                         0 issued_qty,
                                                         0 bonus_qty,
                                                         0 bonus_price_discount,
                                                         0 invoice_amt,
                                                         0 replace_qty,                                  
                                                         sum (nvl (return_qty, 0)) return_sales_qty,
                                                         sum (nvl (return_value, 0)) return_value,
                                                         sum (nvl (ret_bns_qty, 0))+ sum (nvl (ret_trd_qty, 0))+ sum (nvl (spec_bonus_qty, 0)) return_bns_qty,
                                                         sum (nvl (bns_disc_ret, 0)) bns_disc_ret,
                                                         0 number_of_invoice                             
                                                   FROM (  
                                                         
                                                         
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 d.product_code,
                                                                 sum (d.return_qty) return_qty,
                                                                 sum (nvl (d.return_value, 0)) return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                         from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d
                                                         where   m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                         and    d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                         and    trunc(m.invoice_date) = trunc(sysdate)
                                                         and   (m.customer_code = cCode or cCode='ALL')
                                                         and  (d.product_code =  pCode or pCode='ALL')
                                                         and     m.inv_type_code = 'INV001'
                                                         group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,d.product_code
                                                         
                                                         
                                                         
                                                         UNION ALL
                                                            
                                                            
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 d.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 sum (bonus_price_discount) bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                          and    trunc(m.invoice_date) = trunc(sysdate)
                                                          and   (m.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    m.inv_type_code = 'INV001'
                                                          group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,d.product_code
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 b.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 sum (b.bonus_qty) ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d, spa_sfbl.ret_return_bonus@dl_spasfbl.squaregroup.com b
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                                                          and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                          and    trunc(m.invoice_date) = trunc(sysdate)
                                                          and   (m.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    m.inv_type_code = 'INV001'                  
                                                          group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,b.product_code
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 b.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 sum (b.trade_qty) ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d, spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com b
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                                                          and    d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                          and    trunc(m.invoice_date) = trunc(sysdate)
                                                          and   (m.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    m.inv_type_code = 'INV001'                  
                                                          group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,b.product_code
                                                            
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select m.customer_code,
                                                                 m.market_code,
                                                                 m.route_code,
                                                                 m.retailer_code,                      
                                                                 d.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 sum (d.spec_bonus_qty) spec_bonus_qty
                                                          from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_spec_bonus@dl_spasfbl.squaregroup.com d
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                          and    trunc(m.invoice_date) = trunc(sysdate)
                                                          and   (m.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    m.inv_type_code = 'INV001'                               
                                                          group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,d.product_code
                                                            
                                                            
                                                            )
                                                  group by  customer_code,market_code,route_code,retailer_code,product_code
                                            
                                            
                                                 union all
                                                 
                                                 
                                                    select   customer_code,
                                                             market_code,
                                                             route_code,
                                                             retailer_code,
                                                             d.product_code,
                                                             0 issued_qty,
                                                             0 bonus_qty,
                                                             0 bonus_price_discount,
                                                             0 invoice_amt,
                                                             0 replace_qty,                                  
                                                             0 return_sales_qty,
                                                             0 return_value,
                                                             0 return_bns_qty,
                                                             0 bns_disc_ret,                                
                                                            count(invoice_no) number_of_invoice 
                                                    from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and   m.inv_type_code = 'INV001'
                                                    and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                    and    trunc(m.invoice_date) = trunc(sysdate)
                                                    and  (m.customer_code = cCode or cCode='ALL')
                                                    and  (d.product_code =  pCode or pCode='ALL')
                                                    group by customer_code,market_code,route_code,retailer_code,d.product_code                     
                                            
                                            
                                            
                                            )          
                                         group by  customer_code,market_code,route_code,retailer_code,product_code
                                ) a, 
                                (
                                

                                select market_code,
                                       product_code,
                                       target_qty 
                               from mv_target_l3years
                               where   (year||month_code) =to_char (trunc (sysdate, 'MM'), 'YYYYMM')
                               and  (product_code =  pCode or pCode='ALL')
                               
                                
                                
                                )  b, mv_division_customer_relation c,mv_route_info d,mv_retailer_info e,mv_product_info p,mv_product_price f,
                                      mv_base_product_info g, mv_brand_info h, mv_category_info i
                            where a.market_code=b.market_code(+)
                            and   a.product_code=b.product_code(+)
                            and   a.market_code=c.market_code(+)
                            and   a.route_code=d.route_code
                            and   a.retailer_code=e.retailer_code
                            and   a.product_code=p.product_code(+)
                            and   a.product_code=f.product_code(+)

                            and   p.base_product_code=g.base_product_code
                            and   p.brand_code=h.brand_code
                            and   p.product_category=i.category_code  
                            and  (c.zone_code = dCode or dCode='ALL')
                            and  (c.area_code = rCode or rCode='ALL')
                            and  (c.belt_code = aCode or aCode='ALL')
                            and  (c.territory_code = tCode or tCode='ALL')  
                            and  (a.customer_code = cCode or cCode='ALL')                            
                            and  (p.base_product_code =  vbase_product_code or vbase_product_code='ALL')   
                            and  (p.brand_code =  vbrand_code or vbrand_code='ALL')   
                            and  (p.product_category =  vcategory_code or vcategory_code='ALL')                               
                            and  (a.product_code =  pCode or pCode='ALL');   
                            --order by division_name,region_name,area_name,territory_name,customer_name,market_name,route_name,retailer_name,product_name;        
            
         end;     
     
     
     
     end if;

   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_RET_PROD_IMS_DATE_RANGE(pfrom_date varchar2,
                                                                  pto_date varchar2,
                                                                  pdivision_code varchar2, 
                                                                  pregion_code varchar2,
                                                                  parea_code varchar2,
                                                                  pterritory_code varchar2,
                                                                  pcustomer_code varchar2,
                                                                  
                                                                  pbase_product_code varchar2,
                                                                  pbrand_code varchar2,
                                                                  pcategory_code varchar2,                                                                  
                                                                  
                                                                  pproduct_code varchar2,
                                                                  puser_id number
                                                                  )
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   pCode varchar2(100)    :=pproduct_code;
   
   vbase_product_code varchar2(100)    :=pbase_product_code;
   vbrand_code varchar2(100)           :=pbrand_Code;
   vcategory_code varchar2(100)        :=pcategory_code;   
   
   userId   number        :=puser_id;
   vCount   number:=0;   

begin

   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 


     if vCount = 0 then 
     
     
           begin
           
                   open Ims for                                                                            
                            select    /*+ append */ 
                                     c.zone_code division_code,
                                     c.zone_name division_name,
                                     c.area_code region_code,
                                     c.area_name region_name,
                                     c.belt_code area_code,
                                     c.belt_name area_name,
                                     c.territory_code,
                                     c.territory_name,
                                     a.market_code,
                                     c.market_name,         
                                     a.customer_code,
                                     c.customer_name,
                                     c.db_location, 
                                     a.route_code,
                                     d.route_name,
                                     a.retailer_code,
                                     e.retailer_name,
                                     p.base_product_code,
                                     g.base_product_name, 
                                     p.brand_code,
                                     h.brand_name,
                                     p.product_category product_category_code,
                                     i.category_name product_category_name,                                             
                                     a.product_code,
                                     p.product_name,
                                     p.pack_size,
                                     f.unit_tp product_price,
                                     nvl(b.target_qty,0) target_qty,        
                                     nvl(a.invoice_amt, 0) invoice_amt,
                                     nvl(a.issued_qty, 0) sales_qty,
                                     nvl(a.bonus_qty, 0) sales_bonus_qty,
                                     nvl(a.bonus_price_discount, 0) bonus_price_discount,
                                     nvl(a.replace_qty, 0) replace_qty,
                                     nvl(a.return_sales_qty, 0) return_sales_qty,
                                     nvl(a.return_bns_qty, 0) return_bns_qty,
                                     nvl(a.issued_qty, 0) - nvl (a.return_sales_qty, 0) ims_sales_qty,
                                     nvl(a.bonus_qty, 0) - nvl (a.return_bns_qty, 0) ims_bns_qty,
                                     nvl(a.return_value, 0) return_value,
                                     nvl(a.bns_disc_ret, 0) bns_disc_ret,
                                     nvl(a.bonus_price_discount, 0) - nvl (a.bns_disc_ret, 0) discount_val,
                                     nvl(a.invoice_amt, 0) - nvl (return_value, 0) net_ims,
                                     nvl(a.number_of_invoice,0) number_of_invoice
                                from (
                                        select customer_code,
                                               market_code,
                                               route_code,
                                               retailer_code,
                                               product_code,
                                               sum(nvl(issued_qty,0)) issued_qty,
                                               sum(nvl(bonus_qty,0)) bonus_qty,
                                               sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                               sum(nvl(invoice_amt,0))invoice_amt ,
                                               sum(nvl(replace_qty,0)) replace_qty,                   
                                               sum(nvl(return_sales_qty,0)) return_sales_qty,
                                               sum(nvl(return_value,0)) return_value,
                                               sum(nvl(return_bns_qty,0)) return_bns_qty,
                                               sum(nvl(bns_disc_ret,0)) bns_disc_ret, 
                                               sum(nvl(number_of_invoice,0)) number_of_invoice                  
                                                           
                                          from (    
                                                    select customer_code,
                                                           market_code,
                                                           route_code,
                                                           retailer_code,
                                                           product_code,
                                                           sum (issued_qty) issued_qty,
                                                           sum (bonus_qty) + sum (trade_qty) + sum (spec_bonus_qty) bonus_qty,
                                                           sum (bonus_price_discount) bonus_price_discount,
                                                           sum (invoice_amt) invoice_amt,
                                                           sum (replace_qty) replace_qty,                   
                                                           0 return_sales_qty,
                                                           0 return_value,
                                                           0 return_bns_qty,
                                                           0 bns_disc_ret,
                                                           0 number_of_invoice                    
                                                           
                                                      from (                    
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     sum (nvl (d.issued_qty, 0)) issued_qty,
                                                                     0 bonus_qty,
                                                                     sum (d.bonus_price_discount) bonus_price_discount,
                                                                     sum (nvl(d.total_val,0) -nvl(bonus_price_discount,0) ) invoice_amt,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from  vw_invoice_mst m, vw_invoice_dtl d
                                                              where m.inv_mst_slno = d.inv_mst_slno
                                                              and   m.inv_type_code = 'INV001'
                                                              and  (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and   trunc(m.invoice_date) between fDate and tDate
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     i.product_code,
                                                                     0 issued_qty,
                                                                     sum (nvl (i.bonus_qty, 0)) bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from   vw_invoice_mst m, vw_invoice_dtl d, vw_invoice_bonus i
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.inv_dtl_slno = i.inv_dtl_slno
                                                              and   trunc(m.invoice_date) between fDate and tDate
                                                              and  (m.customer_code = cCode or cCode='ALL') 
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by i.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                    
                                                            UNION ALL
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     i.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     sum (nvl (i.trade_qty, 0)) trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from  vw_invoice_mst m, vw_invoice_dtl d, vw_invoice_trade i
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.inv_dtl_slno = i.inv_dtl_slno
                                                              and   trunc(m.invoice_date) between fDate and tDate
                                                              and  (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by i.product_code, m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                              
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     sum (d.spec_bonus_qty) spec_bonus_qty,
                                                                     0 replace_qty
                                                              from   vw_invoice_mst m, vw_invoice_spec_bonus d
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    trunc(m.invoice_date) between fDate and tDate
                                                              and   (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                              
                                                              
                                                              
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     sum (issued_qty) replace_qty
                                                              from   vw_invoice_mst m, vw_invoice_dtl d
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    trunc(m.invoice_date) between fDate and tDate
                                                              and   (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV002'
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code     
                                                  )
                                                  group by product_code, customer_code,market_code,route_code,retailer_code
                                                  

                                                 
                                                 union all
                                                 
                                                 
                                                  select customer_code,
                                                         market_code,
                                                         route_code,
                                                         retailer_code,                      
                                                         product_code,                 
                                                         0 issued_qty,
                                                         0 bonus_qty,
                                                         0 bonus_price_discount,
                                                         0 invoice_amt,
                                                         0 replace_qty,                                  
                                                         sum (nvl (return_qty, 0)) return_sales_qty,
                                                         sum (nvl (return_value, 0)) return_value,
                                                         sum (nvl (ret_bns_qty, 0))+ sum (nvl (ret_trd_qty, 0))+ sum (nvl (spec_bonus_qty, 0)) return_bns_qty,
                                                         sum (nvl (bns_disc_ret, 0)) bns_disc_ret,
                                                         0 number_of_invoice                             
                                                   FROM (  
                                                         
                                                         
                                                          select i.customer_code,
                                                                 i.market_code,
                                                                 i.route_code,
                                                                 i.retailer_code,                      
                                                                 d.product_code,
                                                                 sum (d.return_qty) return_qty,
                                                                 sum (nvl (d.return_value, 0)) return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 sum (bonus_price_discount) bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                         from    vw_ret_return_mst m, vw_ret_return_dtl d,vw_invoice_mst i
                                                         where   m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                         and     m.invoice_no=i.invoice_no
                                                         and    trunc(i.invoice_date) between fDate and tDate
                                                         and   (i.customer_code = cCode or cCode='ALL')
                                                         and  (d.product_code =  pCode or pCode='ALL')
                                                         and     i.inv_type_code = 'INV001'
                                                         group by  i.customer_code,i.market_code,i.route_code,i.retailer_code,d.product_code
                                                                                                     
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select i.customer_code,
                                                                 i.market_code,
                                                                 i.route_code,
                                                                 i.retailer_code,                      
                                                                 b.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 sum (b.bonus_qty) ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   vw_ret_return_mst m, vw_ret_return_dtl d, vw_ret_return_bonus b,vw_invoice_mst i
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                                                          and     m.invoice_no=i.invoice_no
                                                          and    trunc(i.invoice_date) between fDate and tDate
                                                          and   (i.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    i.inv_type_code = 'INV001'                  
                                                          group by  i.customer_code,i.market_code,i.route_code,i.retailer_code,b.product_code
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select i.customer_code,
                                                                 i.market_code,
                                                                 i.route_code,
                                                                 i.retailer_code,                      
                                                                 b.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 sum (b.trade_qty) ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   vw_ret_return_mst m, vw_ret_return_dtl d, vw_ret_return_trade b,vw_invoice_mst i
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                                                          and     m.invoice_no=i.invoice_no
                                                          and    trunc(i.invoice_date) between fDate and tDate
                                                          and   (i.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    i.inv_type_code = 'INV001'                  
                                                          group by  i.customer_code,i.market_code,i.route_code,i.retailer_code,b.product_code
                                                            
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select i.customer_code,
                                                                 i.market_code,
                                                                 i.route_code,
                                                                 i.retailer_code,                      
                                                                 d.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 sum (d.spec_bonus_qty) spec_bonus_qty
                                                          from   vw_ret_return_mst m, vw_ret_return_spec_bonus d,vw_invoice_mst i
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and     m.invoice_no=i.invoice_no
                                                          and    trunc(i.invoice_date) between fDate and tDate
                                                          and   (i.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    i.inv_type_code = 'INV001'                               
                                                          group by  i.customer_code,i.market_code,i.route_code,i.retailer_code,d.product_code
                                                            
                                                            
                                                            )
                                                  group by  customer_code,market_code,route_code,retailer_code,product_code
                                            
                                            
                                                 union all
                                                 
                                                 
                                                    select   customer_code,
                                                             market_code,
                                                             route_code,
                                                             retailer_code,
                                                             d.product_code,
                                                             0 issued_qty,
                                                             0 bonus_qty,
                                                             0 bonus_price_discount,
                                                             0 invoice_amt,
                                                             0 replace_qty,                                  
                                                             0 return_sales_qty,
                                                             0 return_value,
                                                             0 return_bns_qty,
                                                             0 bns_disc_ret,                                
                                                            count(invoice_no) number_of_invoice 
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and    m.inv_type_code = 'INV001'
                                                    and    trunc(m.invoice_date) between fDate and tDate
                                                    and  (m.customer_code = cCode or cCode='ALL')
                                                    and  (d.product_code =  pCode or pCode='ALL')
                                                    group by customer_code,market_code,route_code,retailer_code,d.product_code                     
                                            
                                            )          
                                         group by  customer_code,market_code,route_code,retailer_code,product_code
                            
                              ) a, 
                                (
                                

                                select market_code,
                                       product_code,
                                       sum(nvl(target_qty,0))target_qty  
                               from mv_target_l3years
                               where   (year||month_code)  between to_char (trunc (to_date(fDate,'dd/mm/rrrr'), 'MM'), 'YYYYMM') and to_char (trunc (to_date(tDate,'dd/mm/rrrr'), 'MM'), 'YYYYMM')
                               and  (product_code =  pCode or pCode='ALL')
                               group by market_code,product_code
                                
                                
                                )  b, mv_division_customer_relation c,mv_route_info d,mv_retailer_info e,mv_product_info p,
                                      mv_product_price f, mv_base_product_info g, mv_brand_info h, mv_category_info i
                            where a.route_code=d.route_code(+) 
                            and   a.retailer_code=e.retailer_code (+)
                            and   a.market_code=c.market_code(+)                                                        
                            and   a.market_code=b.market_code(+)
                            and   a.product_code=b.product_code(+)
                            and   a.product_code=p.product_code(+)
                            
                            and   a.product_code=f.product_code(+)
                            and   p.base_product_code=g.base_product_code
                            and   p.brand_code=h.brand_code
                            and   p.product_category=i.category_code                                                        
                            and  (c.zone_code = dCode or dCode='ALL')
                            and  (c.area_code = rCode or rCode='ALL')
                            and  (c.belt_code = aCode or aCode='ALL')
                            and  (c.territory_code = tCode or tCode='ALL')  
                            and  (a.customer_code = cCode or cCode='ALL')                             
                            and  (p.base_product_code =  vbase_product_code or vbase_product_code='ALL')   
                            and  (p.brand_code =  vbrand_code or vbrand_code='ALL')   
                            and  (p.product_category =  vcategory_code or vcategory_code='ALL')                                                          
                            and  (a.product_code =  pCode or pCode='ALL');  
                            --order by division_name,region_name,area_name,territory_name,customer_name,market_name,route_name,retailer_name,product_name;  
           
           end;
           
     
     
     elsif vCount > 0 then
          
          begin
          
                   open Ims for                                                                            
                            select    /*+ append */ 
                                     c.zone_code division_code,
                                     c.zone_name division_name,
                                     c.area_code region_code,
                                     c.area_name region_name,
                                     c.belt_code area_code,
                                     c.belt_name area_name,
                                     c.territory_code,
                                     c.territory_name,
                                     a.market_code,
                                     c.market_name,         
                                     a.customer_code,
                                     c.customer_name,
                                     c.db_location, 
                                     a.route_code,
                                     d.route_name,
                                     a.retailer_code,
                                     e.retailer_name,
                                     p.base_product_code,
                                     g.base_product_name, 
                                     p.brand_code,
                                     h.brand_name,
                                     p.product_category product_category_code,
                                     i.category_name product_category_name,                                             
                                     a.product_code,
                                     p.product_name,
                                     p.pack_size,
                                     f.unit_tp product_price,
                                     nvl(b.target_qty,0) target_qty,        
                                     nvl(a.invoice_amt, 0) invoice_amt,
                                     nvl(a.issued_qty, 0) sales_qty,
                                     nvl(a.bonus_qty, 0) sales_bonus_qty,
                                     nvl(a.bonus_price_discount, 0) bonus_price_discount,
                                     nvl(a.replace_qty, 0) replace_qty,
                                     nvl(a.return_sales_qty, 0) return_sales_qty,
                                     nvl(a.return_bns_qty, 0) return_bns_qty,
                                     nvl(a.issued_qty, 0) - nvl (a.return_sales_qty, 0) ims_sales_qty,
                                     nvl(a.bonus_qty, 0) - nvl (a.return_bns_qty, 0) ims_bns_qty,
                                     nvl(a.return_value, 0) return_value,
                                     nvl(a.bns_disc_ret, 0) bns_disc_ret,
                                     nvl(a.bonus_price_discount, 0) - nvl (a.bns_disc_ret, 0) discount_val,
                                     nvl(a.invoice_amt, 0) - nvl (return_value, 0) net_ims,
                                     nvl(a.number_of_invoice,0) number_of_invoice
                                from (
                                        select customer_code,
                                               market_code,
                                               route_code,
                                               retailer_code,
                                               product_code,
                                               sum(nvl(issued_qty,0)) issued_qty,
                                               sum(nvl(bonus_qty,0)) bonus_qty,
                                               sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                               sum(nvl(invoice_amt,0))invoice_amt ,
                                               sum(nvl(replace_qty,0)) replace_qty,                   
                                               sum(nvl(return_sales_qty,0)) return_sales_qty,
                                               sum(nvl(return_value,0)) return_value,
                                               sum(nvl(return_bns_qty,0)) return_bns_qty,
                                               sum(nvl(bns_disc_ret,0)) bns_disc_ret, 
                                               sum(nvl(number_of_invoice,0)) number_of_invoice                  
                                                           
                                          from (    
                                                    select customer_code,
                                                           market_code,
                                                           route_code,
                                                           retailer_code,
                                                           product_code,
                                                           sum (issued_qty) issued_qty,
                                                           sum (bonus_qty) + sum (trade_qty) + sum (spec_bonus_qty) bonus_qty,
                                                           sum (bonus_price_discount) bonus_price_discount,
                                                           sum (invoice_amt) invoice_amt,
                                                           sum (replace_qty) replace_qty,                   
                                                           0 return_sales_qty,
                                                           0 return_value,
                                                           0 return_bns_qty,
                                                           0 bns_disc_ret,
                                                           0 number_of_invoice                    
                                                           
                                                      from (                    
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     sum (nvl (d.issued_qty, 0)) issued_qty,
                                                                     0 bonus_qty,
                                                                     sum (d.bonus_price_discount) bonus_price_discount,
                                                                     sum (nvl(d.total_val,0) -nvl(bonus_price_discount,0) ) invoice_amt,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from  vw_invoice_mst m, vw_invoice_dtl d
                                                              where m.inv_mst_slno = d.inv_mst_slno
                                                              and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and   m.inv_type_code = 'INV001'
                                                              and  (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and   trunc(m.invoice_date) between fDate and tDate
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     i.product_code,
                                                                     0 issued_qty,
                                                                     sum (nvl (i.bonus_qty, 0)) bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from   vw_invoice_mst m, vw_invoice_dtl d, vw_invoice_bonus i
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.inv_dtl_slno = i.inv_dtl_slno
                                                              and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and   trunc(m.invoice_date) between fDate and tDate
                                                              and  (m.customer_code = cCode or cCode='ALL') 
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by i.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                    
                                                            UNION ALL
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     i.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     sum (nvl (i.trade_qty, 0)) trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     0 replace_qty
                                                              from  vw_invoice_mst m, vw_invoice_dtl d, vw_invoice_trade i
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.inv_dtl_slno = i.inv_dtl_slno
                                                              and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and   trunc(m.invoice_date) between fDate and tDate
                                                              and  (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by i.product_code, m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                              
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     sum (d.spec_bonus_qty) spec_bonus_qty,
                                                                     0 replace_qty
                                                              from   vw_invoice_mst m, vw_invoice_spec_bonus d
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and    trunc(m.invoice_date) between fDate and tDate
                                                              and   (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV001'
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                                              
                                                              
                                                              
                                                              
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                              select m.customer_code,
                                                                     m.market_code,
                                                                     m.route_code,
                                                                     m.retailer_code,
                                                                     d.product_code,
                                                                     0 issued_qty,
                                                                     0 bonus_qty,
                                                                     0 bonus_price_discount,
                                                                     0 total,
                                                                     0 trade_qty,
                                                                     0 spec_bonus_qty,
                                                                     sum (issued_qty) replace_qty
                                                              from   vw_invoice_mst m, vw_invoice_dtl d
                                                              where  m.inv_mst_slno = d.inv_mst_slno
                                                              and    d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                              and    trunc(m.invoice_date) between fDate and tDate
                                                              and   (m.customer_code = cCode or cCode='ALL')
                                                              and  (d.product_code =  pCode or pCode='ALL')
                                                              and    m.inv_type_code = 'INV002'
                                                              group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code     
                                                  )
                                                  group by product_code, customer_code,market_code,route_code,retailer_code
                                                  

                                                 
                                                 union all
                                                 
                                                 
                                                  select customer_code,
                                                         market_code,
                                                         route_code,
                                                         retailer_code,                      
                                                         product_code,                 
                                                         0 issued_qty,
                                                         0 bonus_qty,
                                                         0 bonus_price_discount,
                                                         0 invoice_amt,
                                                         0 replace_qty,                                  
                                                         sum (nvl (return_qty, 0)) return_sales_qty,
                                                         sum (nvl (return_value, 0)) return_value,
                                                         sum (nvl (ret_bns_qty, 0))+ sum (nvl (ret_trd_qty, 0))+ sum (nvl (spec_bonus_qty, 0)) return_bns_qty,
                                                         sum (nvl (bns_disc_ret, 0)) bns_disc_ret,
                                                         0 number_of_invoice                             
                                                   FROM (  
                                                         
                                                         
                                                          select i.customer_code,
                                                                 i.market_code,
                                                                 i.route_code,
                                                                 i.retailer_code,                      
                                                                 d.product_code,
                                                                 sum (d.return_qty) return_qty,
                                                                 sum (nvl (d.return_value, 0)) return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 sum (bonus_price_discount) bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                         from    vw_ret_return_mst m, vw_ret_return_dtl d,vw_invoice_mst i
                                                         where   m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                         and     d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                         and     m.invoice_no=i.invoice_no
                                                         and    trunc(i.invoice_date) between fDate and tDate
                                                         and   (i.customer_code = cCode or cCode='ALL')
                                                         and  (d.product_code =  pCode or pCode='ALL')
                                                         and     i.inv_type_code = 'INV001'
                                                         group by  i.customer_code,i.market_code,i.route_code,i.retailer_code,d.product_code
                                                                                                     
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select i.customer_code,
                                                                 i.market_code,
                                                                 i.route_code,
                                                                 i.retailer_code,                      
                                                                 b.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 sum (b.bonus_qty) ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   vw_ret_return_mst m, vw_ret_return_dtl d, vw_ret_return_bonus b,vw_invoice_mst i
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                                                          and    d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                          and     m.invoice_no=i.invoice_no
                                                          and    trunc(i.invoice_date) between fDate and tDate
                                                          and   (i.customer_code = cCode or cCode='ALL')
                                                          and  (d.product_code =  pCode or pCode='ALL')
                                                          and    i.inv_type_code = 'INV001'                  
                                                          group by  i.customer_code,i.market_code,i.route_code,i.retailer_code,b.product_code
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select i.customer_code,
                                                                 i.market_code,
                                                                 i.route_code,
                                                                 i.retailer_code,                      
                                                                 b.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 sum (b.trade_qty) ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 0 spec_bonus_qty
                                                          from   vw_ret_return_mst m, vw_ret_return_dtl d, vw_ret_return_trade b,vw_invoice_mst i
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                                                          and    d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                          and   (d.product_code =  pCode or pCode='ALL')
                                                          and     m.invoice_no=i.invoice_no
                                                          and    trunc(i.invoice_date) between fDate and tDate
                                                          and   (i.customer_code = cCode or cCode='ALL')
                                                          and    i.inv_type_code = 'INV001'                  
                                                          group by  i.customer_code,i.market_code,i.route_code,i.retailer_code,b.product_code
                                                            
                                                            
                                                            
                                                            
                                                            UNION ALL
                                                            
                                                            
                                                            
                                                          select i.customer_code,
                                                                 i.market_code,
                                                                 i.route_code,
                                                                 i.retailer_code,                      
                                                                 d.product_code,
                                                                 0 return_qty,
                                                                 0 return_value,
                                                                 0 ret_bns_qty,
                                                                 0 ret_trd_qty,
                                                                 0 bns_disc_ret,
                                                                 sum (d.spec_bonus_qty) spec_bonus_qty
                                                          from   vw_ret_return_mst m, vw_ret_return_spec_bonus d,vw_invoice_mst i
                                                          where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                          and    d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                          and   (d.product_code =  pCode or pCode='ALL')
                                                          and     m.invoice_no=i.invoice_no
                                                          and    trunc(i.invoice_date) between fDate and tDate
                                                          and   (i.customer_code = cCode or cCode='ALL')
                                                          and    i.inv_type_code = 'INV001'                               
                                                          group by  i.customer_code,i.market_code,i.route_code,i.retailer_code,d.product_code
                                                            
                                                            
                                                            )
                                                  group by  customer_code,market_code,route_code,retailer_code,product_code
                                            
                                            
                                                 union all
                                                 
                                                 
                                                    select   customer_code,
                                                             market_code,
                                                             route_code,
                                                             retailer_code,
                                                             d.product_code,
                                                             0 issued_qty,
                                                             0 bonus_qty,
                                                             0 bonus_price_discount,
                                                             0 invoice_amt,
                                                             0 replace_qty,                                  
                                                             0 return_sales_qty,
                                                             0 return_value,
                                                             0 return_bns_qty,
                                                             0 bns_disc_ret,                                
                                                            count(invoice_no) number_of_invoice 
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                    and  (d.product_code =  pCode or pCode='ALL')
                                                    and    m.inv_type_code = 'INV001'
                                                    and    trunc(m.invoice_date) between fDate and tDate
                                                    and  (m.customer_code = cCode or cCode='ALL')
                                                    group by customer_code,market_code,route_code,retailer_code,d.product_code                     
                                            
                                            )          
                                         group by  customer_code,market_code,route_code,retailer_code,product_code
                            
                              ) a, 
                                (
                                

                                select market_code,
                                       product_code,
                                       target_qty 
                               from mv_target_l3years
                               where   (year||month_code)  between to_char (trunc (to_date(fDate,'dd/mm/rrrr'), 'MM'), 'YYYYMM') and to_char (trunc (to_date(tDate,'dd/mm/rrrr'), 'MM'), 'YYYYMM')
                               and    product_code in (select product_code from user_product_dtl where user_id=userId)
                               and  (product_code =  pCode or pCode='ALL')
                                
                                
                                )  b, mv_division_customer_relation c,mv_route_info d,mv_retailer_info e,mv_product_info p,
                                      mv_product_price f, mv_base_product_info g, mv_brand_info h, mv_category_info i
                            where a.route_code=d.route_code(+) 
                            and   a.retailer_code=e.retailer_code (+)
                            and   a.market_code=c.market_code(+)                                                        
                            and   a.market_code=b.market_code(+)
                            and   a.product_code=b.product_code(+)
                            and   a.product_code=p.product_code(+)                            
                            and   a.product_code=f.product_code(+)
                            and   p.base_product_code=g.base_product_code
                            and   p.brand_code=h.brand_code
                            and   p.product_category=i.category_code                                                        
                            and  (c.zone_code = dCode or dCode='ALL')
                            and  (c.area_code = rCode or rCode='ALL')
                            and  (c.belt_code = aCode or aCode='ALL')
                            and  (c.territory_code = tCode or tCode='ALL')  
                            and  (a.customer_code = cCode or cCode='ALL')                             
                            and  (p.base_product_code =  vbase_product_code or vbase_product_code='ALL')   
                            and  (p.brand_code =  vbrand_code or vbrand_code='ALL')   
                            and  (p.product_category =  vcategory_code or vcategory_code='ALL')                                                          
                            and  (a.product_code =  pCode or pCode='ALL');  
                            --order by division_name,region_name,area_name,territory_name,customer_name,market_name,route_name,retailer_name,product_name; 
          
          end;
          
      end if;         


    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function  FN_DIST_PROD_IMS_DATE_RANGE   (pfrom_date varchar2,
                                                           pto_date varchar2,
                                                           pdivision_code varchar2, 
                                                           pregion_code varchar2,
                                                           parea_code varchar2,
                                                           pterritory_code varchar2,
                                                           pcustomer_code varchar2,
                                                           puser_id number
                                                           )
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
      userId   number        :=puser_id;
   vCount   number:=0;   

begin
   
   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId;  
   
   
   
   if vCount = 0 then 
     
             
         begin
         
               open Ims for                                                                            
                        select /*+ append */  
                               zone_code division_code, 
                               zone_name division_name, 
                               area_code region_code, 
                               area_name region_name, 
                               belt_code area_code, 
                               belt_name area_name, 
                               territory_code, 
                               territory_name, 
                               a.customer_code,
                               d.customer_name, 
                               c.db_location,
                               a.product_code,
                               e.product_name,
                               e.pack_size,
                               e.unit_tp product_price,
                               nvl(issued_qty,0) invoice_qty, 
                               nvl(bonus_qty,0) inv_bonus_qty,
                               nvl(bonus_price_discount,0) bonus_price_discount,
                               (nvl(issued_qty,0)-nvl(return_sales_qty,0)) ims_sales_qty,
                               (nvl(bonus_qty,0)-nvl(return_bns_qty,0)) ims_bns_qty,
                               invoice_amt, 
                               nvl(return_sales_qty,0) return_sales_qty , 
                               nvl(return_bns_qty,0) return_bns_qty,
                               nvl(bns_disc_ret,0) bns_disc_ret,
                               nvl(return_value,0) return_value,
                              (nvl(invoice_amt,0) - nvl(return_value,0) + nvl(bns_disc_ret,0)) ims_sales_val  ,
                               ( ( ( nvl(bonus_qty,0)-nvl(return_bns_qty,0) )*nvl(( select unit_tp from vw_product_price where product_code=a.product_code),0)) + nvl(bonus_price_discount,0) )  ims_bns_val,
                             
                               nvl(invoice_amt,0) -   nvl(return_value,0)  net_ims
                        from
                          (
                                          
                                          
                           select   customer_code,
                                    product_code,
                                    sum(issued_qty) issued_qty,
                                    sum(bonus_qty) bonus_qty,
                                    sum(bonus_price_discount) bonus_price_discount,
                                    sum(invoice_amt) invoice_amt
                            from
                               (
                                               
                                               
                                select m.customer_code,
                                       d.product_code,
                                       sum(nvl(d.issued_qty,0)) issued_qty,
                                       0 bonus_qty,
                                       sum(bonus_price_discount) bonus_price_discount,
                                       sum(nvl(d.total_val,0)) -sum(nvl(bonus_price_discount,0))  invoice_amt
                                from  vw_invoice_mst m,  vw_invoice_dtl  d
                                where m.inv_mst_slno=d.inv_mst_slno  
                                and   m.inv_type_code='INV001'
                                and  (m.customer_code = cCode or cCode='ALL')
                                and   trunc (m.invoice_date) between fDate and tDate
                                group by d.product_code, m.customer_code
                                                
                                union all

                                select m.customer_code,
                                       i.product_code,
                                       0 issued_qty,
                                       sum(nvl(i.bonus_qty,0)) bonus_qty,
                                       0 bonus_price_discount,
                                       0 total
                                from  vw_invoice_mst m,  vw_invoice_dtl  d, vw_invoice_bonus i
                                where m.inv_mst_slno=d.inv_mst_slno
                                and   d.inv_dtl_slno=i.inv_dtl_slno  
                                and   m.inv_type_code='INV001'
                                and  (m.customer_code = cCode or cCode='ALL')
                                and   trunc (m.invoice_date) between fDate and tDate                
                                group by i.product_code,m.customer_code

                            )   
                            group by product_code,customer_code
                                        
                                        
                        ) a,

                        (

                             select customer_code,
                                    product_code,
                                    sum(nvl(return_qty,0))  return_sales_qty,
                                    sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bns_qty,
                                    sum(nvl(return_value,0)) return_value,
                                    sum(nvl(bns_disc_ret,0)) bns_disc_ret
                                            
                          from 
                          (
                                          
                          select     i.customer_code,
                                     d.product_code,
                                     sum (d.return_qty) return_qty,
                                     0 ret_bns_qty,
                                     0 ret_trd_qty,
                                      sum(nvl(d.return_value,0)) return_value,
                                     sum(bonus_price_discount) bns_disc_ret
                            from     vw_ret_return_mst m, vw_ret_return_dtl d, vw_invoice_mst i
                            where    m.ret_recv_mst_slno = d.ret_recv_mst_slno
                            and      m.invoice_no=i.invoice_no
                            and      i.inv_type_code='INV001' 
                            and     (i.customer_code = cCode or cCode='ALL')   
                            and      trunc (i.invoice_date) between fDate and tDate                  
                            group by   i.customer_code,d.product_code

                                            
                            union all
                            select   i.customer_code,
                                     b.product_code,
                                     0 return_qty,
                                     sum (bonus_qty) ret_bns_qty,
                                     0 ret_trd_qty,
                                     0 return_value,
                                     0 bns_disc_ret
                            from    vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_bonus b, vw_invoice_mst i
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and      m.invoice_no=i.invoice_no
                             and     i.inv_type_code='INV001' 
                             and    (i.customer_code = cCode or cCode='ALL')
                             and     trunc (i.invoice_date)  between fDate and tDate  
                            group by  i.customer_code, b.product_code
                                            
                            union all
                            select  i.customer_code,
                                    b.product_code,
                                    0 return_qty,
                                    0 ret_bns_qty,
                                    sum (trade_qty) ret_trd_qty,
                                    0 return_value,
                                    0 bns_disc_ret
                            from    vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_trade b, vw_invoice_mst i
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and      m.invoice_no=i.invoice_no                    
                            --and     m.inv_type_code='INV001'
                            and    (i.customer_code = cCode or cCode='ALL')
                            and     trunc (i.invoice_date) between fDate and tDate  
                            group by   i.customer_code, b.product_code
                            )
                           group by   customer_code, product_code
                        ) b,
                        (
                         select distinct zone_code, zone_name, area_code, area_name, belt_code, belt_name, territory_code, territory_name, customer_code, customer_name, db_location 
                         from mv_division_customer_relation
                        ) c,mv_customer_info d, vw_product_price e
                        where a.customer_code=b.customer_code(+)
                        and   a.product_code=b.product_code(+)
                        and   a.customer_code=c.customer_code(+)
                        and   a.customer_code=d.customer_code(+)
                        and   a.product_code=e.product_code(+)                                                
                        and  (c.zone_code = dCode or dCode='ALL')
                        and  (c.area_code = rCode or rCode='ALL')
                        and  (c.belt_code = aCode or aCode='ALL')
                        and  (c.territory_code = tCode or tCode='ALL')  
                        and  (a.customer_code = cCode or cCode='ALL');   
                        --order by division_name,region_name,area_name,territory_name,customer_name,product_name; 
         
         end;
         
    elsif vCount > 0 then 
     
     
         begin
                     
               open Ims for                                                                            
                        select /*+ append */  
                               zone_code division_code, 
                               zone_name division_name, 
                               area_code region_code, 
                               area_name region_name, 
                               belt_code area_code, 
                               belt_name area_name, 
                               territory_code, 
                               territory_name, 
                               a.customer_code,
                               d.customer_name, 
                               c.db_location,
                               a.product_code,
                               e.product_name,
                               e.pack_size,
                               e.unit_tp product_price,
                               nvl(issued_qty,0) invoice_qty, 
                               nvl(bonus_qty,0) inv_bonus_qty,
                               nvl(bonus_price_discount,0) bonus_price_discount,
                               (nvl(issued_qty,0)-nvl(return_sales_qty,0)) ims_sales_qty,
                               (nvl(bonus_qty,0)-nvl(return_bns_qty,0)) ims_bns_qty,
                               invoice_amt, 
                               nvl(return_sales_qty,0) return_sales_qty , 
                               nvl(return_bns_qty,0) return_bns_qty,
                               nvl(bns_disc_ret,0) bns_disc_ret,
                               nvl(return_value,0) return_value,
                              (nvl(invoice_amt,0) - nvl(return_value,0) + nvl(bns_disc_ret,0)) ims_sales_val  ,
                               ( ( ( nvl(bonus_qty,0)-nvl(return_bns_qty,0) )*nvl(( select unit_tp from vw_product_price where product_code=a.product_code),0)) + nvl(bonus_price_discount,0) )  ims_bns_val,
                              (nvl(invoice_amt,0) -  ( nvl(return_value,0)) ) net_ims
                        from
                          (
                                          
                                          
                           select   customer_code,
                                    product_code,
                                    sum(issued_qty) issued_qty,
                                    sum(bonus_qty) bonus_qty,
                                    sum(bonus_price_discount) bonus_price_discount,
                                    sum(total) invoice_amt
                            from
                               (
                                               
                                               
                                select m.customer_code,
                                       d.product_code,
                                       sum(nvl(d.issued_qty,0)) issued_qty,
                                       0 bonus_qty,
                                       sum(bonus_price_discount) bonus_price_discount,
                                       sum(NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0)) total
                                from  vw_invoice_mst m,  vw_invoice_dtl  d
                                where m.inv_mst_slno=d.inv_mst_slno 
                                and   d.product_code in (select product_code from user_product_dtl where user_id=userId)  
                                and   m.inv_type_code='INV001'
                                and  (m.customer_code = cCode or cCode='ALL')
                                and   trunc (m.invoice_date) between fDate and tDate
                                group by d.product_code, m.customer_code
                                                
                                union all

                                select m.customer_code,
                                       i.product_code,
                                       0 issued_qty,
                                       sum(nvl(i.bonus_qty,0)) bonus_qty,
                                       0 bonus_price_discount,
                                       0 total
                                from  vw_invoice_mst m,  vw_invoice_dtl  d, vw_invoice_bonus i
                                where m.inv_mst_slno=d.inv_mst_slno
                                and   d.inv_dtl_slno=i.inv_dtl_slno  
                                and   d.product_code in (select product_code from user_product_dtl where user_id=userId) 
                                and   m.inv_type_code='INV001'
                                and  (m.customer_code = cCode or cCode='ALL')
                                and   trunc (m.invoice_date) between fDate and tDate                
                                group by i.product_code,m.customer_code

                            )   
                            group by product_code,customer_code
                                        
                                        
                        ) a,

                        (

                             select customer_code,
                                    product_code,
                                    sum(nvl(return_qty,0))  return_sales_qty,
                                    sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bns_qty,
                                    sum(nvl(return_value,0)) return_value,
                                    sum(nvl(bns_disc_ret,0)) bns_disc_ret
                                            
                          from 
                          (
                                          
                          select     i.customer_code,
                                     d.product_code,
                                     sum (d.return_qty) return_qty,
                                     0 ret_bns_qty,
                                     0 ret_trd_qty,
                                      sum(nvl(d.return_value,0))return_value,
                                     sum(bonus_price_discount) bns_disc_ret
                            from     vw_ret_return_mst m, vw_ret_return_dtl d, vw_invoice_mst i
                            where    m.ret_recv_mst_slno = d.ret_recv_mst_slno
                            and      d.product_code in (select product_code from user_product_dtl where user_id=userId) 
                            and      m.invoice_no=i.invoice_no
                            and      i.inv_type_code='INV001' 
                            and     (i.customer_code = cCode or cCode='ALL')   
                            and      trunc (i.invoice_date) between fDate and tDate                  
                            group by   i.customer_code,d.product_code

                                            
                            union all
                            select   i.customer_code,
                                     b.product_code,
                                     0 return_qty,
                                     sum (bonus_qty) ret_bns_qty,
                                     0 ret_trd_qty,
                                     0 return_value,
                                     0 bns_disc_ret
                            from    vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_bonus b, vw_invoice_mst i
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and     d.product_code in (select product_code from user_product_dtl where user_id=userId) 
                            and      m.invoice_no=i.invoice_no
                             and     i.inv_type_code='INV001' 
                             and    (i.customer_code = cCode or cCode='ALL')
                             and     trunc (i.invoice_date)  between fDate and tDate  
                            group by  i.customer_code, b.product_code
                                            
                            union all
                            select  i.customer_code,
                                    b.product_code,
                                    0 return_qty,
                                    0 ret_bns_qty,
                                    sum (trade_qty) ret_trd_qty,
                                    0 return_value,
                                    0 bns_disc_ret
                            from    vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_trade b, vw_invoice_mst i
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and     d.product_code in (select product_code from user_product_dtl where user_id=userId)                             
                            and      m.invoice_no=i.invoice_no                    
                            and     m.inv_type_code='INV001'
                            and    (i.customer_code = cCode or cCode='ALL')
                            and     trunc (i.invoice_date) between fDate and tDate  
                            group by   i.customer_code, b.product_code
                            )
                           group by   customer_code, product_code
                        ) b,
                        (
                         select distinct zone_code, zone_name, area_code, area_name, belt_code, belt_name, territory_code, territory_name, customer_code, customer_name, db_location 
                         from mv_division_customer_relation
                        ) c,mv_customer_info d, vw_product_price e
                        where a.customer_code=b.customer_code(+)
                        and   a.product_code=b.product_code(+)
                        and   a.customer_code=c.customer_code(+)
                        and   a.customer_code=d.customer_code(+)
                        and   a.product_code=e.product_code(+)                                                
                        and  (c.zone_code = dCode or dCode='ALL')
                        and  (c.area_code = rCode or rCode='ALL')
                        and  (c.belt_code = aCode or aCode='ALL')
                        and  (c.territory_code = tCode or tCode='ALL')  
                        and  (a.customer_code = cCode or cCode='ALL');   
                        --order by division_name,region_name,area_name,territory_name,customer_name,product_name; 
         
         end;
         
   
   
   end if;   

 
                

  


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_DIST_PROD_IMS_TODAY(pdivision_code varchar2, 
                                                              pregion_code varchar2,
                                                              parea_code varchar2,
                                                              pterritory_code varchar2,
                                                              pcustomer_code varchar2,
                                                              puser_id number
                                                              )
   return sys_refcursor
as
   Ims       sys_refcursor;  

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   userId   number        :=puser_id;
   vCount   number:=0;      

begin

   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 
   
   
   if vCount = 0 then 
     
             
         begin
                     
               open Ims for                                                                            
                            select /*+ append */  
                            zone_code division_code, 
                            zone_name division_name, 
                            area_code region_code, 
                            area_name region_name, 
                            belt_code area_code, 
                            belt_name area_name, 
                            territory_code, 
                            territory_name, 
                            a.customer_code,
                            d.customer_name, 
                            c.db_location,
                            a.product_code,
                            e.product_name,
                            e.pack_size,
                            e.unit_tp product_price,
                            nvl(issued_qty,0) invoice_qty, 
                            nvl(bonus_qty,0) inv_bonus_qty,
                            nvl(bonus_price_discount,0) bonus_price_discount,
                            (nvl(issued_qty,0)-nvl(return_sales_qty,0)) ims_sales_qty,
                            (nvl(bonus_qty,0)-nvl(return_bns_qty,0)) ims_bns_qty,
                            invoice_amt, 
                            nvl(return_sales_qty,0) return_sales_qty , 
                            nvl(return_bns_qty,0) return_bns_qty,
                            nvl(bns_disc_ret,0) bns_disc_ret,
                            nvl(return_value,0) return_value,
                            (nvl(invoice_amt,0) - nvl(return_value,0) + nvl(bns_disc_ret,0)) ims_sales_val  ,
                            ( ( 
                              ( nvl(bonus_qty,0)-nvl(return_bns_qty,0) )*nvl(( select unit_tp from vw_product_price where product_code=a.product_code),0)
                             ) + nvl(bonus_price_discount,0) 
                            )  ims_bns_val,
                            (nvl(invoice_amt,0) -  ( nvl(return_value,0)  - nvl(bns_disc_ret,0)) ) net_ims
                            from
                            (
                            select   customer_code,
                                product_code,
                                sum(issued_qty) issued_qty,
                                sum(bonus_qty) bonus_qty,
                                sum(bonus_price_discount) bonus_price_discount,
                                sum(total) invoice_amt
                            from
                            (
                                                   
                                                   
                            select m.customer_code,
                                   d.product_code,
                                   sum(nvl(d.issued_qty,0)) issued_qty,
                                   0 bonus_qty,
                                   sum(bonus_price_discount) bonus_price_discount,
                                   sum(net_val) total
                            from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d
                            where m.inv_mst_slno=d.inv_mst_slno  
                            and   m.inv_type_code='INV001'
                            and   trunc (m.invoice_date) =  trunc(sysdate)
                            and   (m.customer_code = cCode or cCode='ALL')
                            group by d.product_code, m.customer_code
                                                    
                            union all

                            select m.customer_code,
                                   i.product_code,
                                   0 issued_qty,
                                   sum(nvl(i.bonus_qty,0)) bonus_qty,
                                   0 bonus_price_discount,
                                   0 total
                            from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d, spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com i
                            where m.inv_mst_slno=d.inv_mst_slno
                            and   d.inv_dtl_slno=i.inv_dtl_slno  
                            and   m.inv_type_code='INV001'
                            and   trunc (m.invoice_date) =  trunc(sysdate)  
                            and   (m.customer_code = cCode or cCode='ALL')                 
                            group by i.product_code,m.customer_code

                            )    
                            group by product_code,customer_code
                            ) a,

                            (

                            select customer_code,
                                product_code,
                                sum(nvl(return_qty,0))  return_sales_qty,
                                sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bns_qty,
                                sum(nvl(return_value,0)) return_value,
                                sum(nvl(bns_disc_ret,0)) bns_disc_ret
                                                
                            from 
                            (
                                              
                            select     m.customer_code,
                                 d.product_code,
                                 sum (d.return_qty) return_qty,
                                 0 ret_bns_qty,
                                 0 ret_trd_qty,
                                  sum(nvl(d.return_value,0)+nvl(d.bonus_price_discount,0))return_value,
                                 sum(bonus_price_discount) bns_disc_ret
                            from     spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d
                            where    m.ret_recv_mst_slno = d.ret_recv_mst_slno
                            and      m.inv_type_code='INV001'    
                            and      trunc (m.invoice_date) =  trunc(sysdate)  
                            and   (m.customer_code = cCode or cCode='ALL')                 
                            group by   m.customer_code,d.product_code

                                                
                            union all
                            select   m.customer_code,
                                 b.product_code,
                                 0 return_qty,
                                 sum (bonus_qty) ret_bns_qty,
                                 0 ret_trd_qty,
                                 0 return_value,
                                 0 bns_disc_ret
                            from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,spa_sfbl.ret_return_bonus@dl_spasfbl.squaregroup.com b
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and     m.inv_type_code='INV001' 
                            and     trunc (m.invoice_date) =  trunc(sysdate)
                            and   (m.customer_code = cCode or cCode='ALL')
                            group by   m.customer_code, b.product_code
                                                
                            union all
                            select  m.customer_code,
                                b.product_code,
                                0 return_qty,
                                0 ret_bns_qty,
                                sum (trade_qty) ret_trd_qty,
                                0 return_value,
                                0 bns_disc_ret
                            from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com b
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and     m.inv_type_code='INV001'
                            and    (m.customer_code = cCode or cCode='ALL')
                            and     trunc (m.invoice_date) =  trunc(sysdate)
                            group by   m.customer_code, b.product_code
                            )
                            group by   customer_code, product_code
                            ) b,
                            (
                             select distinct zone_code, zone_name, area_code, area_name, belt_code, belt_name, territory_code, territory_name, customer_code, customer_name, db_location 
                             from mv_division_customer_relation
                            ) c,mv_customer_info d, vw_product_price e
                            where a.customer_code=b.customer_code(+)
                            and   a.product_code=b.product_code(+)
                            and   a.customer_code=c.customer_code(+)
                            and   a.customer_code=d.customer_code(+)
                            and   a.product_code=e.product_code(+)
                                            
                            and  (c.zone_code = dCode or dCode='ALL')
                            and  (c.area_code = rCode or rCode='ALL')
                            and  (c.belt_code = aCode or aCode='ALL')
                            and  (c.territory_code = tCode or tCode='ALL')  
                            and  (a.customer_code = cCode or cCode='ALL');   
                            --order by division_name,region_name,area_name,territory_name,customer_name,product_name;  
         
         end;
         
    elsif vCount > 0 then 
     
     
         begin
                     
               open Ims for                                                                            
                            select /*+ append */  
                            zone_code division_code, 
                            zone_name division_name, 
                            area_code region_code, 
                            area_name region_name, 
                            belt_code area_code, 
                            belt_name area_name, 
                            territory_code, 
                            territory_name, 
                            a.customer_code,
                            d.customer_name, 
                            c.db_location,
                            a.product_code,
                            e.product_name,
                            e.pack_size,
                            e.unit_tp product_price,
                            nvl(issued_qty,0) invoice_qty, 
                            nvl(bonus_qty,0) inv_bonus_qty,
                            nvl(bonus_price_discount,0) bonus_price_discount,
                            (nvl(issued_qty,0)-nvl(return_sales_qty,0)) ims_sales_qty,
                            (nvl(bonus_qty,0)-nvl(return_bns_qty,0)) ims_bns_qty,
                            invoice_amt, 
                            nvl(return_sales_qty,0) return_sales_qty , 
                            nvl(return_bns_qty,0) return_bns_qty,
                            nvl(bns_disc_ret,0) bns_disc_ret,
                            nvl(return_value,0) return_value,
                            (nvl(invoice_amt,0) - nvl(return_value,0) + nvl(bns_disc_ret,0)) ims_sales_val  ,
                            ( ( 
                              ( nvl(bonus_qty,0)-nvl(return_bns_qty,0) )*nvl(( select unit_tp from vw_product_price where product_code=a.product_code),0)
                             ) + nvl(bonus_price_discount,0) 
                            )  ims_bns_val,
                            (nvl(invoice_amt,0) -  ( nvl(return_value,0)  - nvl(bns_disc_ret,0)) ) net_ims
                            from
                            (
                            select   customer_code,
                                product_code,
                                sum(issued_qty) issued_qty,
                                sum(bonus_qty) bonus_qty,
                                sum(bonus_price_discount) bonus_price_discount,
                                sum(total) invoice_amt
                            from
                            (
                                                   
                                                   
                            select m.customer_code,
                                   d.product_code,
                                   sum(nvl(d.issued_qty,0)) issued_qty,
                                   0 bonus_qty,
                                   sum(bonus_price_discount) bonus_price_discount,
                                   sum(net_val) total
                            from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d
                            where m.inv_mst_slno=d.inv_mst_slno 
                            and   d.product_code in (select product_code from user_product_dtl where user_id=userId)  
                            and   m.inv_type_code='INV001'
                            and   trunc (m.invoice_date) =  trunc(sysdate)
                            and   (m.customer_code = cCode or cCode='ALL')
                            group by d.product_code, m.customer_code
                                                    
                            union all

                            select m.customer_code,
                                   i.product_code,
                                   0 issued_qty,
                                   sum(nvl(i.bonus_qty,0)) bonus_qty,
                                   0 bonus_price_discount,
                                   0 total
                            from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d, spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com i
                            where m.inv_mst_slno=d.inv_mst_slno
                            and   d.inv_dtl_slno=i.inv_dtl_slno 
                            and   d.product_code in (select product_code from user_product_dtl where user_id=userId)  
                            and   m.inv_type_code='INV001'
                            and   trunc (m.invoice_date) =  trunc(sysdate)  
                            and   (m.customer_code = cCode or cCode='ALL')                 
                            group by i.product_code,m.customer_code

                            )    
                            group by product_code,customer_code
                            ) a,

                            (

                            select customer_code,
                                product_code,
                                sum(nvl(return_qty,0))  return_sales_qty,
                                sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bns_qty,
                                sum(nvl(return_value,0)) return_value,
                                sum(nvl(bns_disc_ret,0)) bns_disc_ret
                                                
                            from 
                            (
                                              
                            select     m.customer_code,
                                 d.product_code,
                                 sum (d.return_qty) return_qty,
                                 0 ret_bns_qty,
                                 0 ret_trd_qty,
                                  sum(nvl(d.return_value,0)+nvl(d.bonus_price_discount,0))return_value,
                                 sum(bonus_price_discount) bns_disc_ret
                            from     spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d
                            where    m.ret_recv_mst_slno = d.ret_recv_mst_slno
                            and      d.product_code in (select product_code from user_product_dtl where user_id=userId) 
                            and      m.inv_type_code='INV001'    
                            and      trunc (m.invoice_date) =  trunc(sysdate)  
                            and   (m.customer_code = cCode or cCode='ALL')                 
                            group by   m.customer_code,d.product_code

                                                
                            union all
                            select   m.customer_code,
                                 b.product_code,
                                 0 return_qty,
                                 sum (bonus_qty) ret_bns_qty,
                                 0 ret_trd_qty,
                                 0 return_value,
                                 0 bns_disc_ret
                            from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,spa_sfbl.ret_return_bonus@dl_spasfbl.squaregroup.com b
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and     d.product_code in (select product_code from user_product_dtl where user_id=userId) 
                            and     m.inv_type_code='INV001' 
                            and     trunc (m.invoice_date) =  trunc(sysdate)
                            and   (m.customer_code = cCode or cCode='ALL')
                            group by   m.customer_code, b.product_code
                                                
                            union all
                            select  m.customer_code,
                                b.product_code,
                                0 return_qty,
                                0 ret_bns_qty,
                                sum (trade_qty) ret_trd_qty,
                                0 return_value,
                                0 bns_disc_ret
                            from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com b
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and     d.product_code in (select product_code from user_product_dtl where user_id=userId) 
                            and     m.inv_type_code='INV001'
                            and    (m.customer_code = cCode or cCode='ALL')
                            and     trunc (m.invoice_date) =  trunc(sysdate)
                            group by   m.customer_code, b.product_code
                            )
                            group by   customer_code, product_code
                            ) b,
                            (
                             select distinct zone_code, zone_name, area_code, area_name, belt_code, belt_name, territory_code, territory_name, customer_code, customer_name, db_location 
                             from mv_division_customer_relation
                            ) c,mv_customer_info d, vw_product_price e
                            where a.customer_code=b.customer_code(+)
                            and   a.product_code=b.product_code(+)
                            and   a.customer_code=c.customer_code(+)
                            and   a.customer_code=d.customer_code(+)
                            and   a.product_code=e.product_code(+)
                                            
                            and  (c.zone_code = dCode or dCode='ALL')
                            and  (c.area_code = rCode or rCode='ALL')
                            and  (c.belt_code = aCode or aCode='ALL')
                            and  (c.territory_code = tCode or tCode='ALL')  
                            and  (a.customer_code = cCode or cCode='ALL');   
                            --order by division_name,region_name,area_name,territory_name,customer_name,product_name;           
         
         end;
         
   end if;           
   
               


  


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function FN_SR_PROD_IMS_TODAY(pdivision_code varchar2, 
                                                pregion_code varchar2,
                                                parea_code varchar2,
                                                pterritory_code varchar2,
                                                pcustomer_code varchar2,
                                                psr_code varchar2
                                                )
   return sys_refcursor
as
   Ims       sys_refcursor;  

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   sCode varchar2(100)    :=psr_code;

begin
   open Ims for                                                                            
            select /*+ append */ 
                   b.zone_code division_code,
                   b.zone_name division_name,
                   b.area_code region_code,
                   b.area_name region_name,
                   b.belt_code area_code,
                   b.belt_name area_name,
                   b.territory_code,
                   b.territory_name,
                   b.db_location,
                   a.customer_code,
                   c.customer_name, 
                   a.employee_code, 
                   e.employee_name, 
                   a.market_code,
                   b.market_name,
                   a.product_code,
                   d.product_name,
                   d.pack_size,
                   d.unit_tp product_price,       
                   nvl(a.invoice_qty,0) invoice_qty,
                   nvl(a.inv_bonus_qty,0) inv_bonus_qty,
                   nvl(a.bonus_price_discount,0) bonus_price_discount,
                   nvl(a.ims_sales_qty,0) ims_sales_qty,
                   nvl(a.ims_bns_qty,0) ims_bns_qty,
                   nvl(a.bns_disc_ret,0) bns_disc_ret,
                   nvl(a.invoice_amt,0) invoice_amt,
                   nvl(a.return_sales_qty,0) return_sales_qty,
                   nvl(a.return_bns_qty,0) return_bns_qty,
                   nvl(a.return_value,0) return_value,
                   nvl(a.ims_sales_val,0) ims_sales_val,
                   nvl(a.ims_bns_val,0) ims_bns_val,
                   nvl(a.net_ims,0) net_ims,
                   nvl(round(a.bonus_per,2),0) bonus_per
            FROM
                (
                
                
                select customer_code,
                       employee_code,
                       market_code,
                       product_code,
                       sum(nvl(invoice_qty,0))invoice_qty,
                       sum(nvl(inv_bonus_qty,0))inv_bonus_qty,
                       sum(nvl(bonus_price_discount,0))bonus_price_discount,
                       sum(nvl(ims_sales_qty,0))ims_sales_qty,
                       sum(nvl(ims_bns_qty,0))ims_bns_qty,
                       sum(nvl(bns_disc_ret,0))bns_disc_ret,
                       sum(nvl(invoice_amt,0))invoice_amt,
                       sum(nvl(return_sales_qty,0))return_sales_qty,
                       sum(nvl(return_bns_qty,0))return_bns_qty,
                       sum(nvl(return_value,0))return_value,
                       sum(nvl(ims_sales_val,0))ims_sales_val,
                       sum(nvl(ims_bns_val,0))ims_bns_val,
                       sum(nvl(net_ims,0))net_ims,
                       sum(nvl(bonus_per,0))bonus_per
                from
                         (          
                         select     
                               a.customer_code,
                               a.employee_code, 
                               a.market_code,    
                               a.product_code,
                               sum(nvl(issued_qty,0)) invoice_qty, 
                               sum(nvl(bonus_qty,0)) inv_bonus_qty,
                               sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                               (sum(nvl(issued_qty,0))-sum(nvl(return_sales_qty,0))) ims_sales_qty,
                               (sum(nvl(bonus_qty,0))-sum(nvl(return_bns_qty,0))) ims_bns_qty,
                               sum(nvl(bns_disc_ret,0)) bns_disc_ret,
                               sum(nvl(invoice_amt,0)) invoice_amt, 
                               sum(nvl(return_sales_qty,0)) return_sales_qty , 
                               sum(nvl(return_bns_qty,0)) return_bns_qty,
                               sum(nvl(return_value,0)) return_value,      
                              (sum(nvl(invoice_amt,0))- sum(nvl(return_value,0)) +sum(nvl(bns_disc_ret,0))) ims_sales_val,       
                               ( ( ( sum(nvl(bonus_qty,0))-sum(nvl(return_bns_qty,0)) )*( select unit_tp from vw_product_price where product_code=a.product_code)) + sum(nvl(bonus_price_discount,0)) )  ims_bns_val,     
                             ( sum(nvl(invoice_amt,0)) -  ( sum(nvl(return_value,0)) - sum(nvl(bns_disc_ret,0))) ) net_ims,      
                             ((nvl((sum(nvl(bonus_qty,0))-sum(nvl(return_bns_qty,0))),0)+ sum(nvl(bonus_price_discount,0)) )/ nvl(decode((sum(nvl(invoice_amt,0))- sum(nvl(return_value,0)) + sum(nvl(bns_disc_ret,0))),'0',1,(sum(nvl(invoice_amt,0))- sum(nvl(return_value,0)) +sum(nvl(bns_disc_ret,0)))),1))*100 bonus_per   
                        from
                          (
                           
                           
                             
                           select   customer_code,
                                    market_code,
                                    employee_code,
                                    invoice_no,
                                    product_code,
                                    sum(nvl(issued_qty,0))  issued_qty,
                                    sum(nvl(bonus_qty,0)) bonus_qty,
                                    sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                    sum(nvl(total,0)) invoice_amt
                            from
                               (  
                               
                           
                                 select m.invoice_no,
                                        m.customer_code,
                                        m.market_code,
                                        m.employee_code,
                                        d.product_code,
                                        nvl(d.issued_qty,0) issued_qty,
                                        0 bonus_qty,
                                        nvl(bonus_price_discount,0) bonus_price_discount ,
                                        nvl(net_val,0) total
                                from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d
                                where m.inv_mst_slno=d.inv_mst_slno  
                                and   m.inv_type_code='INV001'       
                                and   trunc (m.invoice_date) =  trunc(sysdate)
                                and   (m.customer_code = cCode or cCode='ALL')
                                      
                                                
                                union all
                                                
                                select m.invoice_no,
                                       m.customer_code,
                                       m.market_code,
                                       m.employee_code,
                                       i.product_code,
                                       0 issued_qty,
                                       nvl(i.bonus_qty,0) bonus_qty,
                                       0 bonus_price_discount,
                                       0 total
                                from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d, spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com i
                                where m.inv_mst_slno=d.inv_mst_slno
                                and   d.inv_dtl_slno=i.inv_dtl_slno          
                                and   m.inv_type_code='INV001'
                                and  trunc (m.invoice_date) =  trunc(sysdate)
                                and   (m.customer_code = cCode or cCode='ALL')
                         
                               ) 
                                group by   customer_code,market_code,employee_code,invoice_no,product_code
                               
                                          
                                          
                           ) A, 

                         
                         
                           (
                                            
                            select  invoice_no, 
                                    product_code,
                                    sum(nvl(return_qty,0))  return_sales_qty,
                                    sum(nvl(return_value,0))  return_value,
                                    sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bns_qty,
                                    sum(nvl(bns_disc_ret,0)) bns_disc_ret
                          from 
                              (
                                         
                                         
                            select   m.invoice_no,
                                     d.product_code,
                                     nvl(d.return_qty,0) return_qty,
                                     nvl(d.return_value,0) + nvl(d.bonus_price_discount,0) return_value,
                                     0 ret_bns_qty,
                                     0 ret_trd_qty,
                                     nvl(d.bonus_price_discount,0) bns_disc_ret             
                             from   spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                             where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                             and    m.invoice_no   =i.invoice_no
                             and    trunc (i.invoice_date) =  trunc(sysdate)
                             and   (m.customer_code = cCode or cCode='ALL')
                             and    i.inv_type_code='INV001'  
                                           
                            union all
                                            
                            select   m.invoice_no,
                                     b.product_code,
                                     0 return_qty,
                                     0 return_value,
                                     bonus_qty ret_bns_qty,
                                     0 ret_trd_qty,
                                     0 bns_disc_ret
                            from     spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,spa_sfbl.ret_return_bonus@dl_spasfbl.squaregroup.com b,spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                            where    m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and      d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and      m.invoice_no  = i.invoice_no
                            and      trunc (i.invoice_date) =  trunc(sysdate)
                            and     (m.customer_code = cCode or cCode='ALL')
                            and      i.inv_type_code='INV001'    
                          
                                            
                            union all
                                            
                            select  m.invoice_no,
                                    b.product_code,
                                    0 return_qty,
                                    0 return_value,
                                    0 ret_bns_qty,
                                    nvl(trade_qty,0) ret_trd_qty,
                                    0 bns_disc_ret
                            from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com b,spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and     m.invoice_no  = i.invoice_no
                            and trunc (i.invoice_date) =  trunc(sysdate)
                            and   (m.customer_code = cCode or cCode='ALL')
                            and     i.inv_type_code='INV001'
                                
                            )
                            
                            group by invoice_no,product_code
                            
                                            
                        ) b    

                        where a.invoice_no=b.invoice_no(+)
                        and   a.product_code=b.product_code(+)
                        group by a.customer_code,a.market_code,a.product_code,employee_code

                         ) 
                        group by customer_code,market_code,product_code,employee_code
              
            
              ) a, mv_division_customer_relation b,mv_customer_info c,vw_product_price d,mv_employee_info e

            where a.market_code=b.market_code(+)
            and   a.customer_code=c.customer_code(+)
            and   a.product_code=d.product_code(+)
            and   a.employee_code=e.employee_code(+)

            and  (b.zone_code = dCode or dCode='ALL')
            and  (b.area_code = rCode or rCode='ALL')
            and  (b.belt_code = aCode or aCode='ALL')
            and  (b.territory_code = tCode or tCode='ALL')  
            and  (a.customer_code = cCode or cCode='ALL')   
            and  (a.employee_code = sCode or sCode='ALL')   
            order by division_name,region_name,area_name,territory_name,customer_name,market_name,employee_code,product_name; 
   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_SR_PROD_IMS_DATE_RANGE(pfrom_date varchar2,pto_date varchar2,pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2,psr_code varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   sCode varchar2(100)    :=psr_code;

begin
   open Ims for                                                                            
            select /*+ append */ 
                   b.zone_code division_code,
                   b.zone_name division_name,
                   b.area_code region_code,
                   b.area_name region_name,
                   b.belt_code area_code,
                   b.belt_name area_name,
                   b.territory_code,
                   b.territory_name,
                   b.db_location,
                   a.customer_code,
                   c.customer_name, 
                   a.employee_code, 
                   e.employee_name, 
                   a.market_code,
                   b.market_name,
                   a.product_code,
                   d.product_name,
                   d.pack_size,
                   d.unit_tp product_price,      
                   nvl(a.invoice_qty,0) invoice_qty,
                   nvl(a.inv_bonus_qty,0) inv_bonus_qty,
                   nvl(a.bonus_price_discount,0) bonus_price_discount,
                   nvl(a.ims_sales_qty,0) ims_sales_qty,
                   nvl(a.ims_bns_qty,0) ims_bns_qty,
                   nvl(a.bns_disc_ret,0) bns_disc_ret,
                   nvl(a.invoice_amt,0) invoice_amt,
                   nvl(a.return_sales_qty,0) return_sales_qty,
                   nvl(a.return_bns_qty,0) return_bns_qty,
                   nvl(a.return_value,0) return_value,
                   nvl(a.ims_sales_val,0) ims_sales_val,
                   nvl(a.ims_bns_val,0) ims_bns_val,
                   nvl(a.net_ims,0) net_ims,
                   nvl(round(a.bonus_per,2),0) bonus_per
            FROM
                (
                
                
                select customer_code,
                       employee_code,
                       market_code,
                       product_code,
                       sum(nvl(invoice_qty,0))invoice_qty,
                       sum(nvl(inv_bonus_qty,0))inv_bonus_qty,
                       sum(nvl(bonus_price_discount,0))bonus_price_discount,
                       sum(nvl(ims_sales_qty,0))ims_sales_qty,
                       sum(nvl(ims_bns_qty,0))ims_bns_qty,
                       sum(nvl(bns_disc_ret,0))bns_disc_ret,
                       sum(nvl(invoice_amt,0))invoice_amt,
                       sum(nvl(return_sales_qty,0))return_sales_qty,
                       sum(nvl(return_bns_qty,0))return_bns_qty,
                       sum(nvl(return_value,0))return_value,
                       sum(nvl(ims_sales_val,0))ims_sales_val,
                       sum(nvl(ims_bns_val,0))ims_bns_val,
                       sum(nvl(net_ims,0))net_ims,
                       sum(nvl(bonus_per,0))bonus_per
                from
                         (          
                         select     
                               a.customer_code,
                               a.employee_code, 
                               a.market_code,    
                               a.product_code,
                               sum(nvl(issued_qty,0)) invoice_qty, 
                               sum(nvl(bonus_qty,0)) inv_bonus_qty,
                               sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                               (sum(nvl(issued_qty,0))-sum(nvl(return_sales_qty,0))) ims_sales_qty,
                               (sum(nvl(bonus_qty,0))-sum(nvl(return_bns_qty,0))) ims_bns_qty,
                               sum(nvl(bns_disc_ret,0)) bns_disc_ret,
                               sum(nvl(invoice_amt,0)) invoice_amt, 
                               sum(nvl(return_sales_qty,0)) return_sales_qty , 
                               sum(nvl(return_bns_qty,0)) return_bns_qty,
                               sum(nvl(return_value,0)) return_value,      
                              (sum(nvl(invoice_amt,0))- sum(nvl(return_value,0)) +sum(nvl(bns_disc_ret,0))) ims_sales_val,       
                               ( ( ( sum(nvl(bonus_qty,0))-sum(nvl(return_bns_qty,0)) )*( select unit_tp from vw_product_price where product_code=a.product_code)) + sum(nvl(bonus_price_discount,0)) )  ims_bns_val,     
                             
                             sum(nvl(invoice_amt,0)) -   sum(nvl(return_value,0)) net_ims,      
                             
                             ((nvl((sum(nvl(bonus_qty,0))-sum(nvl(return_bns_qty,0))),0)+ sum(nvl(bonus_price_discount,0)) )/ nvl(decode((sum(nvl(invoice_amt,0))- sum(nvl(return_value,0)) + sum(nvl(bns_disc_ret,0))),'0',1,(sum(nvl(invoice_amt,0))- sum(nvl(return_value,0)) +sum(nvl(bns_disc_ret,0)))),1))*100 bonus_per   
                        from
                          (
                           
                           
                             
                           select   customer_code,
                                    market_code,
                                    employee_code,
                                    invoice_no,
                                    product_code,
                                    sum(nvl(issued_qty,0))  issued_qty,
                                    sum(nvl(bonus_qty,0)) bonus_qty,
                                    sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                                    sum(nvl(total,0)) invoice_amt
                            from
                               (  
                               
                           
                                 select m.invoice_no,
                                        m.customer_code,
                                        m.market_code,
                                        m.employee_code,
                                        d.product_code,
                                        nvl(d.issued_qty,0) issued_qty,
                                        0 bonus_qty,
                                        nvl(bonus_price_discount,0) bonus_price_discount ,
                                        nvl(d.total_val,0) -nvl(bonus_price_discount,0)  total
                                from  vw_invoice_mst m,  vw_invoice_dtl  d
                                where m.inv_mst_slno=d.inv_mst_slno  
                                and   m.inv_type_code='INV001'  
                                and  (m.customer_code = cCode or cCode='ALL') 
                                and  (m.employee_code = sCode or sCode='ALL')     
                                and   trunc (m.invoice_date) between fDate and tDate
                                      
                                                
                                union all
                                                
                                select m.invoice_no,
                                       m.customer_code,
                                       m.market_code,
                                       m.employee_code,
                                       i.product_code,
                                       0 issued_qty,
                                       nvl(i.bonus_qty,0) bonus_qty,
                                       0 bonus_price_discount,
                                       0 total
                                from  vw_invoice_mst m,  vw_invoice_dtl  d, vw_invoice_bonus i
                                where m.inv_mst_slno=d.inv_mst_slno
                                and   d.inv_dtl_slno=i.inv_dtl_slno          
                                and   m.inv_type_code='INV001'
                                and  (m.customer_code = cCode or cCode='ALL')
                                and  (m.employee_code = sCode or sCode='ALL')   
                                and  trunc (m.invoice_date) between fDate and tDate
                         
                               ) 
                                group by   customer_code,market_code,employee_code,invoice_no,product_code
                               
                                          
                                          
                           ) A, 

                         
                         
                           (
                                            
                            select  invoice_no, 
                                    product_code,
                                    sum(nvl(return_qty,0))  return_sales_qty,
                                    sum(nvl(return_value,0))  return_value,
                                    sum(nvl(ret_bns_qty,0)) + sum(nvl(ret_trd_qty,0)) return_bns_qty,
                                    sum(nvl(bns_disc_ret,0)) bns_disc_ret
                          from 
                              (
                                         
                                         
                            select   i.invoice_no,
                                     d.product_code,
                                     nvl(d.return_qty,0) return_qty,
                                     nvl(d.return_value,0) return_value,
                                     0 ret_bns_qty,
                                     0 ret_trd_qty,
                                     nvl(d.bonus_price_discount,0) bns_disc_ret             
                             from   vw_ret_return_mst m, vw_ret_return_dtl d,  vw_invoice_mst i
                             where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                             and    m.invoice_no   =i.invoice_no
                             and    (i.customer_code = cCode or cCode='ALL')
                             and    (i.employee_code = sCode or sCode='ALL')   
                             and    trunc (i.invoice_date) between fDate and tDate
                             and    i.inv_type_code='INV001'  
                                           
                            union all
                                            
                            select   i.invoice_no,
                                     b.product_code,
                                     0 return_qty,
                                     0 return_value,
                                     bonus_qty ret_bns_qty,
                                     0 ret_trd_qty,
                                     0 bns_disc_ret
                            from     vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_bonus b,vw_invoice_mst i
                            where    m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and      d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and      m.invoice_no  = i.invoice_no
                            and      (i.customer_code = cCode or cCode='ALL')
                            and      (i.employee_code = sCode or sCode='ALL')   
                            and      trunc (i.invoice_date) between fDate and tDate
                            and      i.inv_type_code='INV001'    
                          
                                            
                            union all
                                            
                            select  i.invoice_no,
                                    b.product_code,
                                    0 return_qty,
                                    0 return_value,
                                    0 ret_bns_qty,
                                    nvl(trade_qty,0) ret_trd_qty,
                                    0 bns_disc_ret
                            from    vw_ret_return_mst m,vw_ret_return_dtl d,vw_ret_return_trade b,vw_invoice_mst i
                            where   m.ret_recv_mst_slno =d.ret_recv_mst_slno
                            and     d.ret_recv_dtl_slno =b.ret_recv_dtl_slno
                            and     m.invoice_no  = i.invoice_no
                            and    (i.customer_code = cCode or cCode='ALL')
                            and     (i.employee_code = sCode or sCode='ALL')   
                            and     trunc (i.invoice_date) between fDate and tDate
                            and     i.inv_type_code='INV001'
                                
                            )
                            
                            group by invoice_no,product_code
                            
                                            
                        ) b    

                        where a.invoice_no=b.invoice_no(+)
                        and   a.product_code=b.product_code(+)
                        group by a.customer_code,a.market_code,a.product_code,employee_code

                         ) 
                        group by customer_code,market_code,product_code,employee_code
                
    
            ) a, mv_division_customer_relation b,mv_customer_info c,vw_product_price d,mv_employee_info e

            where a.market_code=b.market_code(+)
            and   a.customer_code=c.customer_code(+)
            and   a.product_code=d.product_code(+)
            and   a.employee_code=e.employee_code(+)

            and  (b.zone_code = dCode or dCode='ALL')
            and  (b.area_code = rCode or rCode='ALL')
            and  (b.belt_code = aCode or aCode='ALL')
            and  (b.territory_code = tCode or tCode='ALL')  
            and  (a.customer_code = cCode or cCode='ALL')
            and  (a.employee_code = sCode or sCode='ALL')      
            order by division_name,region_name,area_name,territory_name,customer_name,employee_name,product_name;   
                

  


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_TERRITORY_PROD_IMS(pfrom_date varchar2,
                                                             pto_date varchar2,
                                                             pdivision_code varchar2,
                                                             parea_code varchar2,
                                                             pterritory_code varchar2
                                                             )
   return sys_refcursor
as
   Ims       sys_refcursor;  

   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;

begin
   open Ims for                                                                            
                select a.division_code,
                       b.zone_name division_name,
                       a.area_code,
                       c.belt_name area_name,
                       a.territory_code,
                       d.territory_name,
                       a.product_code,
                       f.product_name,
                       f.pack_size,
                       a.ims_sales_qty,
                       a.target_qty,
                       a.last_year_as_on_date_ims_qty,      
                       round(decode(target_qty,0,0,(ims_sales_qty/ target_qty)*100),2) achievement,
                       nvl(ims_sales_qty,0)-nvl(last_year_as_on_date_ims_qty,0)  growth  
                from 
                   (
                        select division_code,
                               area_code,
                               territory_code,
                               product_code,
                               sum(ims_sales_qty) ims_sales_qty,
                               sum(target_qty) target_qty,
                               sum(last_year_as_on_date_ims_qty) last_year_as_on_date_ims_qty  
                        from 
                           (
                                select c.zone_code division_code,
                                       c.belt_code area_code,
                                       c.territory_code,
                                       a.product_code,
                                       sum(nvl(a.invoice_qty,0)) - sum(nvl(b.return_qty,0)) ims_sales_qty,
                                       0 target_qty,
                                       0 last_year_as_on_date_ims_qty
                                from 
                                   (
                                     select a.invoice_no,
                                            a.market_code,
                                            b.product_code,
                                            nvl(b.issued_qty,0) invoice_qty                                                               
                                    from  vw_invoice_mst a,  vw_invoice_dtl  b
                                    where a.inv_mst_slno=b.inv_mst_slno  
                                    and   a.inv_type_code='INV001'       
                                    and   to_date(a.invoice_date,'dd/mm/rrrr') between to_date(fDate,'dd/mm/rrrr') and to_date(tDate,'dd/mm/rrrr')                   
                                   )a,
                                   (
                                    select   a.invoice_no,
                                             b.product_code,
                                             nvl(b.return_qty,0) return_qty            
                                     from   vw_ret_return_mst a, vw_ret_return_dtl b
                                     where  a.ret_recv_mst_slno = b.ret_recv_mst_slno 
                                   ) b, mv_division_customer_relation c
                                where a.invoice_no=b.invoice_no(+)
                                and   a.product_code=b.product_code(+)
                                and   a.market_code=c.market_code(+)
                                and  (c.zone_code = dCode or dCode='ALL')
                                and  (c.belt_code = aCode or aCode='ALL')
                                and  (c.territory_code = tCode or tCode='ALL')
                                group by c.zone_code,c.belt_code,c.territory_code,a.product_code     
                                   
                                union all
                                   
                                select b.zone_code division_code,
                                       b.belt_code area_code,
                                       b.territory_code,
                                       a.product_code,
                                       0 ims_sales_qty,
                                       sum(nvl (a.target_qty, 0)) target_qty,
                                       0 last_year_as_on_date_ims_qty                        
                                from   mv_target_l3years a, mv_division_customer_relation b
                                where  a.market_code=b.market_code
                                and   (b.zone_code = dCode or dCode='ALL')
                                and   (b.belt_code = aCode or aCode='ALL')
                                and   (b.territory_code = tCode or tCode='ALL')
                                and   yyyymm between to_char(to_date(fDate,'dd/mm/rrrr'),'rrrrmm') and to_char(to_date(tDate,'dd/mm/rrrr'),'rrrrmm')
                                group by b.zone_code,b.belt_code ,b.territory_code,a.product_code

                                union all

                                select c.zone_code division_code,
                                       c.belt_code area_code,
                                       c.territory_code,
                                       a.product_code,
                                       0 ims_sales_qty,
                                       0 target_qty,
                                       sum(nvl(a.invoice_qty,0))-sum(nvl(b.return_qty,0)) last_year_as_on_date_ims_qty
                                from 
                                   (
                                     select m.invoice_no,
                                            m.market_code,
                                            d.product_code,
                                            nvl(d.issued_qty,0) invoice_qty                                                               
                                    from  vw_invoice_mst m,  vw_invoice_dtl  d
                                    where m.inv_mst_slno=d.inv_mst_slno  
                                    and   m.inv_type_code='INV001'       
                                    and   to_date(m.invoice_date,'DD/MM/RRRR') between to_date(trunc(add_months(fDate,-12),'MM'),'DD/MM/RRRR') and  to_date(trunc(add_months(tDate,-12)),'DD/MM/RRRR')
                                   )a,
                                   (
                                    select   m.invoice_no,
                                             d.product_code,
                                             nvl(d.return_qty,0) return_qty            
                                     from   vw_ret_return_mst m, vw_ret_return_dtl d
                                     where  m.ret_recv_mst_slno = d.ret_recv_mst_slno   
                                   ) b, mv_division_customer_relation c
                                where a.invoice_no=b.invoice_no(+)
                                and   a.product_code=b.product_code(+)
                                and   a.market_code=c.market_code(+)
                                                               
                                
                                and  (c.zone_code = dCode or dCode='ALL')
                                and  (c.belt_code = aCode or aCode='ALL')
                                and  (c.territory_code = tCode or tCode='ALL')
                                group by c.zone_code,c.belt_code,c.territory_code,a.product_code
                        )
                        where (division_code = dCode or dCode='ALL')
                        and   (area_code = aCode or aCode='ALL')
                        and   (territory_code = tCode or tCode='ALL')
                        group by division_code,area_code,territory_code,product_code 
                )a,mv_zone_info b, mv_belt_info c, mv_territory_info d,vw_product_price f
                where a.division_code=b.zone_code
                and   a.area_code=c.belt_code(+)
                and   a.territory_code=d.territory_code(+)
                and   a.product_code=f.product_code(+);                 
               
   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_AREA_PROD_IMS(pfrom_date varchar2,pto_date varchar2,pdivision_code varchar2,parea_code varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  

   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;
   aCode varchar2(100)    :=parea_code;

begin
   open Ims for                                                                            
                select division_code,
                       fn_zone_name(division_code) division_name,
                       area_code,
                       fn_belt_name(area_code) area_name,
                       product_code,
                       fn_product_name(product_code) product_name,
                       fn_pack_size(product_code) pack_size,
                       ims_sales_qty,
                       target_qty,
                       last_year_as_on_date_ims_qty,      
                       round(decode(target_qty,0,0,(ims_sales_qty/ target_qty)*100),2) achievement,
                       nvl(ims_sales_qty,0)-nvl(last_year_as_on_date_ims_qty,0)  growth 
                from 
                   (
                        select division_code,
                               area_code,
                               product_code,
                               sum(ims_sales_qty) ims_sales_qty,
                               sum(target_qty) target_qty,
                               sum(last_year_as_on_date_ims_qty) last_year_as_on_date_ims_qty  
                        from 
                           (
                                select c.zone_code division_code,
                                       c.belt_code area_code,
                                       a.product_code,
                                       sum(nvl(a.invoice_qty,0)) - sum(nvl(b.return_qty,0)) ims_sales_qty,
                                       0 target_qty,
                                       0 last_year_as_on_date_ims_qty
                                from 
                                   (
                                     select a.invoice_no,
                                            a.market_code,
                                            b.product_code,
                                            nvl(b.issued_qty,0) invoice_qty                                                               
                                    from  vw_invoice_mst a,  vw_invoice_dtl  b
                                    where a.inv_mst_slno=b.inv_mst_slno  
                                    and   a.inv_type_code='INV001'       
                                    and   to_date(a.invoice_date,'dd/mm/rrrr') between to_date(fDate,'dd/mm/rrrr') and to_date(tDate,'dd/mm/rrrr')                   
                                   )a,
                                   (
                                    select   a.invoice_no,
                                             b.product_code,
                                             nvl(b.return_qty,0) return_qty            
                                     from   vw_ret_return_mst a, vw_ret_return_dtl b
                                     where  a.ret_recv_mst_slno = b.ret_recv_mst_slno 
                                   ) b, mv_division_customer_relation c
                                where a.invoice_no=b.invoice_no(+)
                                and   a.product_code=b.product_code(+)
                                and   a.market_code=c.market_code(+)
                                and  (c.zone_code = dCode or dCode='ALL')
                                and  (c.belt_code = aCode or aCode='ALL')
                                group by c.zone_code,c.belt_code,a.product_code     
                                   
                                union all
                                   
                                select b.zone_code division_code,
                                       b.belt_code area_code,
                                       a.product_code,
                                       0 ims_sales_qty,
                                       sum(nvl (a.target_qty, 0)) target_qty,
                                       0 last_year_as_on_date_ims_qty                        
                                from   mv_target_l3years a, mv_division_customer_relation b
                                where  a.market_code=b.market_code
                                and   (b.zone_code = dCode or dCode='ALL')
                                and   (b.belt_code = aCode or aCode='ALL')
                                and   yyyymm between to_char(to_date(fDate,'dd/mm/rrrr'),'rrrrmm') and to_char(to_date(tDate,'dd/mm/rrrr'),'rrrrmm')
                                group by b.zone_code,b.belt_code ,a.product_code

                                union all

                                select c.zone_code division_code,
                                       c.belt_code area_code,
                                       a.product_code,
                                       0 ims_sales_qty,
                                       0 target_qty,
                                       sum(nvl(a.invoice_qty,0))-sum(nvl(b.return_qty,0)) last_year_as_on_date_ims_qty
                                from 
                                   (
                                     select m.invoice_no,
                                            m.market_code,
                                            d.product_code,
                                            nvl(d.issued_qty,0) invoice_qty                                                               
                                    from  vw_invoice_mst m,  vw_invoice_dtl  d
                                    where m.inv_mst_slno=d.inv_mst_slno  
                                    and   m.inv_type_code='INV001'       
                                    and   to_date(m.invoice_date,'DD/MM/RRRR') between to_date(trunc(add_months(fDate,-12),'MM'),'DD/MM/RRRR') and  to_date(trunc(add_months(tDate,-12)),'DD/MM/RRRR')
                                   )a,
                                   (
                                    select   m.invoice_no,
                                             d.product_code,
                                             nvl(d.return_qty,0) return_qty            
                                     from   vw_ret_return_mst m, vw_ret_return_dtl d
                                     where  m.ret_recv_mst_slno = d.ret_recv_mst_slno   
                                   ) b, mv_division_customer_relation c
                                where a.invoice_no=b.invoice_no(+)
                                and   a.product_code=b.product_code(+)
                                and   a.market_code=c.market_code(+)
                                and  (c.zone_code = dCode or dCode='ALL')
                                and   (c.belt_code = aCode or aCode='ALL')
                                group by c.zone_code,c.belt_code,a.product_code
                        )
                        where (division_code = dCode or dCode='ALL')
                        and   (area_code = aCode or aCode='ALL')
                        group by division_code,area_code,product_code 
                );                 
               
   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_DIVISION_PROD_IMS(pfrom_date varchar2,pto_date varchar2,pdivision_code varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  

   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;

begin
   open Ims for                                                                            
                select division_code,
                       fn_zone_name(division_code) division_name,
                       product_code,
                       fn_product_name(product_code) product_name,
                       fn_pack_size(product_code) pack_size,
                       ims_sales_qty,
                       target_qty,
                       last_year_as_on_date_ims_qty,      
                       round(decode(target_qty,0,0,(ims_sales_qty/ target_qty)*100),2) achievement,
                       nvl(ims_sales_qty,0)-nvl(last_year_as_on_date_ims_qty,0)  growth 
                from 
                   (
                        select division_code,
                               product_code,
                               sum(ims_sales_qty) ims_sales_qty,
                               sum(target_qty) target_qty,
                               sum(last_year_as_on_date_ims_qty) last_year_as_on_date_ims_qty  
                        from 
                           (
                                select c.zone_code division_code,
                                       a.product_code,
                                       sum(nvl(a.invoice_qty,0)) - sum(nvl(b.return_qty,0)) ims_sales_qty,
                                       0 target_qty,
                                       0 last_year_as_on_date_ims_qty
                                from 
                                   (
                                     select a.invoice_no,
                                            a.market_code,
                                            b.product_code,
                                            nvl(b.issued_qty,0) invoice_qty                                                               
                                    from  vw_invoice_mst a,  vw_invoice_dtl  b
                                    where a.inv_mst_slno=b.inv_mst_slno  
                                    and   a.inv_type_code='INV001'       
                                    and   to_date(a.invoice_date,'dd/mm/rrrr') between to_date(fDate,'dd/mm/rrrr') and to_date(tDate,'dd/mm/rrrr')                   
                                   )a,
                                   (
                                    select   a.invoice_no,
                                             b.product_code,
                                             nvl(b.return_qty,0) return_qty            
                                     from   vw_ret_return_mst a, vw_ret_return_dtl b
                                     where  a.ret_recv_mst_slno = b.ret_recv_mst_slno 
                                   ) b, mv_division_customer_relation c
                                where a.invoice_no=b.invoice_no(+)
                                and   a.product_code=b.product_code(+)
                                and   a.market_code=c.market_code(+)
                                and  (c.zone_code = dCode or dCode='ALL')
                                group by c.zone_code,a.product_code     
                                   
                                union all
                                   
                                select b.zone_code division_code,
                                       a.product_code,
                                       0 ims_sales_qty,
                                       sum(nvl (a.target_qty, 0)) target_qty,
                                       0 last_year_as_on_date_ims_qty                        
                                from   mv_target_l3years a, mv_division_customer_relation b
                                where  a.market_code=b.market_code
                                and   (b.zone_code = dCode or dCode='ALL')
                                and   yyyymm between to_char(to_date(fDate,'dd/mm/rrrr'),'rrrrmm') and to_char(to_date(tDate,'dd/mm/rrrr'),'rrrrmm')
                                group by b.zone_code,a.product_code

                                union all

                                select c.zone_code division_code,
                                       a.product_code,
                                       0 ims_sales_qty,
                                       0 target_qty,
                                       sum(nvl(a.invoice_qty,0))-sum(nvl(b.return_qty,0)) last_year_as_on_date_ims_qty
                                from 
                                   (
                                     select m.invoice_no,
                                            m.market_code,
                                            d.product_code,
                                            nvl(d.issued_qty,0) invoice_qty                                                               
                                    from  vw_invoice_mst m,  vw_invoice_dtl  d
                                    where m.inv_mst_slno=d.inv_mst_slno  
                                    and   m.inv_type_code='INV001'       
                                    and   to_date(m.invoice_date,'DD/MM/RRRR') between to_date(trunc(add_months(fDate,-12),'MM'),'DD/MM/RRRR') and  to_date(trunc(add_months(tDate,-12)),'DD/MM/RRRR')
                                   )a,
                                   (
                                    select   m.invoice_no,
                                             d.product_code,
                                             nvl(d.return_qty,0) return_qty            
                                     from   vw_ret_return_mst m, vw_ret_return_dtl d
                                     where  m.ret_recv_mst_slno = d.ret_recv_mst_slno   
                                   ) b, mv_division_customer_relation c
                                where a.invoice_no=b.invoice_no(+)
                                and   a.product_code=b.product_code(+)
                                and   a.market_code=c.market_code(+)
                                and  (c.zone_code = dCode or dCode='ALL')
                                group by c.zone_code,a.product_code
                        )
                        where (division_code = dCode or dCode='ALL')
                        group by division_code,product_code 
                );                 
   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             fn_Retailer_Ims_any_date(pfrom_date varchar2,pto_date varchar2,pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   Retailer_Ims       sys_refcursor;  
   
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Retailer_Ims for                                                                            
                                select  b.division_code, 
                                        b.division_name, 
                                        b.region_code, 
                                        b.region_name, 
                                        b.area_code,  
                                        b.area_name,
                                        b.territory_code, 
                                        b.territory_name,
                                        a.customer_code,
                                        b.customer_name,
                                        b.db_location,
                                        a.market_code,
                                        b.market_name,       
                                       a.route_code,
                                       c.route_name,      
                                       a.retailer_code, 
                                       d.retailer_name,          
                                       no_of_inv,
                                       total_inv_amt, 
                                       slab_adjustment, 
                                       net_inv_amount,
                                       return_value, 
                                       return_slab_adjust, 
                                       net_return_val,
                                       net_ims,                      
                                       no_of_replace_inv,
                                       replace_inv_amt
                                from
                                (
                                select customer_code,
                                       market_code,
                                       route_code,
                                       retailer_code,           
                                       sum(no_of_inv) no_of_inv,
                                       sum(total_inv_amt) total_inv_amt, 
                                       sum(slab_adjustment) slab_adjustment, 
                                       sum(net_inv_amount) net_inv_amount,
                                       sum(return_value) return_value, 
                                       sum(return_slab_adjust) return_slab_adjust, 
                                       sum(net_return_val) net_return_val,
                                       sum(net_ims) net_ims,                      
                                       sum(no_of_replace_inv) no_of_replace_inv,
                                       sum(replace_inv_amt) replace_inv_amt
                                from
                                   (       
                                        select  customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                sum (nvl(no_of_inv,0)) no_of_inv,
                                                sum(nvl(total_inv_amt,0))total_inv_amt, 
                                                sum(nvl(slab_adjustment,0))slab_adjustment, 
                                                sum(nvl(net_inv_amount,0))net_inv_amount,
                                                sum(nvl(return_value,0))return_value, 
                                                sum(nvl(return_slab_adjust,0))return_slab_adjust, 
                                                sum(nvl(net_return_val,0))net_return_val,
                                                sum(nvl(net_inv_amount,0))-sum(nvl(net_return_val,0)) net_ims,
                                                0 no_of_replace_inv,
                                                0 replace_inv_amt
                                                from
                                                   (                   
                                                    select  customer_code,
                                                            market_code,
                                                            route_code,
                                                            retailer_code,
                                                            count(invoice_no)no_of_inv,
                                                            sum(total_inv_amt)total_inv_amt, 
                                                            sum(slab_adjustment)slab_adjustment, 
                                                            sum(net_inv_amount)net_inv_amount,
                                                            0 return_value,
                                                            0 return_slab_adjust,
                                                            0 net_return_val                            
                                                     from
                                                         (
                                                         select          
                                                                customer_code,
                                                                market_code,
                                                                route_code,
                                                                retailer_code,
                                                                invoice_no,
                                                                nvl(grand_total,0)total_inv_amt, 
                                                                nvl(slab_adjustment,0)+nvl(special_bonus_disc,0)slab_adjustment, 
                                                                nvl(net_inv_amount,0)net_inv_amount                                
                                                        from vw_invoice_mst  
                                                        where  inv_type_code='INV001'
                                                        and   invoice_date between fDate and tDate
                                                        and  (customer_code = cCode or cCode='ALL')
                                                        
                                                        )
                                                    group by customer_code,market_code,route_code,retailer_code
                                                       
                                                                  
                                                    UNION ALL              
                                                  
                                                    select     b.customer_code,
                                                               b.market_code,
                                                               b.route_code,
                                                               b.retailer_code,
                                                               0 no_of_inv,
                                                               0 total_inv_amt,
                                                               0 slab_adjustment,
                                                               0 net_inv_amount,
                                                               sum(nvl(a.return_value,0)) return_value,
                                                               sum(nvl(a.return_slab_amount,0))+ sum(nvl(a.special_bonus_disc,0)) return_slab_adjust,
                                                               sum(nvl(net_return_val,0)) net_return_val
                                                    from  vw_ret_return_mst a,vw_invoice_mst b
                                                    where a.invoice_no=b.invoice_no
                                                    and   b.inv_type_code='INV001'
                                                    and   b.invoice_date between fDate and tDate
                                                    and  (b.customer_code = cCode or cCode='ALL')                    
                                                    group by  b.customer_code, b.market_code,b.route_code, b.retailer_code 
                                                    
                                                       
                                                    )        
                                        group by customer_code,market_code,route_code,retailer_code 

                                        UNION ALL

                                        select customer_code,
                                               market_code,
                                               route_code,
                                               retailer_code,           
                                               0 no_of_inv,
                                               0 total_inv_amt, 
                                               0 slab_adjustment, 
                                               0 net_inv_amount,
                                               0 return_value, 
                                               0 return_slab_adjust, 
                                               0 net_return_val,
                                               0 net_ims,                      
                                               nvl(count(invoice_no),0) no_of_replace_inv,
                                               nvl(sum(nvl(replace_inv_amt,0)),0) replace_inv_amt
                                            from
                                                (
                                                  select  customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          nvl(net_inv_amount,0)replace_inv_amt
                                                from vw_invoice_mst  
                                                where  inv_type_code='INV002'
                                                and   invoice_date between fDate and tDate
                                                and  (customer_code = cCode or cCode='ALL')           
                                            )
                                        group by customer_code,market_code,route_code,retailer_code
                                   )        
                                group by customer_code,market_code,route_code,retailer_code  
                                ) a,
                                (
                                select  distinct  
                                        zone_code division_code, 
                                        zone_name division_name, 
                                        area_code region_code, 
                                        area_name region_name, 
                                        belt_code area_code,  
                                        belt_name  area_name,
                                        territory_code, 
                                        territory_name,
                                        customer_code,
                                        customer_name,
                                        db_location,
                                        market_code, 
                                        market_name
                                from mv_division_customer_relation
                                ) b, mv_route_info c, mv_retailer_info d
                                where a.market_code=b.market_code(+)
                                and   a.route_code=c.route_code
                                and   a.retailer_code=d.retailer_code
                                and  (b.division_code = dCode or dCode='ALL')
                                and  (b.region_code = rCode or rCode='ALL')
                                and  (b.area_code = aCode or aCode='ALL')
                                and  (b.territory_code = tCode or tCode='ALL')  
                                and  (a.customer_code = cCode or cCode='ALL');
    
    


   
    return Retailer_Ims;
    
exception
   when no_data_found
   then
   open Retailer_Ims for
         select *
           from dual
          where 1 = 2;
      return Retailer_Ims;
end;
/

CREATE OR REPLACE function             fn_Retailer_Ims(pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   Retailer_Ims       sys_refcursor;  
   
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Retailer_Ims for                                                                            
                     
                     select division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, customer_code, customer_name, db_location, market_code, market_name, route_code, route_name, retailer_code, retailer_name, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, return_value, return_slab_adjust, net_return_val, net_ims, no_of_replace_inv, replace_inv_amt
                     from mv_retailer_ims_cmonth 
                     where (division_code  =dcode or dcode='ALL' )
                     and   (region_code    =rcode or rcode='ALL' )
                     and   (area_code      =acode or acode='ALL' )
                     and   (territory_code =tcode or tcode='ALL' )
                     and   (customer_code  =ccode or ccode='ALL' )
                     order by division_code,region_code, area_code, territory_code, customer_code, market_code, route_code, retailer_code;   
    


   
    return Retailer_Ims;
    
exception
   when no_data_found
   then
   open Retailer_Ims for
         select *
           from dual
          where 1 = 2;
      return Retailer_Ims;
end;
/

CREATE OR REPLACE function FN_RETAILER_IMS_TO_DAY(pdivision_code varchar2, 
                                                              pregion_code varchar2,
                                                              parea_code varchar2,
                                                              pterritory_code varchar2,
                                                              pcustomer_code varchar2
                                                              )
   return sys_refcursor
as
   Retailer_Ims       sys_refcursor;  

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Retailer_Ims for                                                                            
        select  b.division_code, 
                b.division_name, 
                b.region_code, 
                b.region_name, 
                b.area_code,  
                b.area_name,
                b.territory_code, 
                b.territory_name,
                a.customer_code,
                b.customer_name,
                b.db_location,
                a.market_code,
                b.market_name,       
               a.route_code,
               c.route_name,      
               a.retailer_code, 
               d.retailer_name,          
               no_of_inv,
               total_inv_amt, 
               slab_adjustment, 
               net_inv_amount,
               return_value, 
               return_slab_adjust, 
               net_return_val,
               net_ims,                      
               no_of_replace_inv,
               replace_inv_amt
        from
        (
        select customer_code,
               market_code,
               route_code,
               retailer_code,           
               sum(no_of_inv) no_of_inv,
               sum(total_inv_amt) total_inv_amt, 
               sum(slab_adjustment) slab_adjustment, 
               sum(net_inv_amount) net_inv_amount,
               sum(return_value) return_value, 
               sum(return_slab_adjust) return_slab_adjust, 
               sum(net_return_val) net_return_val,
               sum(net_ims) net_ims,                      
               sum(no_of_replace_inv) no_of_replace_inv,
               sum(replace_inv_amt) replace_inv_amt
        from
           (       
                select  customer_code,
                        market_code,
                        route_code,
                        retailer_code,
                        sum (nvl(no_of_inv,0)) no_of_inv,
                        sum(nvl(total_inv_amt,0))total_inv_amt, 
                        sum(nvl(slab_adjustment,0))slab_adjustment, 
                        sum(nvl(net_inv_amount,0))net_inv_amount,
                        sum(nvl(return_value,0))return_value, 
                        sum(nvl(return_slab_adjust,0))return_slab_adjust, 
                        sum(nvl(net_return_val,0))net_return_val,
                        sum(nvl(net_inv_amount,0))-sum(nvl(net_return_val,0)) net_ims,
                        0 no_of_replace_inv,
                        0 replace_inv_amt
                        from
                           (                   
                            select  customer_code,
                                    market_code,
                                    route_code,
                                    retailer_code,
                                    count(invoice_no)no_of_inv,
                                    sum(total_inv_amt)total_inv_amt, 
                                    sum(slab_adjustment)slab_adjustment, 
                                    sum(net_inv_amount)net_inv_amount,
                                    0 return_value,
                                    0 return_slab_adjust,
                                    0 net_return_val                            
                             from
                                 (
                                 select          
                                        customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        invoice_no,
                                        nvl(grand_total,0)total_inv_amt, 
                                        nvl(slab_adjustment,0)+nvl(special_bonus_disc,0)slab_adjustment, 
                                        nvl(net_inv_amount,0)net_inv_amount                                
                                from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com  
                                where  inv_type_code='INV001'
                                and   trunc(invoice_date) = trunc(sysdate)
                                and  (customer_code = cCode or cCode='ALL')
                                                        
                                )
                            group by customer_code,market_code,route_code,retailer_code
                                                       
                                                                  
                            UNION ALL              
                                                  
                            select     b.customer_code,
                                       b.market_code,
                                       b.route_code,
                                       b.retailer_code,
                                       0 no_of_inv,
                                       0 total_inv_amt,
                                       0 slab_adjustment,
                                       0 net_inv_amount,
                                       sum(nvl(a.return_value,0)) return_value,
                                       sum(nvl(a.return_slab_amount,0))+ sum(nvl(a.special_bonus_disc,0)) return_slab_adjust,
                                       sum(nvl(net_return_val,0)) net_return_val
                            from  spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com a,spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com b
                            where a.invoice_no=b.invoice_no
                            and   b.inv_type_code='INV001'
                            and   trunc(b.invoice_date) = trunc(sysdate)
                            and  (b.customer_code = cCode or cCode='ALL')                    
                            group by  b.customer_code, b.market_code,b.route_code, b.retailer_code 
                                                    
                                                       
                            )        
                group by customer_code,market_code,route_code,retailer_code 

                UNION ALL

                select customer_code,
                       market_code,
                       route_code,
                       retailer_code,           
                       0 no_of_inv,
                       0 total_inv_amt, 
                       0 slab_adjustment, 
                       0 net_inv_amount,
                       0 return_value, 
                       0 return_slab_adjust, 
                       0 net_return_val,
                       0 net_ims,                      
                       nvl(count(invoice_no),0) no_of_replace_inv,
                       nvl(sum(nvl(replace_inv_amt,0)),0) replace_inv_amt
                    from
                        (
                          select  customer_code,
                                  market_code,
                                  route_code,
                                  retailer_code,
                                  invoice_no,
                                  nvl(net_inv_amount,0)replace_inv_amt
                        from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com  
                        where  inv_type_code='INV002'
                        and   trunc(invoice_date) = trunc(sysdate)
                        and  (customer_code = cCode or cCode='ALL')           
                    )
                group by customer_code,market_code,route_code,retailer_code
           )        
        group by customer_code,market_code,route_code,retailer_code  
        ) a,
        (
        select  distinct  
                zone_code division_code, 
                zone_name division_name, 
                area_code region_code, 
                area_name region_name, 
                belt_code area_code,  
                belt_name  area_name,
                territory_code, 
                territory_name,
                customer_code,
                customer_name,
                db_location,
                market_code, 
                market_name
        from mv_division_customer_relation
        ) b, mv_route_info c, mv_retailer_info d
        where a.market_code=b.market_code(+)
        and   a.route_code=c.route_code
        and   a.retailer_code=d.retailer_code
        and  (b.division_code = dCode or dCode='ALL')
        and  (b.region_code = rCode or rCode='ALL')
        and  (b.area_code = aCode or aCode='ALL')
        and  (b.territory_code = tCode or tCode='ALL')  
        and  (a.customer_code = cCode or cCode='ALL');

    return Retailer_Ims;
    
exception
   when no_data_found
   then
   open Retailer_Ims for
         select *
           from dual
          where 1 = 2;
      return Retailer_Ims;
end;
/

CREATE OR REPLACE function             FN_ROUTE_IMS_DATE_RANGE(pfrom_date varchar2,pto_date varchar2,pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  

   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Ims for                                                                            
        select /*+ append */  b.zone_code division_code,
                b.zone_name division_name,
                b.area_code region_code,
                b.area_name region_name,
                b.belt_code area_code,
                b.belt_name area_name,
                b.territory_code,
                b.territory_name,
                a.market_code,
                b.market_name,        
                a.customer_code,
                c.customer_name,
                c.db_location,
                a.route_code,
                b.route_name,
                a.no_of_inv,
                a.total_inv_amt, 
                a.slab_adjustment, 
                a.net_inv_amount,
                a.return_value, 
                a.return_slab_adjust, 
                a.net_return_val,
                a.net_ims,
                a.no_of_replace_inv,
                a.replace_inv_amt
        from
            (     
                select  customer_code,
                        market_code,
                        route_code,
                        nvl(no_of_inv,0) no_of_inv,
                        nvl(total_inv_amt,0)total_inv_amt, 
                        nvl(slab_adjustment,0)slab_adjustment, 
                        nvl(net_inv_amount,0)net_inv_amount,
                        nvl(return_value,0)return_value, 
                        nvl(return_slab_adjust,0)return_slab_adjust, 
                        nvl(net_return_val,0)net_return_val,
                        nvl(net_inv_amount,0)-nvl(net_return_val,0) net_ims,
                        nvl(no_of_replace_inv,0) no_of_replace_inv,
                        nvl(replace_inv_amt,0) replace_inv_amt
                from
                    (
                    
                    
                  select  customer_code,
                          market_code,
                          route_code,
                          sum(no_of_inv )no_of_inv,
                          sum(total_inv_amt)total_inv_amt, 
                          sum(slab_adjustment)slab_adjustment, 
                          sum(net_inv_amount)net_inv_amount,
                          sum(return_value)return_value, 
                          sum(return_slab_adjust)return_slab_adjust, 
                          sum(net_return_val)net_return_val,
                          sum(no_of_replace_inv) no_of_replace_inv,
                          sum(replace_inv_amt) replace_inv_amt                                                     
                    from
                        (           
                            select  customer_code,
                                    market_code,
                                    route_code,
                                    count(invoice_no)no_of_inv,
                                    sum(total_inv_amt)total_inv_amt, 
                                    sum(slab_adjustment)slab_adjustment, 
                                    sum(net_inv_amount)net_inv_amount,
                                    0 return_value,
                                    0 return_slab_adjust,
                                    0 net_return_val,
                                    0 no_of_replace_inv,
                                    0 replace_inv_amt                                                                             
                                from
                                     (                        
                                     select customer_code,
                                            market_code,
                                            route_code,
                                            invoice_no,
                                            nvl(grand_total,0)total_inv_amt, 
                                            nvl(slab_adjustment,0)+nvl(special_bonus_disc,0)slab_adjustment, 
                                            nvl(net_inv_amount,0)net_inv_amount
                                     from  vw_invoice_mst 
                                     where  inv_type_code='INV001'
                                     and  (customer_code = cCode or cCode='ALL')
                                     and trunc(invoice_date) between fDate and tDate                                 
                                    )
                                group by customer_code,market_code,route_code
                                
                                union all
                                
                                select customer_code,
                                       market_code,
                                       route_code,
                                       0 no_of_inv,
                                       0 total_inv_amt,
                                       0 slab_adjustment,
                                       0 net_inv_amount,
                                       sum(return_value)return_value, 
                                       sum(return_slab_adjust)return_slab_adjust, 
                                       sum(net_return_val)net_return_val,
                                       0 no_of_replace_inv,
                                       0 replace_inv_amt                    
                                 from 
                                    (
                                     select  b.customer_code,
                                             b.market_code,
                                             b.route_code,
                                             nvl(a.return_value,0)return_value,
                                             nvl(a.return_slab_amount,0)+ nvl(a.special_bonus_disc,0) return_slab_adjust,
                                             nvl(a.net_return_val,0)net_return_val
                                     from    vw_ret_return_mst a, vw_invoice_mst b
                                     where  a.invoice_no=b.invoice_no 
                                     and    trunc(b.invoice_date) between fDate and tDate    
                                     and    (b.customer_code = cCode or cCode='ALL') 
                                     and     b.inv_type_code='INV001'                     
                                    )                    
                               group by customer_code,market_code,route_code  
                               
                               union all
                               
                                               
                              select  customer_code,
                                      market_code,
                                      route_code,                                                            
                                      0 no_of_inv,
                                      0 total_inv_amt,
                                      0 slab_adjustment,
                                      0 net_inv_amount,
                                      0 return_value, 
                                      0 return_slab_adjust, 
                                      0 net_return_val,                                                             
                                      count(nvl(invoice_no,0)) no_of_replace_inv,
                                      sum(nvl(replace_inv_amt,0)) replace_inv_amt
                              from
                                  (
                                    select  customer_code,
                                            market_code,
                                            route_code,
                                            invoice_no,
                                            nvl(net_inv_amount,0)replace_inv_amt
                                    from    vw_invoice_mst 
                                    where   trunc(invoice_date) between fDate and tDate    
                                    and     (customer_code = cCode or cCode='ALL') 
                                    and     inv_type_code='INV002'              
                                  )
                              group by customer_code,market_code,route_code                       
                               
                                      
                        )
                    group by customer_code,market_code,route_code
                    )
                   
                   
           )a,
           (
              select  distinct
                      zone_code, 
                      zone_name, 
                      area_code, 
                      area_name, 
                      belt_code, 
                      belt_name, 
                      territory_code, 
                      territory_name, 
                      market_code, 
                      market_name, 
                      route_code, 
                      route_name
           from mv_division_retailer_relation
               
        ) b , mv_customer_info c
        where a.route_code=b.route_code(+)
        and   a.customer_code=c.customer_code(+)
        and  (b.zone_code = dCode or dCode='ALL')
        and  (b.area_code = rCode or rCode='ALL')
        and  (b.belt_code = aCode or aCode='ALL')
        and  (b.territory_code = tCode or tCode='ALL')  
        and  (a.customer_code = cCode or cCode='ALL')   
        order by division_name,region_name,area_name,territory_name,market_name,customer_name,route_name;   


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_ROUTE_IMS_TO_DAY(pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Ims for                                                                            
        select /*+ append */  b.zone_code division_code,
                b.zone_name division_name,
                b.area_code region_code,
                b.area_name region_name,
                b.belt_code area_code,
                b.belt_name area_name,
                b.territory_code,
                b.territory_name,
                a.market_code,
                b.market_name,        
                a.customer_code,
                c.customer_name,
                c.db_location,
                a.route_code,
                b.route_name,
                a.no_of_inv,
                a.total_inv_amt, 
                a.slab_adjustment, 
                a.net_inv_amount,
                a.return_value, 
                a.return_slab_adjust, 
                a.net_return_val,
                a.net_ims,
                a.no_of_replace_inv,
                a.replace_inv_amt
        from
            (     
                select  customer_code,
                        market_code,
                        route_code,
                        nvl(no_of_inv,0) no_of_inv,
                        nvl(total_inv_amt,0)total_inv_amt, 
                        nvl(slab_adjustment,0)slab_adjustment, 
                        nvl(net_inv_amount,0)net_inv_amount,
                        nvl(return_value,0)return_value, 
                        nvl(return_slab_adjust,0)return_slab_adjust, 
                        nvl(net_return_val,0)net_return_val,
                        nvl(net_inv_amount,0)-nvl(net_return_val,0) net_ims,
                        nvl(no_of_replace_inv,0) no_of_replace_inv,
                        nvl(replace_inv_amt,0) replace_inv_amt
                from
                    (
                    
                    
                  select  customer_code,
                          market_code,
                          route_code,
                          sum(no_of_inv )no_of_inv,
                          sum(total_inv_amt)total_inv_amt, 
                          sum(slab_adjustment)slab_adjustment, 
                          sum(net_inv_amount)net_inv_amount,
                          sum(return_value)return_value, 
                          sum(return_slab_adjust)return_slab_adjust, 
                          sum(net_return_val)net_return_val,
                          sum(no_of_replace_inv) no_of_replace_inv,
                          sum(replace_inv_amt) replace_inv_amt                                                     
                    from
                        (           
                            select  customer_code,
                                    market_code,
                                    route_code,
                                    count(invoice_no)no_of_inv,
                                    sum(total_inv_amt)total_inv_amt, 
                                    sum(slab_adjustment)slab_adjustment, 
                                    sum(net_inv_amount)net_inv_amount,
                                    0 return_value,
                                    0 return_slab_adjust,
                                    0 net_return_val,
                                    0 no_of_replace_inv,
                                    0 replace_inv_amt                                                                             
                                from
                                     (                        
                                     select customer_code,
                                            market_code,
                                            route_code,
                                            retailer_code,
                                            invoice_no,
                                            nvl(grand_total,0)total_inv_amt, 
                                            nvl(slab_adjustment,0)+nvl(special_bonus_disc,0)slab_adjustment, 
                                            nvl(net_inv_amount,0)net_inv_amount
                                     from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com 
                                     where  inv_type_code='INV001'
                                     and  (customer_code = cCode or cCode='ALL')
                                     and trunc(invoice_date) = trunc(sysdate)                                  
                                    )
                                group by customer_code,market_code,route_code
                                
                                union all
                                
                                select customer_code,
                                       market_code,
                                       route_code,
                                       0 no_of_inv,
                                       0 total_inv_amt,
                                       0 slab_adjustment,
                                       0 net_inv_amount,
                                       sum(return_value)return_value, 
                                       sum(return_slab_adjust)return_slab_adjust, 
                                       sum(net_return_val)net_return_val,
                                       0 no_of_replace_inv,
                                       0 replace_inv_amt                    
                                 from 
                                    (
                                     select  customer_code,
                                             market_code,
                                             route_code,
                                             retailer_code,
                                             nvl(return_value,0)return_value,
                                             nvl(return_slab_amount,0)+ nvl(special_bonus_disc,0) return_slab_adjust,
                                             nvl(net_return_val,0)net_return_val
                                     from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com
                                     where   trunc(invoice_date) =  trunc(sysdate) 
                                     and    (customer_code = cCode or cCode='ALL') 
                                     and     inv_type_code='INV001'                     
                                    )                    
                               group by customer_code,market_code,route_code  
                               
                               union all
                               
                                               
                              select  customer_code,
                                      market_code,
                                      route_code,                                                            
                                      0 no_of_inv,
                                      0 total_inv_amt,
                                      0 slab_adjustment,
                                      0 net_inv_amount,
                                      0 return_value, 
                                      0 return_slab_adjust, 
                                      0 net_return_val,                                                             
                                      count(nvl(invoice_no,0)) no_of_replace_inv,
                                      sum(nvl(replace_inv_amt,0)) replace_inv_amt
                              from
                                  (
                                    select  customer_code,
                                            market_code,
                                            route_code,
                                            retailer_code,
                                            invoice_no,
                                            nvl(net_inv_amount,0)replace_inv_amt
                                    from    spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com 
                                    where   trunc(invoice_date) = trunc(sysdate) 
                                    and     (customer_code = cCode or cCode='ALL') 
                                    and     inv_type_code='INV002'              
                                  )
                              group by customer_code,market_code,route_code                       
                               
                                      
                        )
                    group by customer_code,market_code,route_code
                    )
                   
                   
           )a,
           (
              select  distinct
                      zone_code, 
                      zone_name, 
                      area_code, 
                      area_name, 
                      belt_code, 
                      belt_name, 
                      territory_code, 
                      territory_name, 
                      market_code, 
                      market_name, 
                      route_code, 
                      route_name
           from mv_division_retailer_relation
               
        ) b , mv_customer_info c
        where a.route_code=b.route_code(+)
        and   a.customer_code=c.customer_code(+)
        and  (b.zone_code = dCode or dCode='ALL')
        and  (b.area_code = rCode or rCode='ALL')
        and  (b.belt_code = aCode or aCode='ALL')
        and  (b.territory_code = tCode or tCode='ALL')  
        and  (a.customer_code = cCode or cCode='ALL')   
        order by division_name,region_name,area_name,territory_name,market_name,customer_name,route_name;   


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_ROUTE_BRAND_IMS_DATE_RANGE(pfrom_date varchar2,pto_date varchar2,pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Ims for                                                                            
        select /*+ append */  
                b.zone_code division_code,
                b.zone_name division_name,
                b.area_code region_code,
                b.area_name region_name,
                b.belt_code area_code,
                b.belt_name area_name,
                b.territory_code,
                b.territory_name,
                a.market_code,
                b.market_name,        
                a.customer_code,
                b.customer_name,
                b.db_location ,
                a.route_code,
                c.route_name,
                a.brand_code,
                d.brand_name,
                a.invoice_amt,
                a.replace_inv_amt,
                a.return_value,
                a.net_ims
        from
        (            
                    
                select customer_code,
                       market_code,
                       route_code,
                       brand_code,
                       invoice_amt, 
                       replace_inv_amt,
                       nvl(return_value,0) return_value,    
                       nvl(invoice_amt,0) -   nvl(return_value,0) net_ims                        
                from
                (
                  select    customer_code,
                            market_code,
                            route_code,
                            brand_code,
                            sum(invoice_amt) invoice_amt,  
                            sum(bonus_price_discount) bonus_price_discount,                          
                            sum(return_value) return_value,
                            sum(bns_disc_ret) bns_disc_ret,
                            sum(replace_inv_amt) replace_inv_amt                 
                    from
                        (    

                           select m.customer_code,
                                  m.market_code,
                                  m.route_code,
                                  p.brand_code,  
                                  sum(NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0) ) invoice_amt,                
                                  sum(bonus_price_discount) bonus_price_discount,                  
                                  0 return_value,
                                  0 bns_disc_ret, 
                                  0 replace_inv_amt                    
                            from vw_invoice_mst m,  vw_invoice_dtl  d ,mv_product_info p
                            where m.inv_mst_slno=d.inv_mst_slno  
                            and   d.product_code  = p.product_code
                            and   m.inv_type_code='INV001'
                            and  (m.customer_code = cCode or cCode='ALL')
                            and  trunc(m.invoice_date) between fDate and tDate        
                            group by m.customer_code,m.market_code,m.route_code,p.brand_code            

                        
                        
                        union all
                        
                        

                            select   i.customer_code,
                                     i.market_code,
                                     i.route_code,
                                     p.brand_code,
                                     0 invoice_amt,
                                     0 bonus_price_discount,                     
                                     sum(nvl(d.return_value,0)) return_value,
                                     sum(nvl(d.bonus_price_discount,0)) bns_disc_ret,
                                     0 replace_inv_amt
                            from     vw_ret_return_mst m, vw_ret_return_dtl d ,vw_invoice_mst i,mv_product_info p
                            where    m.ret_recv_mst_slno = d.ret_recv_mst_slno
                            and      m.invoice_no=i.invoice_no
                            and      i.inv_type_code='INV001'
                            and      (i.customer_code = cCode or cCode='ALL')
                            and      trunc(i.invoice_date) between fDate and tDate             
                            and      d.product_code  = p.product_code      
                            group by  i.customer_code,i.market_code,i.route_code,p.brand_code

                        
                         union all
                         
                         
                             
                        select  m.customer_code,
                                m.market_code,
                                m.route_code,
                                p.brand_code,                                
                                0 invoice_amt, 
                                0 bonus_price_discount,               
                                0 return_value,
                                0 bns_disc_ret,                 
                                sum(nvl(d.net_val,0)) replace_inv_amt
                        from vw_invoice_mst m ,vw_invoice_dtl  d ,mv_product_info p
                        where m.inv_mst_slno  = d.inv_mst_slno  
                        and   d.product_code  = p.product_code                     
                        and   m.inv_type_code='INV002' 
                        and  (m.customer_code = cCode or cCode='ALL')
                        and   trunc(m.invoice_date) between fDate and tDate               
                        group by  m.customer_code,m.market_code,m.route_code,p.brand_code   
                        
                        
                        
                        )
                        group by customer_code,market_code,route_code,brand_code
                )
        )a,   
         (
              select  distinct
                      zone_code, 
                      zone_name, 
                      area_code, 
                      area_name, 
                      belt_code, 
                      belt_name, 
                      territory_code, 
                      territory_name, 
                      market_code, 
                      market_name,
                      customer_code, 
                      customer_name, 
                      db_location
               from mv_division_customer_relation
                   
        ) b, mv_route_info c,mv_brand_info d
        where a.market_code=b.market_code(+)
        and   a.route_code=c.route_code(+)
        and   a.brand_code=d.brand_code(+)

        and  (b.zone_code = dCode or dCode='ALL')
        and  (b.area_code = rCode or rCode='ALL')
        and  (b.belt_code = aCode or aCode='ALL')
        and  (b.territory_code = tCode or tCode='ALL')  
        and  (a.customer_code = cCode or cCode='ALL')   
        order by division_name,region_name,area_name,territory_name,market_name,customer_name,route_name,brand_name;


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_ROUTE_BRAND_IMS_TODAY(pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Ims for                                                                            
        select /*+ append */  
                b.zone_code division_code,
                b.zone_name division_name,
                b.area_code region_code,
                b.area_name region_name,
                b.belt_code area_code,
                b.belt_name area_name,
                b.territory_code,
                b.territory_name,
                a.market_code,
                b.market_name,        
                a.customer_code,
                b.customer_name,
                b.db_location ,
                a.route_code,
                c.route_name,
                a.brand_code,
                d.brand_name,
                a.invoice_amt,
                a.replace_inv_amt,
                a.return_value,
                a.net_ims
        from
        (            
                    
                select customer_code,
                       market_code,
                       route_code,
                       brand_code,
                       invoice_amt, 
                       replace_inv_amt,
                       nvl(return_value,0) return_value,    
                       nvl(invoice_amt,0) -   nvl(return_value,0) net_ims                        
                from
                (
                  select    customer_code,
                            market_code,
                            route_code,
                            brand_code,
                            sum(invoice_amt) invoice_amt,  
                            sum(bonus_price_discount) bonus_price_discount,                          
                            sum(return_value) return_value,
                            sum(bns_disc_ret) bns_disc_ret,
                            sum(replace_inv_amt) replace_inv_amt                 
                    from
                        (    

                           select m.customer_code,
                                  m.market_code,
                                  m.route_code,
                                  p.brand_code,  
                                  sum(net_val) invoice_amt,                
                                  sum(bonus_price_discount) bonus_price_discount,                  
                                  0 return_value,
                                  0 bns_disc_ret, 
                                  0 replace_inv_amt                    
                            from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d ,mv_product_info p
                            where m.inv_mst_slno=d.inv_mst_slno  
                            and   d.product_code  = p.product_code
                            and   m.inv_type_code='INV001'
                            and  (m.customer_code = cCode or cCode='ALL')
                            and  trunc(m.invoice_date) = trunc(sysdate)        
                            group by m.customer_code,m.market_code,m.route_code,p.brand_code            

                        
                        
                        union all
                        
                        

                            select   m.customer_code,
                                     m.market_code,
                                     m.route_code,
                                     p.brand_code,
                                     0 invoice_amt,
                                     0 bonus_price_discount,                     
                                     sum(nvl(d.return_value,0)) return_value,
                                     sum(nvl(d.bonus_price_discount,0)) bns_disc_ret,
                                     0 replace_inv_amt
                            from     spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d ,mv_product_info p
                            where    m.ret_recv_mst_slno = d.ret_recv_mst_slno
                            and      m.inv_type_code='INV001'
                            and      (m.customer_code = cCode or cCode='ALL')
                            and      trunc(m.invoice_date) = trunc(sysdate)         
                            and      d.product_code  = p.product_code      
                            group by  m.customer_code,m.market_code,m.route_code,p.brand_code

                        
                         union all
                         
                         
                             
                        select  m.customer_code,
                                m.market_code,
                                m.route_code,
                                p.brand_code,                                
                                0 invoice_amt, 
                                0 bonus_price_discount,               
                                0 return_value,
                                0 bns_disc_ret,                 
                                sum(nvl(d.net_val,0)) replace_inv_amt
                        from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m ,spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com  d ,mv_product_info p
                        where m.inv_mst_slno  = d.inv_mst_slno  
                        and   d.product_code  = p.product_code                     
                        and   m.inv_type_code='INV002' 
                        and  (m.customer_code = cCode or cCode='ALL')
                        and   trunc(m.invoice_date) = trunc(sysdate)          
                        group by  m.customer_code,m.market_code,m.route_code,p.brand_code   
                        
                        
                        
                        )
                        group by customer_code,market_code,route_code,brand_code
                )
        )a,   
         (
              select  distinct
                      zone_code, 
                      zone_name, 
                      area_code, 
                      area_name, 
                      belt_code, 
                      belt_name, 
                      territory_code, 
                      territory_name, 
                      market_code, 
                      market_name,
                      customer_code, 
                      customer_name, 
                      db_location
               from mv_division_customer_relation
                   
        ) b, mv_route_info c,mv_brand_info d
        where a.market_code=b.market_code(+)
        and   a.route_code=c.route_code(+)
        and   a.brand_code=d.brand_code(+)

        and  (b.zone_code = dCode or dCode='ALL')
        and  (b.area_code = rCode or rCode='ALL')
        and  (b.belt_code = aCode or aCode='ALL')
        and  (b.territory_code = tCode or tCode='ALL')  
        and  (a.customer_code = cCode or cCode='ALL')   
        order by division_name,region_name,area_name,territory_name,market_name,customer_name,route_name,brand_name;


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_FSO_TIME_KEEPING_DATE_RANGE(   
                                                            pfrom_date varchar2,
                                                            pto_date varchar2,
                                                            pdivision_code varchar2, 
                                                            pregion_code varchar2,
                                                            parea_code varchar2,
                                                            pterritory_code varchar2,
                                                            pcustomer_code varchar2,
                                                            psr_code varchar2
                                                            )
   return sys_refcursor
as
   fso_wise_ims       sys_refcursor;  
   
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   sCode varchar2(100)    :=psr_code;   

begin
   open fso_wise_ims for   
                    select d.zone_code division_code, 
                           d.zone_name division_name, 
                           d.area_code region_code, 
                           d.area_name region_name, 
                           d.belt_code area_code, 
                           d.belt_name area_name, 
                           d.territory_code, 
                           d.territory_name,  
                           d.db_location,
                           a.customer_code,
                           d.customer_name,               
                           a.employee_code,
                           f.employee_name,
                           a.market_code,
                           d.market_name,                                 
                           a.route_code,
                           e.route_name,
                           a.retailer_code,
                           g.retailer_name,                           
                           to_char(a.order_date,'MM/DD/RRRR')order_date,
                           to_char(a.delivery_date,'MM/DD/RRRR') delivery_date,
                           a.order_time,
                           a.order_no,
                           decode (a.order_type,'INV001','Normal','INV002','Replacement')order_type,
                           decode(a.invoice_status,'C','Complete','I','Incomplete')invoice_status,
                           a.number_of_product,
                           a.order_value,
                           b.total_route_retailer,
                           c.first_order,
                           c.first_order_time,
                           last_order,
                           last_order_time
                    from
                    (  
                    select a.customer_code,
                           a.employee_code,
                           a.retailer_code,
                           a.market_code,
                           a.route_code,
                           a.order_date,
                           a.delivery_date,
                           to_char(a.order_actual_datetime,'HH:MI:SS AM') order_time,
                           a.order_no,
                           a.order_type,
                           a.invoice_status,
                           count (b.product_code) number_of_product,
                           sum (decode(b.revised_order_qty,null, b.order_qty,b.revised_order_qty)* nvl (product_price, 0))order_value
                    from   mv_order_mst a, mv_order_dtl b
                    where  a.order_mst_slno  = b.order_mst_slno   
                    and    trunc(order_date) between fdate and tdate
                    group by a.customer_code,a.employee_code,a.market_code,a.route_code,a.order_actual_datetime,a.retailer_code,
                             a.order_date,a.delivery_date,a.order_type,a.invoice_status,a.order_no
                    )a,         
                    (
                    select route_code,
                           count (retailer_code) total_route_retailer
                    from mv_division_retailer_relation
                    group by route_code
                    ) b,
                    (         
                    select a.employee_code, 
                           a.order_date,    
                           min (a.order_no) first_order,
                           to_char(min(a.order_actual_datetime),'HH:MI:SS AM')first_order_time,
                           max(a.order_no) last_order,
                           to_char(max(a.order_actual_datetime),'HH:MI:SS AM')last_order_time
                    from mv_order_mst a
                    where trunc(order_date) between fdate and tdate
                    group by a.employee_code,a.order_date
                    )c,mv_division_customer_relation d,mv_route_info e,mv_employee_info f,mv_retailer_info g
                    where a.route_code=b.route_code(+)
                    and   a.order_date=c.order_date
                    and   a.employee_code=c.employee_code
                    and   a.market_code=d.market_code(+)
                    and   a.route_code=e.route_code
                    and   a.employee_code=f.employee_code
                    and   a.retailer_code=g.retailer_code  
                    and   (a.employee_code = sCode or sCode='ALL')
                    and   (d.zone_code = dCode or dCode='ALL')
                    and   (d.area_code = rCode or rCode='ALL')
                    and   (d.belt_code = aCode or aCode='ALL')
                    and   (d.territory_code = tCode or tCode='ALL')
                    and   (a.customer_code = cCode or cCode='ALL');                         
    
    


   
    return fso_wise_ims;
    
exception
   when no_data_found
   then
   open fso_wise_ims for
         select *
           from dual
          where 1 = 2;
      return fso_wise_ims;
end;
/

CREATE OR REPLACE function             FN_INVOICE_PROD_IMS_TODAY (pdivision_code varchar2, 
                                                                  pregion_code varchar2,
                                                                  parea_code varchar2,
                                                                  pterritory_code varchar2,
                                                                  pcustomer_code varchar2,                                                                  
                                                                  pbase_product_code varchar2,
                                                                  pbrand_code varchar2,
                                                                  pcategory_code varchar2,                                                                                                                                    
                                                                  pproduct_code varchar2,
                                                                  puser_id number
                                                                  )
   return sys_refcursor
as
   Ims       sys_refcursor;  
   

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   pCode varchar2(100)    :=pproduct_code;
   
   vbase_product_code varchar2(100)    :=pbase_product_code;
   vbrand_code varchar2(100)           :=pbrand_Code;
   vcategory_code varchar2(100)        :=pcategory_code;   
   
   userId   number        :=puser_id;
   vCount   number:=0;   

begin

   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 


     if vCount = 0 then 
     
     
           
            begin
            
            
                   open Ims for                                                                            

                               SELECT b.zone_code division_code,
                                      b.zone_name division_name,
                                      b.area_code region_code,
                                      b.area_name region_name,
                                      b.belt_code area_code,
                                      b.belt_name area_name,
                                      b.territory_code,
                                      b.territory_name,
                                      a.market_code,
                                      b.market_name,
                                      a.customer_code,
                                      b.customer_name,
                                      b.db_location,
                                      a.route_code,
                                      c.route_name,
                                      a.retailer_code,
                                      d.retailer_name,
                                      p.base_product_code,
                                      f.base_product_name,
                                      p.brand_code,
                                      g.brand_name,
                                      p.product_category product_category_code,
                                      h.category_name product_category_name,
                                      a.invoice_no,
                                      to_char(inv.invoice_date,'MM/DD/RRRR HH:MI:SS AM') invoice_date,
                                      a.product_code,
                                      p.product_name,
                                      p.pack_size,
                                      i.unit_tp product_price,
                                      NVL (a.invoice_amt, 0) invoice_amt,
                                      NVL (a.issued_qty, 0) sales_qty,
                                      NVL (a.bonus_qty, 0) sales_bonus_qty,
                                      NVL (a.bonus_price_discount, 0) bonus_price_discount,
                                      NVL (a.replace_qty, 0) replace_qty,
                                      NVL (a.return_sales_qty, 0) return_sales_qty,
                                      NVL (a.return_bns_qty, 0) return_bns_qty,
                                      NVL (a.issued_qty, 0) - NVL (a.return_sales_qty, 0) ims_sales_qty,
                                      NVL (a.bonus_qty, 0) - NVL (a.return_bns_qty, 0) ims_bns_qty,
                                      NVL (a.return_value, 0) return_value,
                                      NVL (a.bns_disc_ret, 0) bns_disc_ret,
                                      NVL (a.bonus_price_discount, 0) - NVL (a.bns_disc_ret, 0)
                                         discount_val,
                                      NVL (a.invoice_amt, 0) - NVL (return_value, 0) net_ims,
                                      NVL (a.number_of_invoice, 0) number_of_invoice,
                                      NVL (e.target_qty, 0) target_qty
                                 FROM (  SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                product_code,
                                                SUM (NVL (issued_qty, 0)) issued_qty,
                                                SUM (NVL (bonus_qty, 0)) bonus_qty,
                                                SUM (NVL (bonus_price_discount, 0)) bonus_price_discount,
                                                SUM (NVL (invoice_amt, 0)) invoice_amt,
                                                SUM (NVL (replace_qty, 0)) replace_qty,
                                                SUM (NVL (return_sales_qty, 0)) return_sales_qty,
                                                SUM (NVL (return_value, 0)) return_value,
                                                SUM (NVL (return_bns_qty, 0)) return_bns_qty,
                                                SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                                                SUM (NVL (number_of_invoice, 0)) number_of_invoice
                                           FROM (  SELECT customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code,
                                                          SUM (issued_qty) issued_qty,
                                                            SUM (bonus_qty)
                                                          + SUM (trade_qty)
                                                          + SUM (spec_bonus_qty)
                                                          + SUM (display_bonus_qty)
                                                          + SUM (trade_bonus_qty)
                                                             bonus_qty,
                                                          SUM (bonus_price_discount) bonus_price_discount,
                                                          SUM (total) invoice_amt,
                                                          SUM (replace_qty) replace_qty,
                                                          0 return_sales_qty,
                                                          0 return_value,
                                                          0 return_bns_qty,
                                                          0 bns_disc_ret,
                                                          0 number_of_invoice
                                                     FROM (SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  NVL (d.issued_qty, 0) issued_qty,
                                                                  0 bonus_qty,
                                                                  NVL (d.bonus_price_discount, 0)
                                                                     bonus_price_discount,
                                                                    NVL (d.total_val, 0)
                                                                  - (  NVL (d.bonus_price_discount, 0)
                                                                     + NVL (rtl_discount_val, 0))
                                                                     total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                   0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND m.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  i.product_code,
                                                                  0 issued_qty,
                                                                  NVL (i.bonus_qty, 0) bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND d.inv_dtl_slno = i.inv_dtl_slno
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                  AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  i.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  NVL (i.trade_qty, 0) trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_trade@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND d.inv_dtl_slno = i.inv_dtl_slno
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                  AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  NVL (d.spec_bonus_qty, 0) spec_bonus_qty,
                                                                   0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_spec_bonus@dl_spasfbl.squaregroup.com d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                            AND m.inv_type_code = 'INV001'
                                                            UNION ALL
                                                            SELECT    m.customer_code,
                                                                      m.market_code,
                                                                      m.route_code,
                                                                      m.retailer_code,
                                                                      m.invoice_no,
                                                                      d.product_code,
                                                                      0 issued_qty,
                                                                      0 bonus_qty,
                                                                      0 bonus_price_discount,
                                                                      0 total,
                                                                      0 trade_qty,
                                                                      0 spec_bonus_qty,
                                                                      nvl (d.display_bonus_qty, 0)display_bonus_qty,
                                                                      0 trade_bonus_qty,
                                                                      0 replace_qty
                                                                 FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_display_bonus@dl_spasfbl.squaregroup.com d
                                                                WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                and  (m.customer_code = cCode or cCode='ALL')
                                                                and  (d.product_code =  pCode or pCode='ALL')
                                                                AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                AND m.inv_type_code = 'INV001'
                                                                UNION ALL
                                                                SELECT  m.customer_code,
                                                                      m.market_code,
                                                                      m.route_code,
                                                                      m.retailer_code,
                                                                      m.invoice_no,
                                                                      d.product_code,
                                                                      0 issued_qty,
                                                                      0 bonus_qty,
                                                                      0 bonus_price_discount,
                                                                      0 total,
                                                                      0 trade_qty,
                                                                      0 spec_bonus_qty,
                                                                      0 display_bonus_qty,
                                                                      nvl (d.trade_bonus_qty, 0)trade_bonus_qty,
                                                                      0 replace_qty
                                                                 FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_trade_bonus@dl_spasfbl.squaregroup.com d
                                                                WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                and  (m.customer_code = cCode or cCode='ALL')
                                                                and  (d.product_code =  pCode or pCode='ALL')
                                                                AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  NVL (issued_qty, 0) replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                  AND m.inv_type_code = 'INV002')
                                                 GROUP BY customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code
                                                 UNION ALL
                                                   SELECT customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code,
                                                          0 issued_qty,
                                                          0 bonus_qty,
                                                          0 bonus_price_discount,
                                                          0 invoice_amt,
                                                          0 replace_qty,
                                                          SUM (NVL (return_qty, 0)) return_sales_qty,
                                                          SUM (NVL (return_value, 0)) return_value,
                                                            SUM (NVL (ret_bns_qty, 0))
                                                          + SUM (NVL (ret_trd_qty, 0))
                                                          + SUM (NVL (spec_bonus_qty, 0))
                                                             return_bns_qty,
                                                          SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                                                          0 number_of_invoice
                                                     FROM (SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  NVL (d.return_qty, 0) return_qty,
                                                                  NVL (d.return_value, 0) return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  NVL (bonus_price_discount, 0) bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  b.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  NVL (b.bonus_qty, 0) ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,
                                                                  mv_ret_return_bonus b,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND d.ret_recv_dtl_slno =
                                                                         b.ret_recv_dtl_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  b.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  NVL (b.trade_qty, 0) ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com b,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND d.ret_recv_dtl_slno =
                                                                         b.ret_recv_dtl_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  NVL (d.spec_bonus_qty, 0) spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_spec_bonus@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                                  )
                                                 GROUP BY customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code
                                       )
                                       GROUP BY customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                product_code) a,
                                      (
                                       SELECT market_code, product_code, target_qty
                                         FROM mv_target_l3years
                                        WHERE (year || month_code) between to_char(to_date(sysdate,'dd/mm/rrrr'),'rrrrmm') and to_char(to_date(sysdate,'dd/mm/rrrr'),'rrrrmm')
                                        and  (product_code =  pCode or pCode='ALL') 
                                      ) e,
                                      mv_division_customer_relation b,
                                      mv_route_info c,
                                      mv_retailer_info d,
                                      mv_product_info p,
                                      mv_base_product_info f,
                                      mv_brand_info g,
                                      mv_category_info h,
                                      mv_product_price i,
                                      spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com inv
                                WHERE     a.market_code = b.market_code(+)
                                      AND a.route_code = c.route_code
                                      AND a.retailer_code = d.retailer_code
                                      AND a.market_code = e.market_code(+)
                                      AND a.product_code = e.product_code(+)
                                      AND a.product_code = p.product_code(+)
                                      AND p.base_product_code = f.base_product_code
                                      AND p.brand_code = g.brand_code
                                      AND p.product_category = h.category_code
                                      AND a.product_code = i.product_code
                                      AND a.invoice_no = inv.invoice_no
                                      and  (b.zone_code = dCode or dCode='ALL')
                                      and  (b.area_code = rCode or rCode='ALL')
                                      and  (b.belt_code = aCode or aCode='ALL')
                                      and  (b.territory_code = tCode or tCode='ALL')  
                                      and  (a.customer_code = cCode or cCode='ALL')                             
                                      and  (p.base_product_code =  vbase_product_code or vbase_product_code='ALL')   
                                      and  (p.brand_code =  vbrand_code or vbrand_code='ALL')   
                                      and  (p.product_category =  vcategory_code or vcategory_code='ALL')                                                          
                                      and  (a.product_code =  pCode or pCode='ALL'); 
            
            
            end;
           

     
     elsif vCount > 0 then
          
          begin
          
                   open Ims for                                                                            

                               SELECT b.zone_code division_code,
                                      b.zone_name division_name,
                                      b.area_code region_code,
                                      b.area_name region_name,
                                      b.belt_code area_code,
                                      b.belt_name area_name,
                                      b.territory_code,
                                      b.territory_name,
                                      a.market_code,
                                      b.market_name,
                                      a.customer_code,
                                      b.customer_name,
                                      b.db_location,
                                      a.route_code,
                                      c.route_name,
                                      a.retailer_code,
                                      d.retailer_name,
                                      p.base_product_code,
                                      f.base_product_name,
                                      p.brand_code,
                                      g.brand_name,
                                      p.product_category product_category_code,
                                      h.category_name product_category_name,
                                      a.invoice_no,
                                      TO_DATE (inv.invoice_date, 'dd/mm/rrrr') invoice_date,
                                      a.product_code,
                                      p.product_name,
                                      p.pack_size,
                                      i.unit_tp product_price,
                                      NVL (a.invoice_amt, 0) invoice_amt,
                                      NVL (a.issued_qty, 0) sales_qty,
                                      NVL (a.bonus_qty, 0) sales_bonus_qty,
                                      NVL (a.bonus_price_discount, 0) bonus_price_discount,
                                      NVL (a.replace_qty, 0) replace_qty,
                                      NVL (a.return_sales_qty, 0) return_sales_qty,
                                      NVL (a.return_bns_qty, 0) return_bns_qty,
                                      NVL (a.issued_qty, 0) - NVL (a.return_sales_qty, 0) ims_sales_qty,
                                      NVL (a.bonus_qty, 0) - NVL (a.return_bns_qty, 0) ims_bns_qty,
                                      NVL (a.return_value, 0) return_value,
                                      NVL (a.bns_disc_ret, 0) bns_disc_ret,
                                      NVL (a.bonus_price_discount, 0) - NVL (a.bns_disc_ret, 0)
                                         discount_val,
                                      NVL (a.invoice_amt, 0) - NVL (return_value, 0) net_ims,
                                      NVL (a.number_of_invoice, 0) number_of_invoice,
                                      NVL (e.target_qty, 0) target_qty
                                 FROM (  SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                product_code,
                                                SUM (NVL (issued_qty, 0)) issued_qty,
                                                SUM (NVL (bonus_qty, 0)) bonus_qty,
                                                SUM (NVL (bonus_price_discount, 0)) bonus_price_discount,
                                                SUM (NVL (invoice_amt, 0)) invoice_amt,
                                                SUM (NVL (replace_qty, 0)) replace_qty,
                                                SUM (NVL (return_sales_qty, 0)) return_sales_qty,
                                                SUM (NVL (return_value, 0)) return_value,
                                                SUM (NVL (return_bns_qty, 0)) return_bns_qty,
                                                SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                                                SUM (NVL (number_of_invoice, 0)) number_of_invoice
                                           FROM (  SELECT customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code,
                                                          SUM (issued_qty) issued_qty,
                                                            SUM (bonus_qty)
                                                          + SUM (trade_qty)
                                                          + SUM (spec_bonus_qty)
                                                          + SUM (display_bonus_qty)
                                                          + SUM (trade_bonus_qty)
                                                             bonus_qty,
                                                          SUM (bonus_price_discount) bonus_price_discount,
                                                          SUM (total) invoice_amt,
                                                          SUM (replace_qty) replace_qty,
                                                          0 return_sales_qty,
                                                          0 return_value,
                                                          0 return_bns_qty,
                                                          0 bns_disc_ret,
                                                          0 number_of_invoice
                                                     FROM (SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  NVL (d.issued_qty, 0) issued_qty,
                                                                  0 bonus_qty,
                                                                  NVL (d.bonus_price_discount, 0)
                                                                     bonus_price_discount,
                                                                    NVL (d.total_val, 0)
                                                                  - (  NVL (d.bonus_price_discount, 0)
                                                                     + NVL (rtl_discount_val, 0))
                                                                     total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND m.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  i.product_code,
                                                                  0 issued_qty,
                                                                  NVL (i.bonus_qty, 0) bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND d.inv_dtl_slno = i.inv_dtl_slno
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                  AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  i.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  NVL (i.trade_qty, 0) trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_trade@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                  AND d.inv_dtl_slno = i.inv_dtl_slno
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                  AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  NVL (d.spec_bonus_qty, 0) spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  0 replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_spec_bonus@dl_spasfbl.squaregroup.com d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                            AND TRUNC (m.invoice_date)  = trunc(sysdate)
                                                            AND m.inv_type_code = 'INV001'
                                                            UNION ALL
                                                            SELECT    m.customer_code,
                                                                      m.market_code,
                                                                      m.route_code,
                                                                      m.retailer_code,
                                                                      m.invoice_no,
                                                                      d.product_code,
                                                                      0 issued_qty,
                                                                      0 bonus_qty,
                                                                      0 bonus_price_discount,
                                                                      0 total,
                                                                      0 trade_qty,
                                                                      0 spec_bonus_qty,
                                                                      nvl (d.display_bonus_qty, 0)display_bonus_qty,
                                                                      0 trade_bonus_qty,
                                                                      0 replace_qty
                                                                 FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_display_bonus@dl_spasfbl.squaregroup.com d
                                                                WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                and  (m.customer_code = cCode or cCode='ALL')
                                                                and  (d.product_code =  pCode or pCode='ALL')
                                                                and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                AND m.inv_type_code = 'INV001'
                                                                UNION ALL
                                                                SELECT  m.customer_code,
                                                                      m.market_code,
                                                                      m.route_code,
                                                                      m.retailer_code,
                                                                      m.invoice_no,
                                                                      d.product_code,
                                                                      0 issued_qty,
                                                                      0 bonus_qty,
                                                                      0 bonus_price_discount,
                                                                      0 total,
                                                                      0 trade_qty,
                                                                      0 spec_bonus_qty,
                                                                      0 display_bonus_qty,
                                                                      nvl (d.trade_bonus_qty, 0)trade_bonus_qty,
                                                                      0 replace_qty
                                                                 FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_trade_bonus@dl_spasfbl.squaregroup.com d
                                                                WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                                and  (m.customer_code = cCode or cCode='ALL')
                                                                and  (d.product_code =  pCode or pCode='ALL')
                                                                and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                AND m.inv_type_code = 'INV001'
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 issued_qty,
                                                                  0 bonus_qty,
                                                                  0 bonus_price_discount,
                                                                  0 total,
                                                                  0 trade_qty,
                                                                  0 spec_bonus_qty,
                                                                  0 display_bonus_qty,
                                                                  0 trade_bonus_qty,
                                                                  NVL (issued_qty, 0) replace_qty
                                                             FROM spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m, spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                                            WHERE     m.inv_mst_slno = d.inv_mst_slno
                                                            and  (m.customer_code = cCode or cCode='ALL')
                                                            and  (d.product_code =  pCode or pCode='ALL')
                                                            and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (m.invoice_date) = trunc(sysdate)
                                                                  AND m.inv_type_code = 'INV002')
                                                 GROUP BY customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code
                                                 UNION ALL
                                                   SELECT customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code,
                                                          0 issued_qty,
                                                          0 bonus_qty,
                                                          0 bonus_price_discount,
                                                          0 invoice_amt,
                                                          0 replace_qty,
                                                          SUM (NVL (return_qty, 0)) return_sales_qty,
                                                          SUM (NVL (return_value, 0)) return_value,
                                                            SUM (NVL (ret_bns_qty, 0))
                                                          + SUM (NVL (ret_trd_qty, 0))
                                                          + SUM (NVL (spec_bonus_qty, 0))
                                                             return_bns_qty,
                                                          SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                                                          0 number_of_invoice
                                                     FROM (SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  NVL (d.return_qty, 0) return_qty,
                                                                  NVL (d.return_value, 0) return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  NVL (bonus_price_discount, 0) bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  b.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  NVL (b.bonus_qty, 0) ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,
                                                                  mv_ret_return_bonus b,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND d.ret_recv_dtl_slno =
                                                                         b.ret_recv_dtl_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  b.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  NVL (b.trade_qty, 0) ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  0 spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com b,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND d.ret_recv_dtl_slno =
                                                                         b.ret_recv_dtl_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                           UNION ALL
                                                           SELECT m.customer_code,
                                                                  m.market_code,
                                                                  m.route_code,
                                                                  m.retailer_code,
                                                                  m.invoice_no,
                                                                  d.product_code,
                                                                  0 return_qty,
                                                                  0 return_value,
                                                                  0 ret_bns_qty,
                                                                  0 ret_trd_qty,
                                                                  0 bns_disc_ret,
                                                                  NVL (d.spec_bonus_qty, 0) spec_bonus_qty
                                                             FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m,
                                                                  spa_sfbl.ret_return_spec_bonus@dl_spasfbl.squaregroup.com d,
                                                                  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                                            WHERE     m.ret_recv_mst_slno =
                                                                         d.ret_recv_mst_slno
                                                                  AND m.invoice_no = i.invoice_no
                                                                  AND i.inv_type_code = 'INV001'
                                                                  and  (m.customer_code = cCode or cCode='ALL')
                                                                  and  (d.product_code =  pCode or pCode='ALL')
                                                                  and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                  AND TRUNC (i.invoice_date) = trunc(sysdate)
                                                                  )
                                                 GROUP BY customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          product_code
                                       )
                                       GROUP BY customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                product_code) a,
                                      (
                                       SELECT market_code, product_code, target_qty
                                         FROM mv_target_l3years
                                        WHERE (year || month_code) between to_char(to_date(sysdate,'dd/mm/rrrr'),'rrrrmm') and to_char(to_date(sysdate,'dd/mm/rrrr'),'rrrrmm')
                                        and  (product_code =  pCode or pCode='ALL') 
                                        and   product_code in (select product_code from user_product_dtl where user_id=userId)
                                      ) e,
                                      mv_division_customer_relation b,
                                      mv_route_info c,
                                      mv_retailer_info d,
                                      mv_product_info p,
                                      mv_base_product_info f,
                                      mv_brand_info g,
                                      mv_category_info h,
                                      mv_product_price i,
                                      spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com inv
                                WHERE     a.market_code = b.market_code(+)
                                      AND a.route_code = c.route_code
                                      AND a.retailer_code = d.retailer_code
                                      AND a.market_code = e.market_code(+)
                                      AND a.product_code = e.product_code(+)
                                      AND a.product_code = p.product_code(+)
                                      AND p.base_product_code = f.base_product_code
                                      AND p.brand_code = g.brand_code
                                      AND p.product_category = h.category_code
                                      AND a.product_code = i.product_code
                                      AND a.invoice_no = inv.invoice_no
                                      and  (b.zone_code = dCode or dCode='ALL')
                                      and  (b.area_code = rCode or rCode='ALL')
                                      and  (b.belt_code = aCode or aCode='ALL')
                                      and  (b.territory_code = tCode or tCode='ALL')  
                                      and  (a.customer_code = cCode or cCode='ALL')                             
                                      and  (p.base_product_code =  vbase_product_code or vbase_product_code='ALL')   
                                      and  (p.brand_code =  vbrand_code or vbrand_code='ALL')   
                                      and  (p.product_category =  vcategory_code or vcategory_code='ALL')                                                          
                                      and  (a.product_code =  pCode or pCode='ALL'); 
                   
          end;
          
      
      
      end if;         


    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_RET_BONUS_SLAB_ADJ_TODAY(
                                                                 pdivision_code varchar2, 
                                                                 pregion_code varchar2,
                                                                 parea_code varchar2,
                                                                 pterritory_code varchar2,
                                                                 pcustomer_code varchar2,
                                                                 pbonus_type varchar2
                                                                 )
   return sys_refcursor
as
   Ims       sys_refcursor;  
  

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   bType varchar2(100)    :=pbonus_type;

begin
    open Ims for
                select /*+ append */ 
                       sysdate refresh_date,
                       f.zone_code division_code,
                       f.zone_name division_name,
                       f.area_code region_code,
                       f.area_name region_name,
                       f.belt_code area_code,
                       f.belt_name area_name,
                       f.territory_code,
                       f.territory_name,
                       a.customer_code,
                       b.customer_name,
                       b.db_location,
                       a.market_code,
                       c.market_name,
                       a.route_code,
                       d.route_name,
                       a.retailer_code, 
                       e.retailer_name,
                       a.invoice_no,
                       to_char(a.invoice_date,'MM/DD/RRRR HH:MI:SS AM') invoice_date,  
                       a.issue_product_code product_code, 
                       g.product_name,
                       g.pack_size,
                       a.bonus_slab_type, 
                       slab_qty,       
                       nvl(a.normal_dec_slab,0) normal_dec_slab,
                       a.issued_qty,
                       a.return_qty,
                       a.total_ims_qty,
                       a.normal_ims_qty,
                       a.ims_normal_bns_qty,
                       a.slab_ims_qty,
                       a.ims_slab_bns_qty,       
                       round(nvl(a.bonus_ratio,0),2) bonus_ratio,       
                       round(nvl(a.adjustable_slab,0),2) adjustable_slab               
                from
                    (   
                    select customer_code,
                           market_code,
                           route_code,
                           retailer_code, 
                           invoice_no,
                           invoice_date,  
                           issue_product_code, 
                           bonus_slab_type, 
                           slab_qty,       
                           normal_dec_slab ,
                           sum(issued_qty)issued_qty,
                           sum(return_qty)return_qty,
                           sum(nvl(total_ims_qty,0))total_ims_qty,
                           sum(nvl(normal_ims_qty,0))normal_ims_qty,
                           sum(nvl(ims_normal_bns_qty,0))ims_normal_bns_qty,
                           sum(nvl(slab_ims_qty,0))slab_ims_qty,
                           sum(nvl(ims_slab_bns_qty,0))ims_slab_bns_qty,       
                           sum(nvl(slab_ims_qty,0))/normal_dec_slab bonus_ratio,       
                           sum(nvl(ims_slab_bns_qty,0)) -(sum(nvl(slab_ims_qty,0))/normal_dec_slab) adjustable_slab               
                    from
                    ( 
                          
                                select a.customer_code,
                                       a.market_code,
                                       a.route_code,
                                       a.retailer_code, 
                                       a.invoice_no,
                                       a.invoice_date,  
                                       a.issue_product_code, 
                                       a.bonus_product_code,
                                       a.bonus_slab_type, 
                                       a.bonus_type,
                                       a.slab_qty, 
                                       a.bns_dec_qty,
                                       a.issued_qty,
                                       a.slab_bonus_qty,
                                       a.normal_bonus_qty,
                                       b.ret_issue_product_code,
                                       nvl(b.return_qty,0)return_qty ,
                                       b.ret_bonus_product_code,
                                       nvl(b.ret_bonus_qty,0)ret_bonus_qty,
                                       nvl(nvl(a.issued_qty,0)-nvl(b.return_qty,0),0)total_ims_qty,
                                       c.normal_dec_slab,
                                       nvl(decode(a.bonus_slab_type,'Normal',nvl(a.issued_qty,0))-nvl(b.return_qty,0),0) normal_ims_qty,
                                       nvl(decode(a.bonus_slab_type,'Normal',nvl(a.normal_bonus_qty,0)) -nvl(ret_bonus_qty,0),0)  ims_normal_bns_qty,      
                                       nvl(decode(a.bonus_slab_type,'Slab',nvl(a.issued_qty,0))-nvl(b.return_qty,0),0) slab_ims_qty,
                                       nvl(decode(a.bonus_slab_type,'Slab',nvl(a.slab_bonus_qty,0)) -nvl(ret_bonus_qty,0),0)  ims_slab_bns_qty
                                from 
                                    (
                                        select distinct
                                               customer_code,
                                               market_code,
                                               route_code,
                                               retailer_code, 
                                               invoice_no,
                                               invoice_date, 
                                               issue_product_code, 
                                               bonus_product_code,
                                               bonus_slab_type, 
                                               bonus_type,
                                               slab_qty, 
                                               bns_dec_qty,
                                               issued_qty,
                                               slab_bonus_qty ,
                                               normal_bonus_qty             
                                        from 
                                            (    
                                            select m.customer_code,
                                                   m.market_code,
                                                   m.route_code,
                                                   m.retailer_code, 
                                                   m.invoice_no,
                                                   m.invoice_date, 
                                                   b.issue_product_code, 
                                                   b.bonus_product_code,
                                                   b.bonus_slab_type, 
                                                   b.bonus_type,
                                                   b.slab_qty, 
                                                   b.bns_dec_qty,
                                                   d.issued_qty,
                                                   b.bonus_qty slab_bonus_qty,
                                                   0 normal_bonus_qty            
                                            from  spa_sfbl.vw_invoice_bonus_slab_dtl_v1@dl_spasfbl.squaregroup.com b , spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m , spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                            where b.inv_mst_slno =m.inv_mst_slno
                                            and   m.inv_mst_slno=d.inv_mst_slno
                                            and   b.inv_dtl_slno=d.inv_dtl_slno
                                            and   trunc(m.invoice_date) = trunc(sysdate) 
                                            and   nvl(b.bonus_qty,0) >0
                                            and   b.bonus_slab_type = 'Slab'
                                                    
                                            union all 
                                                    
                                            select m.customer_code,
                                                   m.market_code, 
                                                   m.route_code,                  
                                                   m.retailer_code, 
                                                   m.invoice_no,
                                                   m.invoice_date,
                                                   b.issue_product_code, 
                                                   b.bonus_product_code,
                                                   b.bonus_slab_type, 
                                                   b.bonus_type,
                                                   b.slab_qty, 
                                                   b.bns_dec_qty,
                                                   d.issued_qty,
                                                   0 slab_bonus_qty,
                                                   b.bonus_qty normal_bonus_qty           
                                            from spa_sfbl.vw_invoice_bonus_slab_dtl_v1@dl_spasfbl.squaregroup.com  b , spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com m , spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com d
                                            where b.inv_mst_slno =m.inv_mst_slno
                                            and  m.inv_mst_slno=d.inv_mst_slno
                                            and  b.inv_dtl_slno=d.inv_dtl_slno
                                            and trunc(m.invoice_date)  = trunc(sysdate)
                                            and nvl(b.bonus_qty,0) >0
                                            and b.bonus_slab_type = 'Normal'
                                            )
                                    )a,
                                        
                                    (
                                            select distinct
                                                   invoice_no,
                                                   ret_issue_product_code,
                                                   ret_bonus_product_code,
                                                   bonus_slab_type,               
                                                   return_qty,
                                                   ret_bonus_qty
                                            from   
                                                (                 
                                                   select  i.invoice_no,
                                                           b.issue_product_code ret_issue_product_code,
                                                           b.bonus_product_code ret_bonus_product_code,
                                                           b.bonus_slab_type,               
                                                           d.return_qty,
                                                           b.bonus_qty ret_bonus_qty
                                                    from spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m ,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d , spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i, spa_sfbl.vw_invoice_bonus_slab_dtl_v1@dl_spasfbl.squaregroup.com  b
                                                    where  m.ret_recv_mst_slno=d.ret_recv_mst_slno
                                                    and    m.invoice_no =i.invoice_no
                                                    and    i.inv_mst_slno =b.inv_mst_slno
                                                    and    d.product_code= b.issue_product_code
                                                    and  m.customer_code  =i.customer_code 
                                                    and  m.return_type ='F'
                                                    and  trunc(i.invoice_date)  = trunc(sysdate)
                                                
                                                                      
                                                    union all
                                                            
                                                    select i.invoice_no, 
                                                           b.issue_product_code ret_issue_product_code,
                                                           b.bonus_product_code ret_bonus_product_code,
                                                           b.bonus_slab_type,                   
                                                           d.return_qty,                   
                                                           bb.ret_bns_back_qty ret_bonus_qty
                                                    from spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com m ,spa_sfbl.ret_return_dtl@dl_spasfbl.squaregroup.com d , spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i, spa_sfbl.vw_invoice_bonus_slab_dtl_v1@dl_spasfbl.squaregroup.com b, spa_sfbl.vw_return_bonus_slab_dtl_v1@dl_spasfbl.squaregroup.com  bb
                                                    where  m.ret_recv_mst_slno=d.ret_recv_mst_slno
                                                    and    m.invoice_no =i.invoice_no
                                                    and    i.inv_mst_slno =b.inv_mst_slno
                                                    and    d.product_code= b.issue_product_code
                                                    and    m.customer_code  =i.customer_code 
                                                    and    m.return_type ='P'
                                                    and    nvl(b.bonus_qty,0) >0
                                                    and    b.inv_mst_slno =bb.inv_mst_slno
                                                    and    b.issue_product_code =bb.product_code
                                                    and    b.bonus_product_code=bb.bonus_product_code
                                                    and    b.slab_qty=bb.slab_qty
                                                    and    trunc(i.invoice_date)  = trunc(sysdate)
                                                )     
                                    )b,
                                    (
                                        select distinct
                                               b.issue_product_code,                            
                                               b.slab_qty normal_dec_slab
                                        from   spa_sfbl.vw_invoice_bonus_slab_dtl_v1@dl_spasfbl.squaregroup.com   b , spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com i
                                        where  b.inv_mst_slno =i.inv_mst_slno 
                                        and    b.bonus_slab_type ='Normal'  
                                        and    b.bonus_type ='P'
                                        and    b.bns_dec_qty =1
                                        and    trunc(i.invoice_date)  = trunc(sysdate) 
                                    )c     
                                where a.invoice_no          = b.invoice_no(+)
                                and   a.issue_product_code  = b.ret_issue_product_code(+)
                                and   a.bonus_product_code  = b.ret_bonus_product_code(+)
                                and   a.bonus_slab_type     = b.bonus_slab_type(+)

                               and   a.issue_product_code  = c.issue_product_code(+)
                                  
                       )         
                    group by customer_code, market_code,route_code,retailer_code, invoice_no,invoice_date,  issue_product_code, bonus_slab_type,slab_qty, normal_dec_slab   
                    ) a, spa_sfbl.customer_info@dl_spasfbl.squaregroup.com b, spa_sfbl.market_info@dl_spasfbl.squaregroup.com c, spa_sfbl.route_info@dl_spasfbl.squaregroup.com d, spa_sfbl.retailer_info@dl_spasfbl.squaregroup.com e,spa_sfbl.vw_location_relation@dl_spasfbl.squaregroup.com f,spa_sfbl.product_info@dl_spasfbl.squaregroup.com g
                where a.customer_code=b.customer_code
                and   a.market_code=c.market_code
                and   a.route_code=d.route_code
                and   a.retailer_code=e.retailer_code
                and   a.market_code=f.market_code(+)
                and   a.issue_product_code=g.product_code
                and  (f.zone_code = dCode or dCode='ALL')
                and  (f.area_code = rCode or rCode='ALL')
                and  (f.belt_code = aCode or aCode='ALL')
                and  (f.territory_code = tCode or tCode='ALL')  
                and  (a.customer_code = cCode or cCode='ALL') 
                and  (a.bonus_slab_type = bType or bType='ALL');



   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_MARKET_IMS_TODAY(pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Ims for                                                                            
        select /*+ append */  
                b.zone_code division_code,
                b.zone_name division_name,
                b.area_code region_code,
                b.area_name region_name,
                b.belt_code area_code,
                b.belt_name area_name,
                b.territory_code,
                b.territory_name,
                a.market_code,
                b.market_name,        
                a.customer_code,
                c.customer_name,
                c.db_location ,
                a.no_of_inv,
                a.total_inv_amt, 
                a.slab_adjustment, 
                a.net_inv_amount,
                a.return_value, 
                a.return_slab_adjust, 
                a.net_return_val,
                a.net_ims,
                a.no_of_replace_inv,
                a.replace_inv_amt,
                a.target_val,
                a.no_of_retailer,
                a.no_of_ord_retailer      
        from
            (     
                select  customer_code,
                        market_code,
                        nvl(no_of_inv,0) no_of_inv,
                        nvl(total_inv_amt,0)total_inv_amt, 
                        nvl(slab_adjustment,0)slab_adjustment, 
                        nvl(net_inv_amount,0)net_inv_amount,
                        nvl(return_value,0)return_value, 
                        nvl(return_slab_adjust,0)return_slab_adjust, 
                        nvl(net_return_val,0)net_return_val,
                        nvl(net_inv_amount,0)-nvl(net_return_val,0) net_ims,
                        nvl(no_of_replace_inv,0) no_of_replace_inv,
                        nvl(replace_inv_amt,0) replace_inv_amt,
                        nvl(target_val,0) target_val,
                        nvl(no_of_retailer,0) no_of_retailer,
                        nvl(no_of_ord_retailer,0) no_of_ord_retailer
                from
                    (
                    
                    
                  select  customer_code,
                          market_code,
                          sum(no_of_inv )no_of_inv,
                          sum(total_inv_amt)total_inv_amt, 
                          sum(slab_adjustment)slab_adjustment, 
                          sum(net_inv_amount)net_inv_amount,
                          sum(return_value)return_value, 
                          sum(return_slab_adjust)return_slab_adjust, 
                          sum(net_return_val)net_return_val,
                          sum(no_of_replace_inv) no_of_replace_inv,
                          sum(replace_inv_amt) replace_inv_amt,
                          sum(target_val) target_val,
                          sum(no_of_retailer) no_of_retailer,
                          sum(no_of_ord_retailer) no_of_ord_retailer                                                      
                    from
                        (           
                            select  customer_code,
                                    market_code,
                                    count(invoice_no)no_of_inv,
                                    sum(total_inv_amt)total_inv_amt, 
                                    sum(slab_adjustment)slab_adjustment, 
                                    sum(net_inv_amount)net_inv_amount,
                                    0 return_value,
                                    0 return_slab_adjust,
                                    0 net_return_val,
                                    0 no_of_replace_inv,
                                    0 replace_inv_amt,
                                    0 target_val,
                                    0 no_of_retailer,
                                    0 no_of_ord_retailer                                                                                                           
                                from
                                     (                        
                                     select customer_code,
                                            market_code,
                                            invoice_no,
                                            nvl(grand_total,0)total_inv_amt, 
                                            nvl(slab_adjustment,0)+nvl(special_bonus_disc,0)slab_adjustment, 
                                            nvl(net_inv_amount,0)net_inv_amount
                                     from  spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com 
                                     where  inv_type_code='INV001'
                                    and  (customer_code = cCode or cCode='ALL')
                                    and  trunc(invoice_date) = trunc(sysdate)                                 
                                    )
                                group by customer_code,market_code
                                
                                union all
                                
                                select customer_code,
                                       market_code,
                                       0 no_of_inv,
                                       0 total_inv_amt,
                                       0 slab_adjustment,
                                       0 net_inv_amount,
                                       sum(return_value)return_value, 
                                       sum(return_slab_adjust)return_slab_adjust, 
                                       sum(net_return_val)net_return_val,
                                       0 no_of_replace_inv,
                                       0 replace_inv_amt,
                                       0 target_val,
                                       0 no_of_retailer,
                                       0 no_of_ord_retailer                                                     
                                 from 
                                    (
                                     select  customer_code,
                                             market_code,
                                             nvl(return_value,0)return_value,
                                             nvl(return_slab_amount,0)+ nvl(special_bonus_disc,0) return_slab_adjust,
                                             nvl(net_return_val,0)net_return_val
                                     from    spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com
                                     where   inv_type_code='INV001'  
                                     and    (customer_code = cCode or cCode='ALL')
                                     and     trunc(invoice_date) = trunc(sysdate)                                                  
                                    )                    
                               group by customer_code,market_code
                               
                               union all
                               
                                               
                              select  customer_code,
                                      market_code,                                                            
                                      0 no_of_inv,
                                      0 total_inv_amt,
                                      0 slab_adjustment,
                                      0 net_inv_amount,
                                      0 return_value, 
                                      0 return_slab_adjust, 
                                      0 net_return_val,                                                             
                                      count(nvl(invoice_no,0)) no_of_replace_inv,
                                      sum(nvl(replace_inv_amt,0)) replace_inv_amt,
                                      0 target_val,
                                      0 no_of_retailer,
                                      0 no_of_ord_retailer                                
                              from
                                  (
                                    select  customer_code,
                                            market_code,
                                            invoice_no,
                                            nvl(net_inv_amount,0)replace_inv_amt
                                    from    spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com 
                                     where   inv_type_code='INV001'  
                                     and    (customer_code = cCode or cCode='ALL')
                                     and     trunc(invoice_date) = trunc(sysdate) 
                                                  
                                  )
                              group by customer_code,market_code                      
                             
                            union all 
                              
                           select b.customer_code,
                                  a.market_code,
                                  0 no_of_inv,
                                  0 total_inv_amt,
                                  0 slab_adjustment,
                                  0 net_inv_amount,
                                  0 return_value, 
                                  0 return_slab_adjust, 
                                  0 net_return_val,                                                             
                                  0 no_of_replace_inv,
                                  0 replace_inv_amt,
                                  sum(nvl (a.target_val, 0)) target_val,
                                  0 no_of_retailer,
                                  0 no_of_ord_retailer                               
                            from   mv_target_l3years a, mv_division_customer_relation b
                            where  a.market_code=b.market_code
                            and   (a.year||a.month_code) =to_char (trunc (sysdate,'MM'),'YYYYMM')
                            group by b.customer_code,a.market_code                    

                           union all
                
                        select customer_code,
                               market_code, 
                               0 no_of_inv,
                               0 total_inv_amt,
                               0 slab_adjustment,
                               0 net_inv_amount,
                               0 return_value, 
                               0 return_slab_adjust, 
                               0 net_return_val,                                                             
                               0 no_of_replace_inv,
                               0 replace_inv_amt,
                               0 target_val,       
                               sum(no_of_retailer)no_of_retailer, 
                               sum(no_of_ord_retailer)no_of_ord_retailer
                        from
                            (
                                select m.customer_code,a.market_code, count(a.retailer_code)no_of_retailer,0 no_of_ord_retailer
                                from    mv_division_retailer_relation a, mv_customer_mkt_mst m,mv_customer_mkt_dtl  d
                                where a.market_code =d.market_code
                                and   m.cust_mkt_mst_slno =d.cust_mkt_mst_slno
                                group by m.customer_code,a.market_code
                                union all 
                                select customer_code ,market_code,0 no_of_retailer,count(retailer_code)no_of_ord_retailer 
                                from 
                                    (
                                     select  distinct  customer_code ,market_code,retailer_code
                                     from    spa_sfbl.order_mst@dl_spasfbl.squaregroup.com
                                     where   trunc(order_date) = trunc(sysdate)     
                                     )
                                 group by customer_code ,market_code
                            )
                         group by customer_code,market_code                
                        
                              
                                      
                        )
                    group by customer_code,market_code
                    )
                   
           )a,
           (
              select  distinct
                      zone_code, 
                      zone_name, 
                      area_code, 
                      area_name, 
                      belt_code, 
                      belt_name, 
                      territory_code, 
                      territory_name,
                      customer_code,
                      customer_name, 
                      market_code, 
                      market_name 
               from mv_division_customer_relation
               
            ) b , mv_customer_info c
           where a.market_code=b.market_code(+)
           and   a.customer_code=c.customer_code(+)
           
            and  (b.zone_code = dCode or dCode='ALL')
            and  (b.area_code = rCode or rCode='ALL')
            and  (b.belt_code = aCode or aCode='ALL')
            and  (b.territory_code = tCode or tCode='ALL')  
            and  (a.customer_code = cCode or cCode='ALL')   
            order by division_name,region_name,area_name,territory_name,customer_name,market_name;   


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_MARKET_IMS_DATE_RANGE(pfrom_date varchar2,pto_date varchar2,pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Ims for                                                                            
        select /*+ append */  
                b.zone_code division_code,
                b.zone_name division_name,
                b.area_code region_code,
                b.area_name region_name,
                b.belt_code area_code,
                b.belt_name area_name,
                b.territory_code,
                b.territory_name,
                a.market_code,
                b.market_name,        
                a.customer_code,
                c.customer_name,
                c.db_location ,
                a.no_of_inv,
                a.total_inv_amt, 
                a.slab_adjustment, 
                a.net_inv_amount,
                a.return_value, 
                a.return_slab_adjust, 
                a.net_return_val,
                a.net_ims,
                a.no_of_replace_inv,
                a.replace_inv_amt,
                a.target_val,
                a.no_of_retailer,
                a.no_of_ord_retailer      
        from
            (     
                select  customer_code,
                        market_code,
                        nvl(no_of_inv,0) no_of_inv,
                        nvl(total_inv_amt,0)total_inv_amt, 
                        nvl(slab_adjustment,0)slab_adjustment, 
                        nvl(net_inv_amount,0)net_inv_amount,
                        nvl(return_value,0)return_value, 
                        nvl(return_slab_adjust,0)return_slab_adjust, 
                        nvl(net_return_val,0)net_return_val,
                        nvl(net_inv_amount,0)-nvl(net_return_val,0) net_ims,
                        nvl(no_of_replace_inv,0) no_of_replace_inv,
                        nvl(replace_inv_amt,0) replace_inv_amt,
                        nvl(target_val,0) target_val,
                        nvl(no_of_retailer,0) no_of_retailer,
                        nvl(no_of_ord_retailer,0) no_of_ord_retailer
                from
                    (
                    
                    
                  select  customer_code,
                          market_code,
                          sum(no_of_inv )no_of_inv,
                          sum(total_inv_amt)total_inv_amt, 
                          sum(slab_adjustment)slab_adjustment, 
                          sum(net_inv_amount)net_inv_amount,
                          sum(return_value)return_value, 
                          sum(return_slab_adjust)return_slab_adjust, 
                          sum(net_return_val)net_return_val,
                          sum(no_of_replace_inv) no_of_replace_inv,
                          sum(replace_inv_amt) replace_inv_amt,
                          sum(target_val) target_val,
                          sum(no_of_retailer) no_of_retailer,
                          sum(no_of_ord_retailer) no_of_ord_retailer                                                      
                    from
                        (           
                            select  customer_code,
                                    market_code,
                                    count(invoice_no)no_of_inv,
                                    sum(total_inv_amt)total_inv_amt, 
                                    sum(slab_adjustment)slab_adjustment, 
                                    sum(net_inv_amount)net_inv_amount,
                                    0 return_value,
                                    0 return_slab_adjust,
                                    0 net_return_val,
                                    0 no_of_replace_inv,
                                    0 replace_inv_amt,
                                    0 target_val,
                                    0 no_of_retailer,
                                    0 no_of_ord_retailer                                                                                                           
                                from
                                     (                        
                                     select customer_code,
                                            market_code,
                                            invoice_no,
                                            nvl(grand_total,0)total_inv_amt, 
                                            nvl(slab_adjustment,0)+nvl(special_bonus_disc,0)slab_adjustment, 
                                            nvl(net_inv_amount,0)net_inv_amount
                                     from  vw_invoice_mst 
                                     where  inv_type_code='INV001'
                                    and  (customer_code = cCode or cCode='ALL')
                                    and  trunc(invoice_date) between fDate and tDate                                    
                                    )
                                group by customer_code,market_code
                                
                                union all
                                
                                select customer_code,
                                       market_code,
                                       0 no_of_inv,
                                       0 total_inv_amt,
                                       0 slab_adjustment,
                                       0 net_inv_amount,
                                       sum(return_value)return_value, 
                                       sum(return_slab_adjust)return_slab_adjust, 
                                       sum(net_return_val)net_return_val,
                                       0 no_of_replace_inv,
                                       0 replace_inv_amt,
                                       0 target_val,
                                       0 no_of_retailer,
                                       0 no_of_ord_retailer                                                     
                                 from 
                                    (
                                     select  b.customer_code,
                                             b.market_code,
                                             nvl(a.return_value,0)return_value,
                                             nvl(a.return_slab_amount,0)+ nvl(a.special_bonus_disc,0) return_slab_adjust,
                                             nvl(a.net_return_val,0)net_return_val
                                     from    vw_ret_return_mst a, vw_invoice_mst b
                                     where  a.invoice_no=b.invoice_no 
                                     and    b.inv_type_code='INV001'  
                                     and    (b.customer_code = cCode or cCode='ALL')
                                     and     trunc(b.invoice_date) between fDate and tDate                                                  
                                    )                    
                               group by customer_code,market_code
                               
                               union all
                               
                                               
                              select  customer_code,
                                      market_code,                                                            
                                      0 no_of_inv,
                                      0 total_inv_amt,
                                      0 slab_adjustment,
                                      0 net_inv_amount,
                                      0 return_value, 
                                      0 return_slab_adjust, 
                                      0 net_return_val,                                                             
                                      count(nvl(invoice_no,0)) no_of_replace_inv,
                                      sum(nvl(replace_inv_amt,0)) replace_inv_amt,
                                      0 target_val,
                                      0 no_of_retailer,
                                      0 no_of_ord_retailer                                
                              from
                                  (
                                    select  customer_code,
                                            market_code,
                                            invoice_no,
                                            nvl(net_inv_amount,0)replace_inv_amt
                                    from    vw_invoice_mst 
                                     where   inv_type_code='INV001'  
                                     and    (customer_code = cCode or cCode='ALL')
                                     and     trunc(invoice_date) between fDate and tDate      
                                                  
                                  )
                              group by customer_code,market_code                      
                             
                            union all 
                              
                           select b.customer_code,
                                  a.market_code,
                                  0 no_of_inv,
                                  0 total_inv_amt,
                                  0 slab_adjustment,
                                  0 net_inv_amount,
                                  0 return_value, 
                                  0 return_slab_adjust, 
                                  0 net_return_val,                                                             
                                  0 no_of_replace_inv,
                                  0 replace_inv_amt,
                                  sum(nvl (a.target_val, 0)) target_val,
                                  0 no_of_retailer,
                                  0 no_of_ord_retailer                               
                            from  mv_target_l3years a, mv_division_customer_relation b
                            where  a.market_code=b.market_code
                            and   (a.year||a.month_code) between to_char (trunc (fDate,'MM'),'YYYYMM') and to_char (trunc (tDate,'MM'),'YYYYMM')
                            group by b.customer_code,a.market_code                    

                           union all
                
                        select customer_code,
                               market_code, 
                               0 no_of_inv,
                               0 total_inv_amt,
                               0 slab_adjustment,
                               0 net_inv_amount,
                               0 return_value, 
                               0 return_slab_adjust, 
                               0 net_return_val,                                                             
                               0 no_of_replace_inv,
                               0 replace_inv_amt,
                               0 target_val,       
                               sum(no_of_retailer)no_of_retailer, 
                               sum(no_of_ord_retailer)no_of_ord_retailer
                        from
                            (
                                select m.customer_code,a.market_code, count(a.retailer_code)no_of_retailer,0 no_of_ord_retailer
                                from   mv_division_retailer_relation a, mv_customer_mkt_mst m,mv_customer_mkt_dtl  d
                                where a.market_code =d.market_code
                                and   m.cust_mkt_mst_slno =d.cust_mkt_mst_slno
                                group by m.customer_code,a.market_code
                                union all 
                                select customer_code ,market_code,0 no_of_retailer,count(retailer_code)no_of_ord_retailer 
                                from 
                                    (
                                     select  distinct  customer_code ,market_code,retailer_code
                                     from  vw_order_mst
                                     where   trunc(order_date) between fDate and tDate        
                                     )
                                 group by customer_code ,market_code
                            )
                         group by customer_code,market_code                
                                                                                            
                        )
                    group by customer_code,market_code
                    )
                   
           )a,
           (
              select  distinct
                      zone_code, 
                      zone_name, 
                      area_code, 
                      area_name, 
                      belt_code, 
                      belt_name, 
                      territory_code, 
                      territory_name,
                      customer_code,
                      customer_name, 
                      market_code, 
                      market_name 
               from mv_division_customer_relation
               
            ) b , mv_customer_info c
           where a.market_code=b.market_code(+)
           and   a.customer_code=c.customer_code(+)
           
            and  (b.zone_code = dCode or dCode='ALL')
            and  (b.area_code = rCode or rCode='ALL')
            and  (b.belt_code = aCode or aCode='ALL')
            and  (b.territory_code = tCode or tCode='ALL')  
            and  (a.customer_code = cCode or cCode='ALL')   
            order by division_name,region_name,area_name,territory_name,customer_name,market_name;   


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_DAY_WISE_PRODUCT_IMS(p_from_date varchar2,
                                                               p_to_date varchar2,
                                                               p_product_code varchar2,
                                                               p_division_code varchar2, 
                                                               p_region_code varchar2,
                                                               p_area_code varchar2,
                                                               p_territory_code varchar2,
                                                               p_customer_code varchar2,
                                                               puser_id number
                                                               )
   return sys_refcursor
as
   product_ims       sys_refcursor;  
   
   
   fromDate date                := to_date(p_from_date,'DD/MM/RRRR'); 
   toDate date                  := to_date(p_to_date,'DD/MM/RRRR');
   productCode varchar2(100)    :=p_product_code;
   
   divisionCode varchar2(100)   :=p_division_code;
   regionCode varchar2(100)     :=p_region_code;
   areaCode varchar2(100)       :=p_area_code;
   territoryCode varchar2(100)  :=p_territory_code;
   customerCode varchar2(100)   :=p_customer_code;
   userId   number        :=puser_id;
   vCount   number:=0;      

begin

   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 


     if vCount = 0 then 
     
     
           begin
           
                   open product_ims for                                                                            
                                select  b.zone_code division_code,b.zone_name division_name,b.area_code region_code,b.area_name region_name,b.belt_code area_code,
                                        b.belt_name area_name,b.territory_code,b.territory_name,a.customer_code,b.customer_name,
                                        b.db_location,a.market_code,b.market_name,a.product_code,c.product_name,c.pack_size,
                                        
                                        day_01,day_02,day_03,day_04,day_05,day_06,day_07,day_08,day_09,day_10,
                                        day_11,day_12,day_13,day_14,day_15,day_16,day_17,day_18,day_19,day_20,
                                        day_21,day_22,day_23,day_24,day_25,day_26,day_27,day_28,day_29,day_30,day_31,                                        
                                        nvl(day_01,0)+nvl(day_02,0)+nvl(day_03,0)+nvl(day_04,0)+nvl(day_05,0)+nvl(day_06,0)+nvl(day_07,0)+nvl(day_08,0)+nvl(day_09,0)+nvl(day_10,0)+nvl(day_11,0)+nvl(day_12,0)+nvl(day_13,0)+nvl(day_14,0)+nvl(day_15,0)+nvl(day_16,0)+nvl(day_17,0)+nvl(day_18,0)+nvl(day_19,0)+nvl(day_20,0)+nvl(day_21,0)+nvl(day_22,0)+nvl(day_23,0)+nvl(day_24,0)+nvl(day_25,0)+nvl(day_26,0)+nvl(day_27,0)+nvl(day_28,0)+nvl(day_29,0)+nvl(day_30,0)+nvl(day_31,0) total_qty,
                                        nvl(target_qty,0) target_qty
                                from
                                    (  
                                              select  customer_code,market_code,product_code,
                                                sum(day_01) day_01,sum(day_02) day_02,sum(day_03) day_03,sum(day_04) day_04,sum(day_05) day_05,sum(day_06) day_06,
                                                sum(day_07) day_07,sum(day_08) day_08,sum(day_09) day_09,sum(day_10) day_10,sum(day_11) day_11,sum(day_12) day_12,
                                                sum(day_13) day_13,sum(day_14) day_14,sum(day_15) day_15,sum(day_16) day_16,sum(day_17) day_17,sum(day_18) day_18,
                                                sum(day_19) day_19,sum(day_20) day_20,sum(day_21) day_21,sum(day_22) day_22,sum(day_23) day_23,sum(day_24) day_24,
                                                sum(day_25) day_25,sum(day_26) day_26,sum(day_27) day_27,sum(day_28) day_28,sum(day_29) day_29,sum(day_30) day_30,
                                                sum(day_31) day_31,
                                                sum(target_qty)target_qty
                                        from
                                            (                               
                                        select  customer_code,market_code,product_code,
                                                sum(day_01) day_01,sum(day_02) day_02,sum(day_03) day_03,sum(day_04) day_04,sum(day_05) day_05,sum(day_06) day_06,
                                                sum(day_07) day_07,sum(day_08) day_08,sum(day_09) day_09,sum(day_10) day_10,sum(day_11) day_11,sum(day_12) day_12,
                                                sum(day_13) day_13,sum(day_14) day_14,sum(day_15) day_15,sum(day_16) day_16,sum(day_17) day_17,sum(day_18) day_18,
                                                sum(day_19) day_19,sum(day_20) day_20,sum(day_21) day_21,sum(day_22) day_22,sum(day_23) day_23,sum(day_24) day_24,
                                                sum(day_25) day_25,sum(day_26) day_26,sum(day_27) day_27,sum(day_28) day_28,sum(day_29) day_29,sum(day_30) day_30,
                                                sum(day_31) day_31,
                                                0 target_qty
                                        from
                                            (        
                                            select  customer_code,
                                                    market_code,
                                                    product_code,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'01',net_ims_qty),0) day_01,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'02',net_ims_qty),0) day_02,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'03',net_ims_qty),0) day_03,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'04',net_ims_qty),0) day_04,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'05',net_ims_qty),0) day_05,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'06',net_ims_qty),0) day_06,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'07',net_ims_qty),0) day_07,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'08',net_ims_qty),0) day_08,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'09',net_ims_qty),0) day_09,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'10',net_ims_qty),0) day_10,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'11',net_ims_qty),0) day_11,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'12',net_ims_qty),0) day_12,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'13',net_ims_qty),0) day_13,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'14',net_ims_qty),0) day_14,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'15',net_ims_qty),0) day_15,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'16',net_ims_qty),0) day_16,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'17',net_ims_qty),0) day_17,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'18',net_ims_qty),0) day_18,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'19',net_ims_qty),0) day_19,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'20',net_ims_qty),0) day_20,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'21',net_ims_qty),0) day_21,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'22',net_ims_qty),0) day_22,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'23',net_ims_qty),0) day_23,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'24',net_ims_qty),0) day_24,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'25',net_ims_qty),0) day_25,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'26',net_ims_qty),0) day_26,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'27',net_ims_qty),0) day_27,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'28',net_ims_qty),0) day_28,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'29',net_ims_qty),0) day_29,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'30',net_ims_qty),0) day_30,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'31',net_ims_qty),0) day_31
                                            FROM 
                                               (
                                               
                                               
                                                select 
                                                       a.customer_code,
                                                       a.market_code,               
                                                       a.invoice_date,
                                                       a.product_code,
                                                       sum(nvl(a.issued_qty,0))- sum(nvl(b.return_qty,0)) net_ims_qty
                                                from
                                                    (
                                                      select m.invoice_no,
                                                             trunc(m.invoice_date) invoice_date,
                                                             m.customer_code,
                                                             m.market_code, 
                                                             d.product_code,
                                                             nvl(d.issued_qty,0) issued_qty
                                                      from   mv_invoice_mst m,  mv_invoice_dtl  d
                                                      where m.inv_mst_slno=d.inv_mst_slno  
                                                      and   m.inv_type_code='INV001'
                                                      and   trunc(m.invoice_date) between fromdate and todate
                                                      and   (m.customer_code = customerCode or customerCode='ALL')
                                                      and   (d.product_code = productCode or productCode='ALL')
                                                    )a,
                                               
                                                    (                        
                                                    select   m.invoice_no,                     
                                                             d.product_code,
                                                             nvl(d.return_qty,0) return_qty
                                                     from     mv_ret_return_mst m, mv_ret_return_dtl d
                                                     where    m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                     and     trunc(m.invoice_date) between fromdate and todate
                                                     and     m.inv_type_code='INV001'          
                                                   ) b
                                               where a.invoice_no = b.invoice_no(+)    
                                               and  a.product_code=b.product_code(+)
                                               group by  a.customer_code,a.market_code,a.invoice_date,a.product_code                                                                        
                                               
                                               
                                               )
                                        )
                                        group by  customer_code,market_code,product_code
                                        
                                      
                                        union all
                                               
                                    select b.customer_code,a.market_code, a.product_code, 
                                           0 day_01,0 day_02,0 day_03,0 day_04,0 day_05,0 day_06,0 day_07,0 day_08,0 day_09,0 day_10,
                                           0 day_11,0 day_12,0 day_13,0 day_14,0 day_15,0 day_16,0 day_17,0 day_18,0 day_19,0 day_20,
                                           0 day_21,0 day_22,0 day_23,0 day_24,0 day_25,0 day_26,0 day_27,0 day_28,0 day_29,0 day_30,0 day_31,
                                           sum(nvl (a.target_qty, 0)) target_qty
                                    from   mv_target_l3years a, mv_division_customer_relation b
                                    where  a.market_code=b.market_code                                        
                                    and   (a.year||a.month_code) between to_char(to_date(fromdate,'dd/mm/rrrr'),'rrrrmm') and to_char(to_date(todate,'dd/mm/rrrr'),'rrrrmm')    
                                    and   (b.customer_code = customerCode or customerCode='ALL')
                                    and   (a.product_code = productCode or productCode='ALL')                                    
                                    group by  b.customer_code,a.market_code,a.product_code
                                    
                                    )                                    
                                   group by  customer_code,market_code,product_code 
                                )a, mv_division_customer_relation b,mv_product_info c                                       
                                where a.market_code=b.market_code(+)
                                and   a.product_code=c.product_code(+)                                                                                                                                                
                                and  (b.zone_code = divisionCode or divisionCode='ALL')
                                and  (b.area_code = regionCode or regionCode='ALL')
                                and  (b.belt_code = areaCode or areaCode='ALL')
                                and  (b.territory_code = territoryCode or territoryCode='ALL')  
                                and  (a.customer_code = customerCode or customerCode='ALL') 
                                and   (a.product_code = productCode or productCode='ALL')  
                                order by b.zone_name,b.area_name,b.belt_name,b.territory_name,b.customer_name,b.market_name,c.product_name;  
           
           end;
     
     elsif vCount > 0 then
     
     
           begin
           
           
                   open product_ims for                                                                            
                                select  b.zone_code division_code,b.zone_name division_name,b.area_code region_code,b.area_name region_name,b.belt_code area_code,
                                        b.belt_name area_name,b.territory_code,b.territory_name,a.customer_code,b.customer_name,
                                        b.db_location,a.market_code,b.market_name,a.product_code,c.product_name,c.pack_size,
                                        
                                        day_01,day_02,day_03,day_04,day_05,day_06,day_07,day_08,day_09,day_10,
                                        day_11,day_12,day_13,day_14,day_15,day_16,day_17,day_18,day_19,day_20,
                                        day_21,day_22,day_23,day_24,day_25,day_26,day_27,day_28,day_29,day_30,day_31,                                        
                                        nvl(day_01,0)+nvl(day_02,0)+nvl(day_03,0)+nvl(day_04,0)+nvl(day_05,0)+nvl(day_06,0)+nvl(day_07,0)+nvl(day_08,0)+nvl(day_09,0)+nvl(day_10,0)+nvl(day_11,0)+nvl(day_12,0)+nvl(day_13,0)+nvl(day_14,0)+nvl(day_15,0)+nvl(day_16,0)+nvl(day_17,0)+nvl(day_18,0)+nvl(day_19,0)+nvl(day_20,0)+nvl(day_21,0)+nvl(day_22,0)+nvl(day_23,0)+nvl(day_24,0)+nvl(day_25,0)+nvl(day_26,0)+nvl(day_27,0)+nvl(day_28,0)+nvl(day_29,0)+nvl(day_30,0)+nvl(day_31,0) total_qty,
                                        nvl(target_qty,0) target_qty
                                from
                                    (  
                                              select  customer_code,market_code,product_code,
                                                sum(day_01) day_01,sum(day_02) day_02,sum(day_03) day_03,sum(day_04) day_04,sum(day_05) day_05,sum(day_06) day_06,
                                                sum(day_07) day_07,sum(day_08) day_08,sum(day_09) day_09,sum(day_10) day_10,sum(day_11) day_11,sum(day_12) day_12,
                                                sum(day_13) day_13,sum(day_14) day_14,sum(day_15) day_15,sum(day_16) day_16,sum(day_17) day_17,sum(day_18) day_18,
                                                sum(day_19) day_19,sum(day_20) day_20,sum(day_21) day_21,sum(day_22) day_22,sum(day_23) day_23,sum(day_24) day_24,
                                                sum(day_25) day_25,sum(day_26) day_26,sum(day_27) day_27,sum(day_28) day_28,sum(day_29) day_29,sum(day_30) day_30,
                                                sum(day_31) day_31,
                                                sum(target_qty)target_qty
                                        from
                                            (                               
                                        select  customer_code,market_code,product_code,
                                                sum(day_01) day_01,sum(day_02) day_02,sum(day_03) day_03,sum(day_04) day_04,sum(day_05) day_05,sum(day_06) day_06,
                                                sum(day_07) day_07,sum(day_08) day_08,sum(day_09) day_09,sum(day_10) day_10,sum(day_11) day_11,sum(day_12) day_12,
                                                sum(day_13) day_13,sum(day_14) day_14,sum(day_15) day_15,sum(day_16) day_16,sum(day_17) day_17,sum(day_18) day_18,
                                                sum(day_19) day_19,sum(day_20) day_20,sum(day_21) day_21,sum(day_22) day_22,sum(day_23) day_23,sum(day_24) day_24,
                                                sum(day_25) day_25,sum(day_26) day_26,sum(day_27) day_27,sum(day_28) day_28,sum(day_29) day_29,sum(day_30) day_30,
                                                sum(day_31) day_31,
                                                0 target_qty
                                        from
                                            (        
                                            select  customer_code,
                                                    market_code,
                                                    product_code,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'01',net_ims_qty),0) day_01,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'02',net_ims_qty),0) day_02,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'03',net_ims_qty),0) day_03,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'04',net_ims_qty),0) day_04,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'05',net_ims_qty),0) day_05,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'06',net_ims_qty),0) day_06,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'07',net_ims_qty),0) day_07,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'08',net_ims_qty),0) day_08,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'09',net_ims_qty),0) day_09,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'10',net_ims_qty),0) day_10,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'11',net_ims_qty),0) day_11,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'12',net_ims_qty),0) day_12,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'13',net_ims_qty),0) day_13,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'14',net_ims_qty),0) day_14,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'15',net_ims_qty),0) day_15,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'16',net_ims_qty),0) day_16,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'17',net_ims_qty),0) day_17,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'18',net_ims_qty),0) day_18,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'19',net_ims_qty),0) day_19,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'20',net_ims_qty),0) day_20,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'21',net_ims_qty),0) day_21,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'22',net_ims_qty),0) day_22,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'23',net_ims_qty),0) day_23,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'24',net_ims_qty),0) day_24,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'25',net_ims_qty),0) day_25,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'26',net_ims_qty),0) day_26,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'27',net_ims_qty),0) day_27,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'28',net_ims_qty),0) day_28,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'29',net_ims_qty),0) day_29,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'30',net_ims_qty),0) day_30,
                                                    nvl(decode(to_char(to_date(invoice_date,'DD-MM-RR'),'DD'),'31',net_ims_qty),0) day_31
                                            FROM 
                                               (
                                               
                                               
                                                select 
                                                       a.customer_code,
                                                       a.market_code,               
                                                       a.invoice_date,
                                                       a.product_code,
                                                       sum(nvl(a.issued_qty,0))- sum(nvl(b.return_qty,0)) net_ims_qty
                                                from
                                                    (
                                                      select m.invoice_no,
                                                             trunc(m.invoice_date) invoice_date,
                                                             m.customer_code,
                                                             m.market_code, 
                                                             d.product_code,
                                                             nvl(d.issued_qty,0) issued_qty
                                                      from mv_invoice_mst m,  mv_invoice_dtl  d
                                                      where m.inv_mst_slno=d.inv_mst_slno  
                                                      and   m.inv_type_code='INV001'
                                                      and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                      and   trunc(m.invoice_date) between fromdate and todate
                                                      and   (m.customer_code = customerCode or customerCode='ALL')
                                                      and   (d.product_code = productCode or productCode='ALL')
                                                    )a,
                                               
                                                    (                        
                                                    select   m.invoice_no,                     
                                                             d.product_code,
                                                             nvl(d.return_qty,0) return_qty
                                                     from     mv_ret_return_mst m, mv_ret_return_dtl d
                                                     where    m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                                     and     trunc(m.invoice_date) between fromdate and todate
                                                     and     m.inv_type_code='INV001'          
                                                     and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                   ) b
                                               where a.invoice_no = b.invoice_no(+)    
                                               and  a.product_code=b.product_code(+)
                                               group by  a.customer_code,a.market_code,a.invoice_date,a.product_code                                                                        
                                               
                                               
                                               )
                                        )
                                        group by  customer_code,market_code,product_code
                                        
                                      
                                        union all
                                               
                                    select b.customer_code,a.market_code, a.product_code, 
                                           0 day_01,0 day_02,0 day_03,0 day_04,0 day_05,0 day_06,0 day_07,0 day_08,0 day_09,0 day_10,
                                           0 day_11,0 day_12,0 day_13,0 day_14,0 day_15,0 day_16,0 day_17,0 day_18,0 day_19,0 day_20,
                                           0 day_21,0 day_22,0 day_23,0 day_24,0 day_25,0 day_26,0 day_27,0 day_28,0 day_29,0 day_30,0 day_31,
                                           sum(nvl (a.target_qty, 0)) target_qty
                                    from   mv_target_l3years a, mv_division_customer_relation b
                                    where  a.market_code=b.market_code                                        
                                    and   (a.year||a.month_code) between to_char(to_date(fromdate,'dd/mm/rrrr'),'rrrrmm') and to_char(to_date(todate,'dd/mm/rrrr'),'rrrrmm')    
                                    and   (b.customer_code = customerCode or customerCode='ALL')
                                    and   (a.product_code = productCode or productCode='ALL')                                    
                                    and   a.product_code in (select product_code from user_product_dtl where user_id=userId)
                                    group by  b.customer_code,a.market_code,a.product_code
                                    
                                    )                                    
                                   group by  customer_code,market_code,product_code 
                                )a, mv_division_customer_relation b,mv_product_info c                                       
                                where a.market_code=b.market_code(+)
                                and   a.product_code=c.product_code(+)                                                                                                                                                
                                and  (b.zone_code = divisionCode or divisionCode='ALL')
                                and  (b.area_code = regionCode or regionCode='ALL')
                                and  (b.belt_code = areaCode or areaCode='ALL')
                                and  (b.territory_code = territoryCode or territoryCode='ALL')  
                                and  (a.customer_code = customerCode or customerCode='ALL') 
                                and   (a.product_code = productCode or productCode='ALL')  
                                order by b.zone_name,b.area_name,b.belt_name,b.territory_name,b.customer_name,b.market_name,c.product_name;   
           
           end;     
     
     
     end if;      

    return product_ims;
    
exception
   when no_data_found
   then
   open product_ims for
         select *
           from dual
          where 1 = 2;
      return product_ims;
end;
/

CREATE OR REPLACE function             FN_INVOICE_WISE_PRODUCT_SALES(  p_from_date varchar2,
                                                                       p_to_date varchar2,
                                                                       p_product_code varchar2,
                                                                       p_division_code varchar2, 
                                                                       p_region_code varchar2,
                                                                       p_area_code varchar2,
                                                                       p_territory_code varchar2,
                                                                       p_customer_code varchar2
                                                                       )
   return sys_refcursor
as
   product_ims       sys_refcursor;  
   
   
   pfrom_date date              := to_date(p_from_date,'DD/MM/RRRR'); 
   pto_date date                := to_date(p_to_date,'DD/MM/RRRR');
   productCode varchar2(100)    :=p_product_code;
   
   divisionCode varchar2(100)   :=p_division_code;
   regionCode varchar2(100)     :=p_region_code;
   areaCode varchar2(100)       :=p_area_code;
   territoryCode varchar2(100)  :=p_territory_code;
   customerCode varchar2(100)   :=p_customer_code;   

begin
   open product_ims for                                                                            
                 select  
                        zone_code division_code, 
                        zone_name division_name, 
                        area_code region_code, 
                        area_name region_name, 
                        belt_code area_code, 
                        belt_name area_name, 
                        territory_code, 
                        territory_name,  
                        a.customer_code,
                        customer_name, 
                        db_location,                
                        a.market_code,
                        market_name,
                        a.route_code,
                        d.route_name,
                        a.retailer_code,
                        e.retailer_name,
                        a.invoice_no,
                        to_char(a.invoice_date,'MM/DD/RRRR') invoice_date,            
                        a.product_code,
                        c.product_name,
                        c.pack_size,        
                        a.product_price,
                        nvl(a.sales_qty,0) sales_qty,
                        nvl(b.return_qty,0) return_qty,
                        nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_ims_qty,
                        nvl(a.sales_value,0) sales_value,
                        nvl(b.return_value,0) return_value,
                        nvl(a.sales_value,0)- nvl(b.return_value,0) net_ims_value       
                from
                    (    
                     select m.customer_code,
                            m.market_code,
                            m.route_code,
                            m.retailer_code,
                            m.invoice_no,
                            trunc(m.invoice_date) invoice_date,            
                            d.product_code,
                            d.product_price,
                            nvl(d.issued_qty,0) sales_qty,
                            nvl(d.total_val,0)-nvl(d.bonus_price_discount,0) sales_value
                            from vw_invoice_mst m,  vw_invoice_dtl  d
                            where m.inv_mst_slno=d.inv_mst_slno  
                            and  (d.product_code = productCode or productCode='ALL')
                            and  (m.customer_code = customerCode or customerCode='ALL')
                            and   trunc(m.invoice_date) between pfrom_date and pto_date
                            and   m.inv_type_code='INV001'
                    )a,
                    (                
                     select  m.invoice_no,
                             d.product_code,
                             nvl(d.return_qty,0) return_qty,
                             nvl(d.return_value,0) return_value
                     from    vw_ret_return_mst m, vw_ret_return_dtl d
                     where   m.ret_recv_mst_slno = d.ret_recv_mst_slno       
                 ) b,mv_product_info c,mv_route_info d,mv_retailer_info e,mv_division_customer_relation f
                where a.invoice_no=b.invoice_no(+)  
                and   a.product_code=b.product_code(+) 
                and   a.product_code=c.product_code(+)
                and   a.route_code=d.route_code(+)
                and   a.retailer_code=e.retailer_code(+)
                and   a.market_code=f.market_code(+)
                and  (f.zone_code = divisionCode or divisionCode='ALL')
                and  (f.area_code = regionCode or regionCode='ALL')
                and  (f.belt_code = areaCode or areaCode='ALL')
                and  (f.territory_code = territoryCode or territoryCode='ALL')  
                and  (a.customer_code = customerCode or customerCode='ALL') 
                and  (a.product_code = productCode or productCode='ALL')  
                order by f.zone_name,f.area_name,f.belt_name,f.territory_name,f.customer_name,f.market_name,d.route_name,e.retailer_name,a.invoice_no,c.product_name;       
      


   
    return product_ims;
    
exception
   when no_data_found
   then
   open product_ims for
         select *
           from dual
          where 1 = 2;
      return product_ims;
end;
/

CREATE OR REPLACE function             fn_sales_register_date_range(   
                                                    pfrom_date varchar2,
                                                    pto_date varchar2,
                                                    pdivision_code varchar2, 
                                                    pregion_code varchar2,
                                                    parea_code varchar2,
                                                    pterritory_code varchar2,
                                                    pcustomer_code varchar2
                                                    )
   return sys_refcursor
as
   Invoice_Ims       sys_refcursor;  
   
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Invoice_Ims for                                                                            
                       SELECT a.division_code,
                              a.division_name,
                              a.region_code,
                              a.region_name,
                              a.area_code,
                              a.area_name,
                              a.territory_code,
                              a.territory_name,
                              a.customer_code,
                              a.customer_name,
                              c.db_location,
                              a.market_code,
                              a.market_name,
                              a.route_code,
                              a.route_name,
                              NVL (a.order_value, 0) order_value,
                              NVL (b.net_inv_amount, 0) invoice_amount,
                              NVL (b.net_return_val, 0) return_amount,
                              NVL (b.net_ims, 0) net_ims,
                              a.no_of_ordering_ret no_of_ordering_outlet,
                              a.total_route_retailer,
                              a.no_of_route_visit,
                              a.total_visit_retailer,
                              a.no_of_ordering_sku,
                              a.productivity_call,
                              a.lpc
                         FROM 
                             (   
                             select b.zone_code division_code,
                                    b.zone_name division_name,
                                    b.area_code region_code,
                                    b.area_name region_name,
                                    b.belt_code area_code,
                                    b.belt_name area_name,
                                    b.territory_code territory_code,
                                    b.territory_name territory_name,
                                    a.customer_code,
                                    b.customer_name,
                                    b.db_location,       
                                    a.market_code, 
                                    b.market_name,       
                                    a.route_code,
                                    c.route_name,       
                                    a.total_route_retailer,
                                    a.no_of_route_visit,
                                    a.total_visit_retailer,
                                    a.no_of_normal_order,
                                    a.no_of_replace_order,
                                    a.order_value,
                                    a.no_of_ordering_ret,
                                    a.no_of_ordering_sku,
                                    a.productivity_call,
                                    a.lpc
                             from 
                                 (
                                 select customer_code,       
                                        market_code,        
                                        route_code,       
                                        total_route_retailer,
                                        sum (no_of_route_visit) no_of_route_visit,
                                        sum (total_visit_retailer) total_visit_retailer,
                                        sum (no_of_normal_order) no_of_normal_order,
                                        sum (no_of_replace_order) no_of_replace_order,
                                        sum (order_value) order_value,
                                        sum (no_of_ordering_ret) no_of_ordering_ret,
                                        sum (no_of_ordering_sku) no_of_ordering_sku,
                                        nvl (round ((  sum (no_of_ordering_ret)/ decode (sum (total_route_retailer* nvl (no_of_route_visit, 1)),0, 1, sum (total_route_retailer* nvl (no_of_route_visit, 1))))* 100),0)productivity_call,
                                        nvl (round (sum (nvl (no_of_ordering_sku, 0))/ decode (sum (nvl (no_of_ordering_ret, 0)),0, 1,sum (nvl (no_of_ordering_ret, 0))),2),0)lpc
                                 from mv_view_cust_order_summary
                                 where to_date (order_date, 'DD/MM/RRRR') between fdate  and  tdate
                                 group by customer_code,market_code,route_code,total_route_retailer     
                                 )a, mv_division_customer_relation b, mv_route_info c
                              where a.market_code=b.market_code
                              and   a.route_code=c.route_code 
                             ) a,
                             (  
                                 SELECT customer_code,
                                        market_code,
                                        route_code,
                                        SUM (NVL (net_inv_amount, 0)) net_inv_amount,
                                        SUM (NVL (net_return_val, 0)) net_return_val,
                                          SUM (NVL (net_inv_amount, 0)) - SUM (NVL (net_return_val, 0))net_ims
                                   FROM (SELECT a.invoice_no,
                                                market_code,
                                                route_code,
                                                customer_code,
                                                NVL (net_inv_amount, 0) net_inv_amount,
                                                NVL (net_return_val, 0) net_return_val
                                           FROM (SELECT invoice_no,
                                                        NVL (net_inv_amount, 0) net_inv_amount,
                                                        market_code,
                                                        customer_code,
                                                        route_code
                                                   FROM mv_invoice_mst
                                                  WHERE     inv_type_code = 'INV001'
                                                        AND TRUNC (invoice_date) between fDate  and  tDate
                                                                                            
                                                )a,
                                                (SELECT r.invoice_no,
                                                        NVL (r.net_return_val, 0) net_return_val
                                                   FROM mv_ret_return_mst r
                                                  WHERE TRUNC (r.invoice_date) between fDate  and  tDate
                                              )b
                                          WHERE a.invoice_no = b.invoice_no(+))
                               GROUP BY market_code, route_code, customer_code
                             ) b, mv_customer_info c
                        WHERE a.customer_code = b.customer_code(+)
                        AND   a.market_code = b.market_code(+)
                        AND   a.route_code = b.route_code(+)
                        AND   a.customer_code = c.customer_code(+) 
                        
                        
                        and  (a.division_code = dCode or dCode='ALL')
                        and  (a.region_code = rCode or rCode='ALL')
                        and  (a.area_code = aCode or aCode='ALL')
                        and  (a.territory_code = tCode or tCode='ALL')  
                        and  (a.customer_code = cCode or cCode='ALL');
    
    


   
    return Invoice_Ims;
    
exception
   when no_data_found
   then
   open Invoice_Ims for
         select *
           from dual
          where 1 = 2;
      return Invoice_Ims;
end;
/

CREATE OR REPLACE function             FN_ROUTE_ORDER_COUNT(p_from_date varchar2,p_to_date varchar2,p_division_code varchar2, p_region_code varchar2,p_area_code varchar2,p_territory_code varchar2,p_customer_code varchar2)
   return sys_refcursor
as
   route_order_count      sys_refcursor;  
   
   
   v_from_date date                  :=to_date(p_from_date,'DD/MM/RRRR'); 
   v_to_date date                    :=to_date(p_to_date,'DD/MM/RRRR'); 
   v_division_code varchar2(100)     :=p_division_code;
   v_region_code varchar2(100)       :=p_region_code;
   v_area_code varchar2(100)         :=p_area_code;
   v_territory_code varchar2(100)    :=p_territory_code;
   v_customer_code varchar2(100)     :=p_customer_code;


begin
   open route_order_count for
            select 
                   c.zone_code division_code, 
                   c.zone_name division_name, 
                   c.area_code region_code, 
                   c.area_name region_name, 
                   c.belt_code area_code, 
                   c.belt_name area_name, 
                   c.territory_code, 
                   c.territory_name, 
                   a.market_code,
                   c.market_name, 
                   a.customer_code,
                   c.customer_name,
                   c.db_location,
                   a.route_code,
                   fn_route_name(a.route_code) route_name ,
                   a.no_of_normal_order,
                   a.replace_order no_of_replace_order,
                   a.order_value,
                   a.no_of_ordering_ret no_of_ordering_retailer,
                   a.no_of_ordering_sku,
                   a.no_of_route_visit,
                   nvl(b.total_route_retailer,0) total_route_retailer,
                   no_of_retailer_visit  total_visit_retailer,            
                   --nvl (b.total_route_retailer, 0) * nvl (a.no_of_route_visit, 1) total_visit_retailer,       
                   nvl (round (((a.no_of_ordering_ret) / decode ( (b.total_route_retailer * nvl (a.no_of_route_visit, 1)),0, 1, (b.total_route_retailer * nvl (a.no_of_route_visit, 1))))* 100),0)||'%' productivity_call,
                   nvl (round ((nvl (a.no_of_ordering_sku,0))/ decode ( (nvl (a.no_of_ordering_ret, 0)),0, 1, (nvl (a.no_of_ordering_ret, 0))),2),0) lpc       
            from 
                 ( 
                    select customer_code,
                           market_code,
                           route_code,
                           sum (no_of_normal_order) no_of_normal_order,
                           sum (replace_order) replace_order,
                           sum (order_value) order_value,
                           sum (no_of_ordering_ret) no_of_ordering_ret,
                           sum (no_of_ordering_sku) no_of_ordering_sku,
                           sum (no_of_route_visit) no_of_route_visit,
                           sum (no_of_retailer_visit) no_of_retailer_visit
                    from 
                         (    
                     
                            select customer_code,
                                   market_code,
                                   route_code,
                                   sum (no_of_normal_order) no_of_normal_order,
                                   sum (replace_order) replace_order,
                                   0 order_value,
                                   0 no_of_ordering_ret,
                                   0 no_of_ordering_sku,
                                   0 no_of_route_visit,
                                   0 no_of_retailer_visit
                            from 
                                 (  
                                  select customer_code,
                                         market_code,
                                         route_code,
                                         count (order_no) no_of_normal_order,
                                         0 replace_order
                                  from   vw_order_mst
                                  where  order_type = 'INV001'
                                  and    trunc(order_date) between v_from_date and  v_to_date
                                  and    (customer_code = v_customer_code or v_customer_code='ALL')
                                  group by customer_code, market_code, route_code
                                                          
                                  union all
                                                          
                                  select customer_code,
                                         market_code,
                                         route_code,
                                         0 no_of_normal_order,
                                         count (order_no) replace_order
                                  from   vw_order_mst 
                                  where  order_type = 'INV002'
                                  and    trunc(order_date) between v_from_date and  v_to_date
                                  and    (customer_code = v_customer_code or v_customer_code='ALL')
                                  group by customer_code, market_code, route_code
                                )
                            group by customer_code, market_code, route_code
                                              
                                              
                            union all
                                              
                                              
                            select customer_code,
                                   market_code,
                                   route_code,
                                   0 no_of_normal_order,
                                   0 replace_order,
                                   sum (order_val) order_value,
                                   0 no_of_ordering_ret,
                                   0 no_of_ordering_sku,
                                   0 no_of_route_visit,
                                   0 no_of_retailer_visit
                            from (
                                    select m.order_date,
                                           m.customer_code,
                                           m.route_code,
                                           m.market_code,
                                           m.employee_code,
                                           d.product_code,
                                           decode (d.revised_order_qty, null, d.order_qty,d.revised_order_qty)order_qty,
                                           decode (d.revised_order_qty,null, d.order_qty,d.revised_order_qty)* nvl (product_price, 0) order_val
                                    from   vw_order_mst m, vw_order_dtl d
                                    where  m.order_mst_slno = d.order_mst_slno
                                    and    m.order_type = 'INV001'
                                    and   trunc(m.order_date) between v_from_date and  v_to_date
                                    and   (m.customer_code = v_customer_code or v_customer_code='ALL')
                                    )
                            group by customer_code, market_code, route_code


                            union all
                          
                            select customer_code,
                                   market_code,
                                   route_code,
                                   0 no_of_normal_order,
                                   0 replace_order,
                                   0 order_value,       
                                   sum (no_of_ordering_ret) no_of_ordering_ret,
                                   0 no_of_ordering_sku,
                                   0 no_of_route_visit,
                                   0 no_of_retailer_visit
                            from (  
                                    select customer_code,
                                           market_code,
                                           route_code,
                                           count (retailer_code) no_of_ordering_ret
                                    from (
                                           select distinct 
                                                  order_date,
                                                  retailer_code,
                                                  customer_code,
                                                  market_code,
                                                  route_code
                                           from   vw_order_mst
                                           where  order_type = 'INV001'
                                           and   trunc(order_date) between v_from_date and  v_to_date
                                           and   (customer_code = v_customer_code or v_customer_code='ALL')
                                          )
                                    group by customer_code, market_code, route_code
                                )
                            group by customer_code, market_code, route_code    

                            union all

                            select customer_code,
                                   market_code,
                                   route_code,
                                   0 no_of_normal_order,
                                   0 replace_order,
                                   0 order_value,       
                                   0 no_of_ordering_ret,       
                                   count (product_code) no_of_ordering_sku,
                                   0 no_of_route_visit,
                                   0 no_of_retailer_visit
                            from (
                                    select --distinct
                                           m.customer_code,
                                           m.market_code,
                                           m.route_code,
                                           d.product_code
                                    from   vw_order_mst m, vw_order_dtl d
                                    where  m.order_mst_slno = d.order_mst_slno
                                    and    m.order_type = 'INV001'
                                    and    trunc(m.order_date) between v_from_date and  v_to_date
                                    and    (m.customer_code = v_customer_code or v_customer_code='ALL')
                                    )                    
                            group by customer_code, market_code, route_code

                            union all

                            select customer_code,
                                   market_code,
                                   route_code,
                                   0 no_of_normal_order,
                                   0 replace_order,
                                   0 order_value,       
                                   0 no_of_ordering_ret,       
                                   0 no_of_ordering_sku,       
                                   count (route_code) no_of_route_visit,
                                   0 no_of_retailer_visit
                            from (  
                                 select distinct 
                                        order_date,
                                        customer_code,
                                        market_code,
                                        route_code
                                 from   vw_order_mst
                                 where  trunc(order_date) between v_from_date and  v_to_date 
                                 and    (customer_code = v_customer_code or v_customer_code='ALL')                       
                                 )
                            group by customer_code, market_code, route_code

                    
                    union all
                    
                            select customer_code,
                                   market_code,
                                   route_code,
                                   0 no_of_normal_order,
                                   0 replace_order,
                                   0 order_value,       
                                   0 no_of_ordering_ret,       
                                   0 no_of_ordering_sku,
                                   0 no_of_route_visit,       
                                   count (retailer_code) no_of_retailer_visit
                            from (  
                                 select distinct
                                        order_date,
                                        customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                                 from   vw_order_mst
                                 where  trunc(order_date) between v_from_date and  v_to_date 
                                 and    (customer_code = v_customer_code or v_customer_code='ALL')                           
                                 )
                            group by customer_code, market_code, route_code                                        
                    )
                    group by customer_code, market_code, route_code
                    )a,
                    (                    
                      select   a.market_code,
                               a.route_code,
                               count (distinct a.retailer_code) total_route_retailer
                      from mv_division_retailer_relation a
                      group by a.market_code,a.route_code                                                      
                    ) b, mv_division_customer_relation c
            where a.market_code=b.market_code(+)
            and   a.route_code=b.route_code(+) 
            and   a.market_code=c.market_code(+) 
            and   (c.zone_code = v_division_code or v_division_code='ALL')  
            and   (c.area_code = v_region_code or v_region_code='ALL')
            and   (c.belt_code = v_area_code or v_area_code='ALL')
            and   (c.territory_code = v_territory_code or v_territory_code='ALL')
            and   (a.customer_code = v_customer_code or v_customer_code='ALL'); 
         
    
    


   
    return route_order_count;
    
exception
   when no_data_found
   then
   open route_order_count for
         select *
           from dual
          where 1 = 2;
      return route_order_count;
end;
/

CREATE OR REPLACE function             FN_SKU_NUMERIC_SAL_ANALYSIS(pfrom_date varchar2,
                                                                  pto_date varchar2,
                                                                  pdivision_code varchar2, 
                                                                  pregion_code varchar2,
                                                                  parea_code varchar2,
                                                                  pterritory_code varchar2,
                                                                  pcustomer_code varchar2,
                                                                  pproduct_category varchar2,
                                                                  puser_id number
                                                                  )
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   pcCode varchar2(100)   :=pproduct_category;
   userId   number        :=puser_id;
   vCount   number:=0;   

begin

   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 


     if vCount = 0 then 
     
     
           begin
           
                   open Ims for                                                                            
                                select  /*+ append */
                                        c.zone_code division_code, 
                                        c.zone_name division_name, 
                                        c.area_code region_code, 
                                        c.area_name region_name, 
                                        c.belt_code area_code, 
                                        c.belt_name area_name, 
                                        c.territory_code, 
                                        c.territory_name,     
                                        a.market_code,
                                        c.market_name,
                                        C.customer_code,
                                        c.customer_name, 
                                        c.db_location,
                                        b.total_retailer,                       
                                        d.product_category product_category_code,
                                        e.category_name product_category_name,
                                        a.product_code,
                                        d.product_name,
                                        d.pack_size,                    
                                        nvl(a.no_of_retailer,0) no_of_retailer,
                                        nvl(round(a.order_qty/decode(a.no_of_retailer,0,1,a.no_of_retailer)),0) avg_order_qty_per_ret,
                                        nvl(round(a.sales_qty/decode(a.no_of_invoice,0,1,a.no_of_invoice)),0) avg_sales_qty_per_invoice,
                                        nvl(a.ret_avg_sales_qty_per_month,0) avg_sales_qty_per_month_ret

                                from
                                   (
                                        select  market_code,
                                                product_code, 
                                                sum(nvl(no_of_retailer,0)) no_of_retailer,
                                                sum(nvl(order_qty,0)) order_qty,
                                                sum(nvl(sales_qty,0)) sales_qty,
                                                sum(nvl(no_of_invoice,0)) no_of_invoice,
                                                sum(nvl(ret_avg_sales_qty_per_month,0)) ret_avg_sales_qty_per_month
                                        from
                                            (            
                                                select  market_code,
                                                        product_code, 
                                                        no_of_retailer,
                                                        0 order_qty,
                                                        0 sales_qty,
                                                        0 no_of_invoice,
                                                        0 ret_avg_sales_qty_per_month
                                                from
                                                    (
                                                        select  market_code,product_code, count( distinct retailer_code) no_of_retailer
                                                        from
                                                            (
                                                            select  a.market_code,a.product_code, a.retailer_code
                                                            from
                                                                (
                                                                     select  a.invoice_no, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                                                                     from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                                     where   a.inv_mst_slno=b.inv_mst_slno
                                                                     and     a.inv_type_code='INV001'
                                                                     and     trunc(a.invoice_date) between fDate and tDate
                                                                     and     b.product_code =  p.product_code
                                                                     and    (p.product_category = pcCode or pcCode='ALL')
                                                                     
                                                                 )a,                         
                                                                 ( 
                                                                    select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                                                                    from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                                    

                                                                 )b
                                                            where a.invoice_no=b.invoice_no(+)
                                                            and   a.product_code=b.product_code(+)
                                                            and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                        )
                                                        group by  market_code,product_code  
                                                  )       
                                                      
                                                union all

                                                select  market_code,
                                                        product_code, 
                                                        0 no_of_retailer, 
                                                        order_qty,
                                                        0 sales_qty,
                                                        0 no_of_invoice,
                                                        0 ret_avg_sales_qty_per_month
                                                from
                                                    (
                                                    select  m.market_code,d.product_code,  sum(d.order_qty) order_qty
                                                    from    mv_order_mst m,  mv_order_dtl d,mv_product_info p
                                                    where   m.order_mst_slno=d.order_mst_slno
                                                    and     trunc(order_date) between fDate and tDate
                                                    and    d.product_code =  p.product_code
                                                    and    (p.product_category = pcCode or pcCode='ALL')                                                    
                                                    group by market_code,d.product_code
                                                    )      

                                        union all

                                            select  market_code,
                                                    product_code,
                                                    0 no_of_retailer, 
                                                    0 order_qty,             
                                                    sales_qty,
                                                    0 no_of_invoice,
                                                    0 ret_avg_sales_qty_per_month
                                            from
                                                (

                                                select  market_code,product_code, sum(nvl(net_sales_qty,0)) sales_qty
                                                from
                                                    (
                                                        select   a.market_code,a.product_code,   nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                                                        from
                                                            (
                                                                 select  a.invoice_no,a.market_code,b.product_code, nvl(b.issued_qty,0) sales_qty
                                                                 from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                                 where   a.inv_mst_slno=b.inv_mst_slno
                                                                 and     a.inv_type_code='INV001'
                                                                 and     trunc(a.invoice_date) between fDate and tDate
                                                                 and     b.product_code =  p.product_code
                                                                 and    (p.product_category = pcCode or pcCode='ALL')
                                                                 
                                                             )a,    
                                                                 
                                                             ( 
                                                                select  a.invoice_no,b.product_code, nvl(b.return_qty,0) return_qty
                                                                from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                                where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                                
                                                             )b
                                                        where a.invoice_no=b.invoice_no(+)
                                                        and   a.product_code=b.product_code(+)
                                                        and  nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                 )
                                                 group by market_code,product_code
                                             )

                                        union all

                                            select  market_code,
                                                    product_code,
                                                    0 no_of_retailer, 
                                                    0 order_qty,             
                                                    0 sales_qty,             
                                                    no_of_invoice,
                                                    0 ret_avg_sales_qty_per_month
                                            from
                                                (

                                                select  market_code,product_code, count( distinct invoice_no) no_of_invoice
                                                from
                                                    (

                                                    select  a.market_code,a.product_code, a.invoice_no,  nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                                                    from
                                                        (
                                                             select  a.invoice_no, a.market_code,b.product_code,nvl(b.issued_qty,0) sales_qty
                                                             from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                             where   a.inv_mst_slno=b.inv_mst_slno
                                                             and     a.inv_type_code='INV001'
                                                             and     trunc(a.invoice_date) between fDate and tDate
                                                             and     b.product_code =  p.product_code
                                                             and    (p.product_category = pcCode or pcCode='ALL')
                                                             
                                                         )a,    
                                                             
                                                         ( 
                                                            select  a.invoice_no,b.product_code, nvl(b.return_qty,0) return_qty
                                                            from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                            

                                                         )b
                                                    where a.invoice_no=b.invoice_no(+)
                                                    and   a.product_code=b.product_code(+)
                                                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                )
                                                group by  market_code,product_code
                                           )

                                        union all

                                             select market_code, 
                                                    product_code,
                                                    0 no_of_retailer, 
                                                    0 order_qty,             
                                                    0 sales_qty,             
                                                    0 no_of_invoice,           
                                                    ret_avg_sales_qty_per_month
                                            from
                                                 (
                                                select a.market_code, a.product_code,
                                                round(sum(sales_qty/no_of_retailer)/count(a.month_code)) ret_avg_sales_qty_per_month
                                                from
                                                     (
                                                            select  market_code,product_code,month_code,  sum(nvl(sales_qty,0)) sales_qty
                                                            from
                                                                (

                                                                    select  a.market_code,a.product_code, to_char(a.invoice_date,'MM') month_code,  nvl(a.sales_qty,0)-nvl(b.return_qty,0) sales_qty
                                                                    from
                                                                        (
                                                                             select  a.invoice_no,trunc(a.invoice_date) invoice_date, a.market_code,b.product_code,nvl(b.issued_qty,0) sales_qty
                                                                             from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                                             where   a.inv_mst_slno=b.inv_mst_slno
                                                                             and     a.inv_type_code='INV001'
                                                                             and     trunc(a.invoice_date) between fDate and tDate
                                                                             and     b.product_code =  p.product_code
                                                                             and    (p.product_category = pcCode or pcCode='ALL')
                                                                             
                                                                         )a,    
                                                                                 
                                                                         ( 
                                                                            select  a.invoice_no,b.product_code, nvl(b.return_qty,0) return_qty
                                                                            from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                                            
                                                                                
                                                                         )b
                                                                    where a.invoice_no=b.invoice_no(+)
                                                                    and   a.product_code=b.product_code(+)
                                                                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                                        
                                                               )
                                                               group by market_code,product_code,month_code
                                                 

                                                     ) a,
                                             
                                                     (
                                                                           
                                                        select  market_code,product_code,month_code,count(distinct retailer_code) no_of_retailer
                                                        from
                                                            (
                                                            select  distinct retailer_code,customer_code,market_code,product_code,month_code
                                                            from
                                                                (
                                                                select  a.retailer_code,a.customer_code, a.market_code,a.product_code, to_char(a.invoice_date,'MM') month_code
                                                                from
                                                                    (
                                                                         select  a.retailer_code,a.invoice_no,trunc(a.invoice_date) invoice_date,a.customer_code, a.market_code,b.product_code,nvl(b.issued_qty,0) sales_qty
                                                                         from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                                         where   a.inv_mst_slno=b.inv_mst_slno
                                                                         and     a.inv_type_code='INV001'
                                                                         and     trunc(a.invoice_date) between fDate and tDate
                                                                         and     b.product_code =  p.product_code
                                                                         and    (p.product_category = pcCode or pcCode='ALL')
                                                                         

                                                                     )a,    
                                                                         
                                                                     ( 
                                                                        select  a.invoice_no,b.product_code, nvl(b.return_qty,0) return_qty
                                                                        from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                                        where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                                                                     )b
                                                                where a.invoice_no=b.invoice_no(+)
                                                                and   a.product_code=b.product_code(+)
                                                                and nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                            )
                                                        )
                                                        group by market_code,product_code,month_code

                                                         
                                                     ) b
                                                     where a.market_code=b.market_code
                                                     and   a.month_code=b.month_code
                                                     and a.product_code= b.product_code
                                                     group by a.market_code,a.product_code  

                                              )

                                        )    
                                        group by  market_code,product_code 
                                         )a, 
                                        (
                                          select market_code,count(retailer_code) total_retailer
                                          from mv_division_retailer_relation
                                          group by market_code
                                        )b, mv_division_customer_relation c,mv_product_info d,mv_category_info e
                                        where a.market_code=b.market_code(+)
                                        and   a.market_code=c.market_code(+)
                                        and   a.product_code=d.product_code
                                        and   d.product_category=e.category_code
                                        and   d.product_category=e.category_code

                                        and  (c.zone_code = dCode or dCode='ALL')
                                        and  (c.area_code = rCode or rCode='ALL')
                                        and  (c.belt_code = aCode or aCode='ALL')
                                        and  (c.territory_code = tCode or tCode='ALL')  
                                        and  (C.customer_code = cCode or cCode='ALL')
                                        and  (d.product_category = pcCode or pcCode='ALL'); 
          
          end;
      
     else
     
        begin
        
                    open Ims for                                                                            
                                select  /*+ append */
                                        c.zone_code division_code, 
                                        c.zone_name division_name, 
                                        c.area_code region_code, 
                                        c.area_name region_name, 
                                        c.belt_code area_code, 
                                        c.belt_name area_name, 
                                        c.territory_code, 
                                        c.territory_name,     
                                        a.market_code,
                                        c.market_name,
                                        C.customer_code,
                                        c.customer_name, 
                                        c.db_location,
                                        b.total_retailer,                       
                                        d.product_category product_category_code,
                                        e.category_name product_category_name,
                                        a.product_code,
                                        d.product_name,
                                        d.pack_size,                    
                                        nvl(a.no_of_retailer,0) no_of_retailer,
                                        nvl(round(a.order_qty/decode(a.no_of_retailer,0,1,a.no_of_retailer)),0) avg_order_qty_per_ret,
                                        nvl(round(a.sales_qty/decode(a.no_of_invoice,0,1,a.no_of_invoice)),0) avg_sales_qty_per_invoice,
                                        nvl(a.ret_avg_sales_qty_per_month,0) avg_sales_qty_per_month_ret

                                from
                                   (
                                        select  market_code,
                                                product_code, 
                                                sum(nvl(no_of_retailer,0)) no_of_retailer,
                                                sum(nvl(order_qty,0)) order_qty,
                                                sum(nvl(sales_qty,0)) sales_qty,
                                                sum(nvl(no_of_invoice,0)) no_of_invoice,
                                                sum(nvl(ret_avg_sales_qty_per_month,0)) ret_avg_sales_qty_per_month
                                        from
                                            (            
                                                select  market_code,
                                                        product_code, 
                                                        no_of_retailer,
                                                        0 order_qty,
                                                        0 sales_qty,
                                                        0 no_of_invoice,
                                                        0 ret_avg_sales_qty_per_month
                                                from
                                                    (
                                                        select  market_code,product_code, count( distinct retailer_code) no_of_retailer
                                                        from
                                                            (
                                                            select  a.market_code,a.product_code, a.retailer_code
                                                            from
                                                                (
                                                                     select  a.invoice_no, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                                                                     from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                                     where   a.inv_mst_slno=b.inv_mst_slno
                                                                     and     a.inv_type_code='INV001'
                                                                     and     trunc(a.invoice_date) between fDate and tDate
                                                                     and     b.product_code =  p.product_code
                                                                     and    (p.product_category = pcCode or pcCode='ALL')
                                                                     and     b.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                 )a,                         
                                                                 ( 
                                                                    select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                                                                    from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                                    and     b.product_code in (select product_code from user_product_dtl where user_id=userId)

                                                                 )b
                                                            where a.invoice_no=b.invoice_no(+)
                                                            and   a.product_code=b.product_code(+)
                                                            and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                        )
                                                        group by  market_code,product_code  
                                                  )       
                                                      
                                                union all

                                                select  market_code,
                                                        product_code, 
                                                        0 no_of_retailer, 
                                                        order_qty,
                                                        0 sales_qty,
                                                        0 no_of_invoice,
                                                        0 ret_avg_sales_qty_per_month
                                                from
                                                    (
                                                    select  m.market_code,d.product_code,  sum(d.order_qty) order_qty
                                                    from    mv_order_mst m,  mv_order_dtl d,mv_product_info p
                                                    where   m.order_mst_slno=d.order_mst_slno
                                                    and     trunc(order_date) between fDate and tDate
                                                    and    d.product_code =  p.product_code
                                                    and    (p.product_category = pcCode or pcCode='ALL')
                                                    and     D.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                    group by market_code,d.product_code
                                                    )      

                                        union all

                                            select  market_code,
                                                    product_code,
                                                    0 no_of_retailer, 
                                                    0 order_qty,             
                                                    sales_qty,
                                                    0 no_of_invoice,
                                                    0 ret_avg_sales_qty_per_month
                                            from
                                                (

                                                select  market_code,product_code, sum(nvl(net_sales_qty,0)) sales_qty
                                                from
                                                    (
                                                        select   a.market_code,a.product_code,   nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                                                        from
                                                            (
                                                                 select  a.invoice_no,a.market_code,b.product_code, nvl(b.issued_qty,0) sales_qty
                                                                 from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                                 where   a.inv_mst_slno=b.inv_mst_slno
                                                                 and     a.inv_type_code='INV001'
                                                                 and     trunc(a.invoice_date) between fDate and tDate
                                                                 and     b.product_code =  p.product_code
                                                                 and    (p.product_category = pcCode or pcCode='ALL')
                                                                 and     b.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                             )a,    
                                                                 
                                                             ( 
                                                                select  a.invoice_no,b.product_code, nvl(b.return_qty,0) return_qty
                                                                from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                                where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                                and     b.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                             )b
                                                        where a.invoice_no=b.invoice_no(+)
                                                        and   a.product_code=b.product_code(+)
                                                        and  nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                 )
                                                 group by market_code,product_code
                                             )

                                        union all

                                            select  market_code,
                                                    product_code,
                                                    0 no_of_retailer, 
                                                    0 order_qty,             
                                                    0 sales_qty,             
                                                    no_of_invoice,
                                                    0 ret_avg_sales_qty_per_month
                                            from
                                                (

                                                select  market_code,product_code, count( distinct invoice_no) no_of_invoice
                                                from
                                                    (

                                                    select  a.market_code,a.product_code, a.invoice_no,  nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                                                    from
                                                        (
                                                             select  a.invoice_no, a.market_code,b.product_code,nvl(b.issued_qty,0) sales_qty
                                                             from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                             where   a.inv_mst_slno=b.inv_mst_slno
                                                             and     a.inv_type_code='INV001'
                                                             and     trunc(a.invoice_date) between fDate and tDate
                                                             and     b.product_code =  p.product_code
                                                             and    (p.product_category = pcCode or pcCode='ALL')
                                                             and     b.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                         )a,    
                                                             
                                                         ( 
                                                            select  a.invoice_no,b.product_code, nvl(b.return_qty,0) return_qty
                                                            from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                            and     b.product_code in (select product_code from user_product_dtl where user_id=userId)

                                                         )b
                                                    where a.invoice_no=b.invoice_no(+)
                                                    and   a.product_code=b.product_code(+)
                                                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                )
                                                group by  market_code,product_code
                                           )

                                        union all

                                             select market_code, 
                                                    product_code,
                                                    0 no_of_retailer, 
                                                    0 order_qty,             
                                                    0 sales_qty,             
                                                    0 no_of_invoice,           
                                                    ret_avg_sales_qty_per_month
                                            from
                                                 (
                                                select a.market_code, a.product_code,
                                                round(sum(sales_qty/no_of_retailer)/count(a.month_code)) ret_avg_sales_qty_per_month
                                                from
                                                     (
                                                            select  market_code,product_code,month_code,  sum(nvl(sales_qty,0)) sales_qty
                                                            from
                                                                (

                                                                    select  a.market_code,a.product_code, to_char(a.invoice_date,'MM') month_code,  nvl(a.sales_qty,0)-nvl(b.return_qty,0) sales_qty
                                                                    from
                                                                        (
                                                                             select  a.invoice_no,trunc(a.invoice_date) invoice_date, a.market_code,b.product_code,nvl(b.issued_qty,0) sales_qty
                                                                             from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                                             where   a.inv_mst_slno=b.inv_mst_slno
                                                                             and     a.inv_type_code='INV001'
                                                                             and     trunc(a.invoice_date) between fDate and tDate
                                                                             and     b.product_code =  p.product_code
                                                                             and    (p.product_category = pcCode or pcCode='ALL')
                                                                             and     b.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                         )a,    
                                                                                 
                                                                         ( 
                                                                            select  a.invoice_no,b.product_code, nvl(b.return_qty,0) return_qty
                                                                            from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                                            and     b.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                                                
                                                                         )b
                                                                    where a.invoice_no=b.invoice_no(+)
                                                                    and   a.product_code=b.product_code(+)
                                                                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                                        
                                                               )
                                                               group by market_code,product_code,month_code
                                                 

                                                     ) a,
                                             
                                                     (
                                                                           
                                                        select  market_code,product_code,month_code,count(distinct retailer_code) no_of_retailer
                                                        from
                                                            (
                                                            select  distinct retailer_code,customer_code,market_code,product_code,month_code
                                                            from
                                                                (
                                                                select  a.retailer_code,a.customer_code, a.market_code,a.product_code, to_char(a.invoice_date,'MM') month_code
                                                                from
                                                                    (
                                                                         select  a.retailer_code,a.invoice_no,trunc(a.invoice_date) invoice_date,a.customer_code, a.market_code,b.product_code,nvl(b.issued_qty,0) sales_qty
                                                                         from    mv_invoice_mst a,  mv_invoice_dtl b,mv_product_info p
                                                                         where   a.inv_mst_slno=b.inv_mst_slno
                                                                         and     a.inv_type_code='INV001'
                                                                         and     trunc(a.invoice_date) between fDate and tDate
                                                                         and     b.product_code =  p.product_code
                                                                         and    (p.product_category = pcCode or pcCode='ALL')
                                                                         and     b.product_code in (select product_code from user_product_dtl where user_id=userId)

                                                                     )a,    
                                                                         
                                                                     ( 
                                                                        select  a.invoice_no,b.product_code, nvl(b.return_qty,0) return_qty
                                                                        from    mv_ret_return_mst a, mv_ret_return_dtl b
                                                                        where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                                        and     b.product_code in (select product_code from user_product_dtl where user_id=userId)

                                                                     )b
                                                                where a.invoice_no=b.invoice_no(+)
                                                                and   a.product_code=b.product_code(+)
                                                                and nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                                                            )
                                                        )
                                                        group by market_code,product_code,month_code

                                                         
                                                     ) b
                                                     where a.market_code=b.market_code
                                                     and   a.month_code=b.month_code
                                                     and a.product_code= b.product_code
                                                     group by a.market_code,a.product_code  

                                              )

                                        )    
                                        group by  market_code,product_code 
                                         )a, 
                                        (
                                          select market_code,count(retailer_code) total_retailer
                                          from mv_division_retailer_relation
                                          group by market_code
                                        )b, mv_division_customer_relation c,mv_product_info d,mv_category_info e
                                        where a.market_code=b.market_code(+)
                                        and   a.market_code=c.market_code(+)
                                        and   a.product_code=d.product_code
                                        and   d.product_category=e.category_code
                                        and   d.product_category=e.category_code

                                        and  (c.zone_code = dCode or dCode='ALL')
                                        and  (c.area_code = rCode or rCode='ALL')
                                        and  (c.belt_code = aCode or aCode='ALL')
                                        and  (c.territory_code = tCode or tCode='ALL')  
                                        and  (C.customer_code = cCode or cCode='ALL')
                                        and  (d.product_category = pcCode or pcCode='ALL');     
        
        
        end;
                   
      end if;         


    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_COMBO_BONUS_DR_REPORT(p_from_date varchar2,
                                                                p_to_date varchar2,
                                                                p_division_code varchar2, 
                                                                p_region_code varchar2,
                                                                p_area_code varchar2,
                                                                p_territory_code varchar2,
                                                                p_customer_code varchar2,
                                                                p_combo_bonus_no varchar2
                                                                )
   return sys_refcursor
as
   Retailer_Ims       sys_refcursor;  
   
   
   fDate date             := to_date(p_from_date,'DD/MM/RRRR'); 
   tDate date             := to_date(p_to_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=p_division_code;
   rCode varchar2(100)    :=p_region_code;
   aCode varchar2(100)    :=p_area_code;
   tCode varchar2(100)    :=p_territory_code;
   cCode varchar2(100)    :=p_customer_code;
   pNo varchar2(100)      :=p_combo_bonus_no;

begin
   open Retailer_Ims for                                                                            
                        select f.zone_code division_code, 
                               f.zone_name division_name, 
                               f.area_code region_code, 
                               f.area_name region_name, 
                               f.belt_code area_code, 
                               f.belt_name area_name, 
                               f.territory_code, 
                               f.territory_name,
                               a.customer_code,
                               f.customer_name,
                               f.db_location,                                
                               a.market_code, 
                               f.market_name,               
                               a.route_code,
                               d.route_name,
                               a.retailer_code,
                               e.retailer_name,
                               to_char(a.invoice_date,'MM/DD/RRRR HH:MI:SS AM') invoice_date,
                               a.invoice_no,
                               a.spec_bonus_mst_slno combo_bonus_no,
                               (select special_bonus_name from spa_sfbl.special_bonus_mst@dl_spasfbl.squaregroup.com where spec_bonus_mst_slno=a.spec_bonus_mst_slno) combo_bonus_name,
                               a.product_code,
                               g.product_name,
                               g.pack_size,
                               a.sales_qty,
                               a.return_sales_qty,
                               a.net_ims_qty,
                               a.sales_value,
                               a.return_sales_value,
                               a.net_ims_value,
                               a.combo_bonus_qty,
                               a.return_combo_bonus_qty,
                               nvl(a.combo_bonus_qty,0)-nvl(a.return_combo_bonus_qty,0) net_combo_bonus_qty
                        from
                        (
                            select spec_bonus_mst_slno,
                                   customer_code,
                                   market_code,
                                   route_code,
                                   retailer_code,
                                   invoice_date,
                                   invoice_no,
                                   product_code,
                                   sum(nvl(sales_qty,0))sales_qty,
                                   sum(nvl(return_sales_qty,0))return_sales_qty,
                                   sum(nvl(net_ims_qty,0))net_ims_qty,
                                   sum(nvl(sales_value,0))sales_value,
                                   sum(nvl(return_sales_value,0))return_sales_value,
                                   sum(nvl(net_ims_value,0))net_ims_value,
                                   sum(nvl(combo_bonus_qty,0))combo_bonus_qty,
                                   sum(nvl(return_combo_bonus_qty,0)) return_combo_bonus_qty
                            from
                                 (
      
                                    select a.spec_bonus_mst_slno,
                                           a.customer_code,
                                           a.market_code,
                                           a.route_code,
                                           a.retailer_code,
                                           a.invoice_date,
                                           a.invoice_no,
                                           a.product_code,
                                           a.sales_qty,
                                           b.return_sales_qty,
                                           nvl(a.sales_qty,0)-nvl(b.return_sales_qty,0) net_ims_qty,
                                           a.sales_value,
                                           b.return_sales_value,
                                           nvl(a.sales_value,0)-nvl(b.return_sales_value,0) net_ims_value,
                                           0 combo_bonus_qty,
                                           0 return_combo_bonus_qty
                                    from
                                    (                        
                                    select a.spec_bonus_mst_slno,
                                           b.customer_code,
                                           b.market_code,
                                           b.route_code,
                                           b.retailer_code,
                                           b.invoice_date,
                                           b.invoice_no,
                                           c.product_code,
                                           c.issued_qty sales_qty,
                                           nvl(c.total_val,0)-nvl(c.bonus_price_discount,0) sales_value
                                    from spa_sfbl.tt_combo_bns_cal_slab_v1@dl_spasfbl.squaregroup.com a, mv_invoice_mst b, mv_invoice_dtl c
                                    where a.inv_mst_slno=b.inv_mst_slno  
                                    and   a.inv_mst_slno=c.inv_mst_slno
                                    and   a.spec_bonus_mst_slno = pNo 
                                    and   trunc(b.invoice_date) between fdate and tdate
                                    --and   b.invoice_no='2203009886232'                        
                                    )a,
                                    (
                                    select a.invoice_no,b.product_code,b.return_qty return_sales_qty, nvl(b.return_value,0) return_sales_value 
                                    from mv_ret_return_mst a, mv_ret_return_dtl b
                                    where a.ret_recv_mst_slno=b.ret_recv_mst_slno                        
                                    ) b
                                    where a.invoice_no=b.invoice_no(+)
                                    and   a.product_code=b.product_code(+)

                                    union all                      
                                   
                                    select spec_bonus_mst_slno,
                                           customer_code,
                                           market_code,
                                           route_code,
                                           retailer_code,
                                           invoice_date,            
                                           invoice_no,       
                                           product_code,                   
                                           0 sales_qty,
                                           0 return_sales_qty,
                                           0 net_ims_qty,
                                           0 sales_value,
                                           0 return_sales_value,
                                           0 net_ims_value,                                      
                                           sum(nvl(combo_bonus_qty,0)) combo_bonus_qty,
                                           sum(nvl(return_combo_bonus_qty,0)) return_combo_bonus_qty 
                                    from
                                        (
                                        select a.spec_bonus_mst_slno,                
                                               b.customer_code,
                                               b.market_code,
                                               b.route_code,
                                               b.retailer_code,
                                               b.invoice_date,
                                               b.invoice_no,             
                                               a.bonus_product_code product_code,
                                               a.bonus_qty combo_bonus_qty,
                                               0 return_combo_bonus_qty       
                                        from spa_sfbl.tt_combo_bns_cal_slab_v1@dl_spasfbl.squaregroup.com a,mv_invoice_mst b
                                        where a.inv_mst_slno=b.inv_mst_slno
                                        and   trunc(b.invoice_date) between fdate and tdate
                                        and   a.spec_bonus_mst_slno = pNo 
                                        --and   b.invoice_no='2203009886232'

                                        union all

                                        select a.spec_bonus_mst_slno,
                                               b.customer_code,
                                               b.market_code,
                                               b.route_code,
                                               b.retailer_code,
                                               b.invoice_date,
                                               b.invoice_no,              
                                               a.bonus_product_code product_code,
                                               a.bonus_qty combo_bonus_qty,
                                               a.ret_bns_back_qty return_combo_bonus_qty 
                                        from spa_sfbl.tt_return_combo_bonus_v1@dl_spasfbl.squaregroup.com a, mv_invoice_mst b
                                        where a.invoice_no=b.invoice_no
                                        and   trunc(b.invoice_date) between fdate and tdate
                                        and   a.spec_bonus_mst_slno = pNo 
                                        --and   b.invoice_no='2203009886232'
                                       )
                                    group by spec_bonus_mst_slno,customer_code,market_code,route_code,retailer_code,invoice_date,invoice_no,product_code 
                                )
                            group by customer_code,market_code,route_code,retailer_code,invoice_date,invoice_no,product_code,spec_bonus_mst_slno   
                        )a,mv_route_info d, mv_retailer_info e,mv_division_customer_relation f,mv_product_info g 
                        where a.route_code=d.route_code(+)
                        and   a.retailer_code=e.retailer_code(+)
                        and   a.market_code=f.market_code(+)
                        and   a.product_code=g.product_code(+)

                        and  (f.zone_code = dCode or dCode='ALL')
                        and  (f.area_code = rCode or rCode='ALL')
                        and  (f.belt_code = aCode or aCode='ALL')
                        and  (f.territory_code = tCode or tCode='ALL')  
                        and  (a.customer_code = cCode or cCode='ALL');
    
    


   
    return Retailer_Ims;
    
exception
   when no_data_found
   then
   open Retailer_Ims for
         select *
           from dual
          where 1 = 2;
      return Retailer_Ims;
end;
/

CREATE OR REPLACE function             fn_combo_bonus_dateRange(pfrom_date varchar2,pto_date varchar2,pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   Retailer_Ims       sys_refcursor;  
   
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open Retailer_Ims for                                                                            
                                select  b.division_code, 
                                        b.division_name, 
                                        b.region_code, 
                                        b.region_name, 
                                        b.area_code,  
                                        b.area_name,
                                        b.territory_code, 
                                        b.territory_name,
                                        a.customer_code,
                                        b.customer_name,
                                        b.db_location,
                                        a.market_code,
                                        b.market_name,       
                                       a.route_code,
                                       c.route_name,      
                                       a.retailer_code, 
                                       d.retailer_name,          
                                       no_of_inv,
                                       total_inv_amt, 
                                       slab_adjustment, 
                                       net_inv_amount,
                                       return_value, 
                                       return_slab_adjust, 
                                       net_return_val,
                                       net_ims,                      
                                       no_of_replace_inv,
                                       replace_inv_amt
                                from
                                (
                                select customer_code,
                                       market_code,
                                       route_code,
                                       retailer_code,           
                                       sum(no_of_inv) no_of_inv,
                                       sum(total_inv_amt) total_inv_amt, 
                                       sum(slab_adjustment) slab_adjustment, 
                                       sum(net_inv_amount) net_inv_amount,
                                       sum(return_value) return_value, 
                                       sum(return_slab_adjust) return_slab_adjust, 
                                       sum(net_return_val) net_return_val,
                                       sum(net_ims) net_ims,                      
                                       sum(no_of_replace_inv) no_of_replace_inv,
                                       sum(replace_inv_amt) replace_inv_amt
                                from
                                   (       
                                        select  customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                sum (nvl(no_of_inv,0)) no_of_inv,
                                                sum(nvl(total_inv_amt,0))total_inv_amt, 
                                                sum(nvl(slab_adjustment,0))slab_adjustment, 
                                                sum(nvl(net_inv_amount,0))net_inv_amount,
                                                sum(nvl(return_value,0))return_value, 
                                                sum(nvl(return_slab_adjust,0))return_slab_adjust, 
                                                sum(nvl(net_return_val,0))net_return_val,
                                                sum(nvl(net_inv_amount,0))-sum(nvl(net_return_val,0)) net_ims,
                                                0 no_of_replace_inv,
                                                0 replace_inv_amt
                                                from
                                                   (                   
                                                    select  customer_code,
                                                            market_code,
                                                            route_code,
                                                            retailer_code,
                                                            count(invoice_no)no_of_inv,
                                                            sum(total_inv_amt)total_inv_amt, 
                                                            sum(slab_adjustment)slab_adjustment, 
                                                            sum(net_inv_amount)net_inv_amount,
                                                            0 return_value,
                                                            0 return_slab_adjust,
                                                            0 net_return_val                            
                                                     from
                                                         (
                                                         select          
                                                                customer_code,
                                                                market_code,
                                                                route_code,
                                                                retailer_code,
                                                                invoice_no,
                                                                nvl(grand_total,0)total_inv_amt, 
                                                                nvl(slab_adjustment,0)+nvl(special_bonus_disc,0)slab_adjustment, 
                                                                nvl(net_inv_amount,0)net_inv_amount                                
                                                        from vw_invoice_mst  
                                                        where  inv_type_code='INV001'
                                                        and   invoice_date between fDate and tDate
                                                        and  (customer_code = cCode or cCode='ALL')
                                                        
                                                        )
                                                    group by customer_code,market_code,route_code,retailer_code
                                                       
                                                                  
                                                    UNION ALL              
                                                  
                                                    select     b.customer_code,
                                                               b.market_code,
                                                               b.route_code,
                                                               b.retailer_code,
                                                               0 no_of_inv,
                                                               0 total_inv_amt,
                                                               0 slab_adjustment,
                                                               0 net_inv_amount,
                                                               sum(nvl(a.return_value,0)) return_value,
                                                               sum(nvl(a.return_slab_amount,0))+ sum(nvl(a.special_bonus_disc,0)) return_slab_adjust,
                                                               sum(nvl(net_return_val,0)) net_return_val
                                                    from  vw_ret_return_mst a,vw_invoice_mst b
                                                    where a.invoice_no=b.invoice_no
                                                    and   b.inv_type_code='INV001'
                                                    and   b.invoice_date between fDate and tDate
                                                    and  (b.customer_code = cCode or cCode='ALL')                    
                                                    group by  b.customer_code, b.market_code,b.route_code, b.retailer_code 
                                                    
                                                       
                                                    )        
                                        group by customer_code,market_code,route_code,retailer_code 

                                        UNION ALL

                                        select customer_code,
                                               market_code,
                                               route_code,
                                               retailer_code,           
                                               0 no_of_inv,
                                               0 total_inv_amt, 
                                               0 slab_adjustment, 
                                               0 net_inv_amount,
                                               0 return_value, 
                                               0 return_slab_adjust, 
                                               0 net_return_val,
                                               0 net_ims,                      
                                               nvl(count(invoice_no),0) no_of_replace_inv,
                                               nvl(sum(nvl(replace_inv_amt,0)),0) replace_inv_amt
                                            from
                                                (
                                                  select  customer_code,
                                                          market_code,
                                                          route_code,
                                                          retailer_code,
                                                          invoice_no,
                                                          nvl(net_inv_amount,0)replace_inv_amt
                                                from vw_invoice_mst  
                                                where  inv_type_code='INV002'
                                                and   invoice_date between fDate and tDate
                                                and  (customer_code = cCode or cCode='ALL')           
                                            )
                                        group by customer_code,market_code,route_code,retailer_code
                                   )        
                                group by customer_code,market_code,route_code,retailer_code  
                                ) a,
                                (
                                select  distinct  
                                        zone_code division_code, 
                                        zone_name division_name, 
                                        area_code region_code, 
                                        area_name region_name, 
                                        belt_code area_code,  
                                        belt_name  area_name,
                                        territory_code, 
                                        territory_name,
                                        customer_code,
                                        customer_name,
                                        db_location,
                                        market_code, 
                                        market_name
                                from mv_division_customer_relation
                                ) b, mv_route_info c, mv_retailer_info d
                                where a.market_code=b.market_code(+)
                                and   a.route_code=c.route_code
                                and   a.retailer_code=d.retailer_code
                                and  (b.division_code = dCode or dCode='ALL')
                                and  (b.region_code = rCode or rCode='ALL')
                                and  (b.area_code = aCode or aCode='ALL')
                                and  (b.territory_code = tCode or tCode='ALL')  
                                and  (a.customer_code = cCode or cCode='ALL');
    
    


   
    return Retailer_Ims;
    
exception
   when no_data_found
   then
   open Retailer_Ims for
         select *
           from dual
          where 1 = 2;
      return Retailer_Ims;
end;
/

CREATE OR REPLACE function             FN_COMBO_BONUS_DR_REPORT_VAL(p_from_date varchar2,
                                                                p_to_date varchar2,
                                                                p_division_code varchar2, 
                                                                p_region_code varchar2,
                                                                p_area_code varchar2,
                                                                p_territory_code varchar2,
                                                                p_customer_code varchar2,
                                                                p_combo_bonus_no varchar2
                                                                )
   return sys_refcursor
as
   Retailer_Ims       sys_refcursor;  
   
   
   fDate date             := to_date(p_from_date,'DD/MM/RRRR'); 
   tDate date             := to_date(p_to_date,'DD/MM/RRRR'); 
   dCode varchar2(100)    :=p_division_code;
   rCode varchar2(100)    :=p_region_code;
   aCode varchar2(100)    :=p_area_code;
   tCode varchar2(100)    :=p_territory_code;
   cCode varchar2(100)    :=p_customer_code;
   pNo varchar2(100)      :=p_combo_bonus_no;

begin
   open Retailer_Ims for                                                                            
                     select f.zone_code division_code, 
                               f.zone_name division_name, 
                               f.area_code region_code, 
                               f.area_name region_name, 
                               f.belt_code area_code, 
                               f.belt_name area_name, 
                               f.territory_code, 
                               f.territory_name,
                               a.customer_code,
                               f.customer_name,
                               f.db_location,                                
                               a.market_code, 
                               f.market_name,               
                               a.route_code,
                               d.route_name,
                               a.retailer_code,
                               e.retailer_name,
                               to_char(a.invoice_date,'MM/DD/RRRR HH:MI:SS AM') invoice_date,
                               a.invoice_no,
                               a.spec_bonus_mst_slno combo_bonus_no,
                               (select special_bonus_name from spa_sfbl.special_bonus_mst@dl_spasfbl.squaregroup.com where spec_bonus_mst_slno=a.spec_bonus_mst_slno) combo_bonus_name,                               
                               a.sales_value,
                               a.return_sales_value,
                               a.net_ims_value,
                               a.combo_bonus_disc,
                               a.return_combo_bonus_disc,
                               nvl(a.combo_bonus_disc,0)-nvl(a.return_combo_bonus_disc,0) net_combo_bonus_disc
                        from
                        (
                            select spec_bonus_mst_slno,
                                   customer_code,
                                   market_code,
                                   route_code,
                                   retailer_code,
                                   invoice_date,
                                   invoice_no,
                                   sum(nvl(sales_value,0))sales_value,
                                   sum(nvl(return_sales_value,0))return_sales_value,
                                   sum(nvl(net_ims_value,0))net_ims_value,
                                   
                                   sum(nvl(combo_bonus_disc,0))combo_bonus_disc,
                                   sum(nvl(return_combo_bonus_disc,0)) return_combo_bonus_disc
                            from
                                 (                                                                                                                                    
                                    select a.spec_bonus_mst_slno,
                                           a.customer_code,
                                           a.market_code,
                                           a.route_code,
                                           a.retailer_code,
                                           a.invoice_date,
                                           a.invoice_no,
                                           a.sales_value,
                                           b.return_sales_value,
                                           nvl(a.sales_value,0)-nvl(b.return_sales_value,0) net_ims_value,
                                           0 combo_bonus_disc,
                                           0 return_combo_bonus_disc
                                    from
                                    (                        
                                    select a.spec_bonus_mst_slno,
                                           b.customer_code,
                                           b.market_code,
                                           b.route_code,
                                           b.retailer_code,
                                           b.invoice_date,
                                           b.invoice_no,
                                           nvl(b.net_inv_amount,0) sales_value
                                    from spa_sfbl.tt_combo_bonus_disc_slab_v1@dl_spasfbl.squaregroup.com a, mv_invoice_mst b
                                    where a.inv_mst_slno=b.inv_mst_slno  
                                    and   a.spec_bonus_mst_slno = pNo 
                                    and   trunc(b.invoice_date) between fdate and tdate                       
                                    )a,
                                    (
                                    select a.invoice_no,nvl(a.net_return_val,0) return_sales_value 
                                    from mv_ret_return_mst a                       
                                    ) b
                                    where a.invoice_no=b.invoice_no(+)

                                    union all     
                                                                                                                             
                                    select spec_bonus_mst_slno,
                                           customer_code,
                                           market_code,
                                           route_code,
                                           retailer_code,
                                           invoice_date,            
                                           invoice_no,   
                                           0 sales_value,
                                           0 return_sales_value,
                                           0 net_ims_value,                                                                                                      
                                           sum(nvl(combo_bonus_disc,0)) combo_bonus_disc,
                                           sum(nvl(return_combo_bonus_disc,0)) return_combo_bonus_disc 
                                    from
                                        (
                                        select a.spec_bonus_mst_slno,                
                                               b.customer_code,
                                               b.market_code,
                                               b.route_code,
                                               b.retailer_code,
                                               b.invoice_date,
                                               b.invoice_no,             
                                               a.bonus_value combo_bonus_disc,
                                               0 return_combo_bonus_disc     
                                        from spa_sfbl.tt_combo_bonus_disc_slab_v1@dl_spasfbl.squaregroup.com a,mv_invoice_mst b
                                        where a.inv_mst_slno=b.inv_mst_slno
                                        and   trunc(b.invoice_date) between fdate and tdate
                                        and   a.spec_bonus_mst_slno = pNo 


                                        union all

                                        select a.spec_bonus_mst_slno,
                                               b.customer_code,
                                               b.market_code,
                                               b.route_code,
                                               b.retailer_code,
                                               b.invoice_date,
                                               b.invoice_no, 
                                               0 combo_bonus_disc,             
                                               a.ret_bns_back_val return_combo_bonus_disc 
                                        from spa_sfbl.tt_return_combo_bonus_disc_v1@dl_spasfbl.squaregroup.com a, mv_invoice_mst b
                                        where a.invoice_no=b.invoice_no
                                        and   trunc(b.invoice_date) between fdate and tdate
                                        and   a.spec_bonus_mst_slno = pNo 
                                       )
                                    group by spec_bonus_mst_slno,customer_code,market_code,route_code,retailer_code,invoice_date,invoice_no  
                                )
                            group by customer_code,market_code,route_code,retailer_code,invoice_date,invoice_no,spec_bonus_mst_slno  
                             
                        )a,mv_route_info d, mv_retailer_info e,mv_division_customer_relation f 
                        where a.route_code=d.route_code(+)
                        and   a.retailer_code=e.retailer_code(+)
                        and   a.market_code=f.market_code(+)

                        and  (f.zone_code = dCode or dCode='ALL')
                        and  (f.area_code = rCode or rCode='ALL')
                        and  (f.belt_code = aCode or aCode='ALL')
                        and  (f.territory_code = tCode or tCode='ALL')  
                        and  (a.customer_code = cCode or cCode='ALL');
    
    


   
    return Retailer_Ims;
    
exception
   when no_data_found
   then
   open Retailer_Ims for
         select *
           from dual
          where 1 = 2;
      return Retailer_Ims;
end;
/

CREATE OR REPLACE FUNCTION FN_TYPE_WISE_LOCATION_NAME(pLOCATION_TYPE_CODE VARCHAR2,pLOCATION_CODE VARCHAR2)
RETURN CHAR
IS
    
   
   vLOCATION_TYPE_CODE VARCHAR2(200):=pLOCATION_TYPE_CODE;
   
   vLOCATION_CODE VARCHAR2(200):=pLOCATION_CODE;
   
   vLOCATIONNAME VARCHAR2(200);
   
   
BEGIN



    IF vLOCATION_TYPE_CODE='N' THEN
        
        BEGIN
                SELECT 'National'
                INTO vLOCATIONNAME
                FROM  dual;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;    
        END;

    ELSIF vLOCATION_TYPE_CODE='D' THEN
        
        BEGIN
                SELECT ZONE_NAME
                INTO vLOCATIONNAME
                FROM  MV_ZONE_INFO
                WHERE ZONE_CODE=vLOCATION_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;    
        END;


    ELSIF vLOCATION_TYPE_CODE='R' THEN
        
        BEGIN
                SELECT AREA_NAME
                INTO vLOCATIONNAME
                FROM  MV_AREA_INFO
                WHERE AREA_CODE=vLOCATION_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;    
        END;
        
        
        
    ELSIF vLOCATION_TYPE_CODE='A' THEN
        
        BEGIN
                SELECT BELT_NAME
                INTO vLOCATIONNAME
                FROM  MV_BELT_INFO
                WHERE BELT_CODE=vLOCATION_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;    
        END;    
        
        
        
    ELSIF vLOCATION_TYPE_CODE='T' THEN
        
        BEGIN
                SELECT TERRITORY_NAME
                INTO vLOCATIONNAME
                FROM  MV_TERRITORY_INFO
                WHERE TERRITORY_CODE=vLOCATION_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;    
        END;    
        
        

    ELSIF vLOCATION_TYPE_CODE='M' THEN
        
        BEGIN
                SELECT MARKET_NAME
                INTO vLOCATIONNAME
                FROM  MV_MARKET_INFO
                WHERE MARKET_CODE=vLOCATION_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;    
        END;        
        
        
        
        
    ELSIF vLOCATION_TYPE_CODE='C' THEN
        
        BEGIN
                SELECT CUSTOMER_NAME
                INTO vLOCATIONNAME
                FROM  MV_CUSTOMER_INFO
                WHERE CUSTOMER_CODE=vLOCATION_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;    
        END;    
        
    ELSIF vLOCATION_TYPE_CODE='RO' THEN
        
        BEGIN
               SELECT ROUTE_NAME
               INTO vLOCATIONNAME
                FROM  MV_ROUTE_INFO
                WHERE ROUTE_CODE=vLOCATION_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;    
        END;
        
    ELSIF vLOCATION_TYPE_CODE='RE' THEN
        
        BEGIN
                SELECT RETAILER_NAME
                INTO vLOCATIONNAME
                FROM  MV_RETAILER_INFO
                WHERE RETAILER_CODE=vLOCATION_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;    
        END;
        
    END IF;
    
    
    RETURN vLOCATIONNAME;
    
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    RETURN null;
END;
/

CREATE OR REPLACE function             FN_COMBO_BONUS_DEC(pComboBonusNo varchar2)
   return sys_refcursor
as
   Ims       sys_refcursor;  

   vComboBonusNo varchar2(100)    :=pComboBonusNo;

begin
   open Ims for                                                                            
                select a.spec_bonus_mst_slno combo_bonus_no,
                       a.special_bonus_name combo_bonus_name,
                       to_char(a.bonus_effect_from,'MM/DD/RRRR') effect_from_date,
                       to_char(a.bonus_effect_to,'MM/DD/RRRR') effect_to_date,
                       decode(a.bns_prod_loc_type,'X','National','D','Division','R','Region','A','Area','T','Territory','C','Customer','M','Market','RO','Route','RE','Retailer') location_type,
                       d.location_code,
                       fn_type_wise_location_name(a.bns_prod_loc_type,d.location_code) location_name,
                       decode(d.status,'A','Active','I','Inactive') location_status,
                       a.include_product_category product_type,
                       f.product_type_code, 
                       fn_type_wise_category_name(a.include_product_category,f.product_type_code) product_type_name,
                       b.spec_bonus_dtl_slno,                            
                       decode(b.bonus_slab_type,'P','Product Bonus','F','Price Discount') bonus_type,      
                       e.product_code,
                       fn_product_name(e.product_code) product_name,
                       fn_pack_size(e.product_code) pack_size,                    
                       c.product_code bonus_product_code,
                       fn_product_name(c.product_code) bonus_product_name,
                       fn_pack_size(c.product_code) bonus_product_pack_size,      
                       c.priority_no,
                       b.slab_qty,
                       b.bonus_qty,
                       b.bonus_disc_val bonus_discount,
                       decode(a.status,'A','Active','I','Inactive') bonus_status                             
                from   spa_sfbl.special_bonus_mst@dl_spasfbl.squaregroup.com a, 
                       spa_sfbl.special_bonus_dtl@dl_spasfbl.squaregroup.com b, 
                       spa_sfbl.special_bonus_free_product@dl_spasfbl.squaregroup.com c,
                       spa_sfbl.special_bonus_location@dl_spasfbl.squaregroup.com d, 
                       spa_sfbl.special_bonus_product@dl_spasfbl.squaregroup.com e,
                       spa_sfbl.special_bonus_product_type@dl_spasfbl.squaregroup.com f
                where  a.spec_bonus_mst_slno=b.spec_bonus_mst_slno
                and    b.spec_bonus_dtl_slno=c.spec_bonus_dtl_slno(+)
                and    a.spec_bonus_mst_slno=d.spec_bonus_mst_slno
                and    a.spec_bonus_mst_slno=e.spec_bonus_mst_slno
                and    a.spec_bonus_mst_slno=f.spec_bonus_mst_slno
                and    a.spec_bonus_mst_slno=vComboBonusNo;               
               
   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE FUNCTION FN_TYPE_WISE_CATEGORY_NAME(pPRODUCT_TYPE VARCHAR2,pPRODUCT_TYPE_CODE VARCHAR2)
RETURN CHAR
IS
    
   
   vPRODUCT_TYPE VARCHAR2(200):=pPRODUCT_TYPE;
   
   vPRODUCT_TYPE_CODE VARCHAR2(200):=pPRODUCT_TYPE_CODE;
   
   vPRODUCT_TYPE_NAME VARCHAR2(200);
   
   
BEGIN


        IF vPRODUCT_TYPE='BASE_PRODUCT' THEN
            
            BEGIN
                    SELECT BASE_PRODUCT_NAME
                    INTO vPRODUCT_TYPE_NAME
                    FROM MV_BASE_PRODUCT_INFO
                    WHERE BASE_PRODUCT_CODE=vPRODUCT_TYPE_CODE;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                NULL;
            END;
            
            
            
            
        ELSIF vPRODUCT_TYPE='BRAND' THEN
            
            BEGIN
                    SELECT BRAND_NAME
                    INTO vPRODUCT_TYPE_NAME
                    FROM MV_BRAND_INFO
                    WHERE BRAND_CODE=vPRODUCT_TYPE_CODE;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                NULL;
            END;
            
            
            
        ELSIF vPRODUCT_TYPE='CATEGORY' THEN
            
            BEGIN
                    SELECT CATEGORY_NAME
                    INTO vPRODUCT_TYPE_NAME
                    FROM MV_CATEGORY_INFO
                    WHERE CATEGORY_CODE=vPRODUCT_TYPE_CODE;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                NULL;
            END;
                
            
            
            
        END IF;

    
    RETURN vPRODUCT_TYPE_NAME;
    
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    RETURN null;
END;
/

CREATE OR REPLACE function             FN_PRODUCT_BONUS(p_from_date varchar2,p_to_date varchar2,p_product_code varchar2)
   return sys_refcursor
as
   product_bonus       sys_refcursor;  
   
   
   fromDate date                := to_date(p_from_date,'DD/MM/RRRR'); 
   toDate date                 := to_date(p_to_date,'DD/MM/RRRR');
   productCode varchar2(100)    :=p_product_code;

begin
   open product_bonus for                                                                            
        select sales_product_code,
               sales_product_name,
               sales_product_pack_size,
               bonus_product_code,
               bonus_product_name,
               bonus_product_pack_size,
               bonus_slab_qty,
               bonus_prd_qty,
               bonus_price_disc,
               prd_location_type,
               prd_location_type_name,
               bonus_location_code,
               (select loc_name from vw_location where loc_code=bonus_location_code and loc_type=prd_location_type) bonus_location_name,
               sales_qty,
               price_discount,
               price_location_type,
               price_location_type_name,
               price_location_code,
               (select loc_name from vw_location where loc_code=price_location_code and loc_type=price_location_type) price_location_name,
               bonus_effect_from EFFECT_FROM_DATE,
               bonus_effect_to EFFECT_TO_DATE,
               BONUS_STATUS,
               PRICE_STATUS                
               
        from
            (
            select   a.product_code sales_product_code,
                     fn_product_name(a.product_code) sales_product_name,
                     fn_pack_size(a.product_code) sales_product_pack_size,
                     b.bonus_product_code,
                     fn_product_name(b.bonus_product_code) bonus_product_name,
                     fn_pack_size(b.bonus_product_code) bonus_product_pack_size,
                     b.bonus_slab_qty,
                     b.bonus_prd_qty,
                     b.bonus_price_disc,
                     b.prd_location_type,
                     decode(b.prd_location_type,'Z','Zone','A','Area','B','Belt','T','Territory','M','Market') prd_location_type_name ,
                     b.location_code bonus_location_code,
                     c.sales_qty,
                     c.price_discount,
                     c.price_location_type,
                     decode(c.price_location_type,'Z','Zone','A','Area','B','Belt','T','Territory','M','Market') price_location_type_name ,
                     c.location_code price_location_code,
                     decode(b.bonus_effect_from,null,c.bonus_effect_from,b.bonus_effect_from)bonus_effect_from,
                     decode(b.bonus_effect_to,null,c.bonus_effect_to,b.bonus_effect_to)bonus_effect_to,
                     b.bonus_status,
                     c.price_status  
            from
                ( 
                 select distinct product_code 
                 from   spa_sfbl.product_bonus_mst@dl_spasfbl.squaregroup.com  
                 where  (product_code= productCode or productCode='ALL')
                 and    to_date(bonus_effect_from,'DD/MM/YYYY')>=to_date(fromDate,'DD/MM/YYYY')
                 and    to_date(bonus_effect_to,'DD/MM/YYYY')<=to_date(toDate,'DD/MM/YYYY')
                )a,
                (
                select a.product_code sales_product_code,
                       b.product_code bonus_product_code,
                       bonus_slab_qty,bonus_prd_qty,
                       bonus_price_disc,
                       a.prd_location_type,
                       location_code,
                       to_char(a.bonus_effect_from,'MM/DD/YYYY') bonus_effect_from,
                       to_char(a.bonus_effect_to,'MM/DD/YYYY') bonus_effect_to,
                       decode(bonus_status,'A','Active','I','Inactive')bonus_status
                        
                from spa_sfbl.product_bonus_mst@dl_spasfbl.squaregroup.com a, spa_sfbl.product_bonus_dtl@dl_spasfbl.squaregroup.com  b
                where a.pro_bonus_mst_slno=b.pro_bonus_mst_slno
                and   (a.product_code= productCode or productCode='ALL')
                and   to_date(a.bonus_effect_from,'DD/MM/YYYY')>=to_date(fromDate,'DD/MM/YYYY')
                and   to_date(a.bonus_effect_to,'DD/MM/YYYY')<=to_date(toDate,'DD/MM/YYYY')
                ) b,
                (
                select product_code,sales_qty,price_discount,a.price_location_type,location_code,decode(price_status,'A','Active','I','Inactive')price_status,
                to_char(a.bonus_effect_from,'MM/DD/YYYY') bonus_effect_from,
                to_char(a.bonus_effect_to,'MM/DD/YYYY') bonus_effect_to                 
                from spa_sfbl.product_bonus_mst@dl_spasfbl.squaregroup.com a,spa_sfbl.product_bonus_price_dis@dl_spasfbl.squaregroup.com  b
                where a.pro_bonus_mst_slno=b.pro_bonus_mst_slno
                and   (a.product_code= productCode or productCode='ALL')
                and   to_date(a.bonus_effect_from,'DD/MM/YYYY')>=to_date(fromDate,'DD/MM/YYYY')
                and   to_date(a.bonus_effect_to,'DD/MM/YYYY')<=to_date(toDate,'DD/MM/YYYY')
                )c

            where a.product_code=b.sales_product_code(+)
            and   a.product_code=c.product_code(+)
            )
            order by sales_product_name,bonus_product_name;


   
    return product_bonus;
    
exception
   when no_data_found
   then
   open product_bonus for
         select *
           from dual
          where 1 = 2;
      return product_bonus;
end;
/

CREATE OR REPLACE function             FN_NTL_PROD_SAL_DATE_RANGE(pfrom_date varchar2,pto_date varchar2,puser_id number)
   return sys_refcursor
as
   Ntl_Prod_Sales       sys_refcursor;  
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');
   userId   number        :=puser_id;
   vCount   number:=0;


begin


   SELECT COUNT(USER_ID)  into vCount
   FROM USER_PRODUCT_DTL 
   WHERE USER_ID=userId; 
   
   
     if vCount = 0 then 
     
         begin
         
               open Ntl_Prod_Sales for                                                                            
                                     select
                                            b.base_product_code,
                                            c.base_product_name,
                                            b.product_category product_category_code,
                                            e.category_name product_category_name,
                                            b.brand_code,
                                            d.brand_name,
                                                
                                            a.product_code,
                                            b.product_name,
                                            b.pack_size,
                                            
                                            
                                            current_month_sales_val,
                                            current_month_return_val,
                                            current_month_net_sales_val, 
                                                   
                                            current_month_sales_qty,
                                            current_month_return_qty,
                                            current_month_net_sales_qty,

                                            last_month_sales_val,        
                                            last_month_return_val,
                                            last_month_net_sales_val,
                                            
                                            last_month_sales_qty,
                                            last_month_return_qty,
                                            last_month_net_sales_qty,

                                           
                                            current_month_target_qty,
                                            current_month_target_val,
                                          
                                            round(decode(nvl(current_month_target_val,0),0,0,((nvl(current_month_net_sales_val,0))/nvl(current_month_target_val,0)) *100),2) current_month_ach,       
                                                   
                                           round( (((nvl(current_month_net_sales_val,0) - nvl(last_month_net_sales_val,0))*100) / decode(nvl(last_month_net_sales_val,0),0,1,nvl(last_month_net_sales_val,0))),2 ) current_month_growth,
                                           
                                            round(nvl(current_year_net_sales_val,0),2) current_year_ims_val,        
                                            
                                            round(nvl(last_year_net_sales_val,0),2) last_year_ims_val                                  
                                                        
                                    from
                                        (    
                                        select product_code,
                                               sum(nvl(current_month_sales_qty,0)) current_month_sales_qty,
                                               sum(nvl(current_month_sales_val,0)) current_month_sales_val,       
                                               sum(nvl(current_month_return_qty,0)) current_month_return_qty,
                                               sum(nvl(current_month_return_val,0)) current_month_return_val,
                                               
                                               sum(nvl(current_month_sales_qty,0))-sum(nvl(current_month_return_qty,0))   current_month_net_sales_qty,
                                               sum(nvl(current_month_sales_val,0))-sum(nvl(current_month_return_val,0))   current_month_net_sales_val,
                                               
                                               
                                               
                                               sum(nvl(last_month_sales_qty,0)) last_month_sales_qty,
                                               sum(nvl(last_month_sales_val,0)) last_month_sales_val,       
                                               sum(nvl(last_month_return_qty,0)) last_month_return_qty,
                                               sum(nvl(last_month_return_val,0)) last_month_return_val, 
                                               
                                               
                                               sum(nvl(last_month_sales_qty,0))-sum(nvl(last_month_return_qty,0))  last_month_net_sales_qty,
                                               sum(nvl(last_month_sales_val,0))-sum(nvl(last_month_return_val,0))   last_month_net_sales_val,
                                               
                                                         
                                               
                                               sum(current_month_target_qty) current_month_target_qty,
                                               sum(current_month_target_val) current_month_target_val,
                                               
                                               sum(current_year_sales_qty) current_year_sales_qty,
                                               sum(current_year_sales_val) current_year_sales_val,       
                                               sum(current_year_return_qty) current_year_return_qty,
                                               sum(current_year_return_val) current_year_return_val,
                                               
                                               sum(current_year_sales_qty)-sum(current_year_return_qty)  current_year_net_sales_qty,
                                               sum(current_year_sales_val)-sum(current_year_return_val)   current_year_net_sales_val,
                                               
                                               
                                               sum(last_year_sales_qty) last_year_sales_qty,
                                               sum(last_year_sales_val) last_year_sales_val,       
                                               sum(last_year_return_qty) last_year_return_qty,
                                               sum(last_year_return_val) last_year_return_val,
                                               
                                               sum(last_year_sales_qty)-sum(last_year_return_qty) last_year_net_sales_qty,
                                               sum(last_year_sales_val)-sum(last_year_return_val)   last_year_net_sales_val                              
                                        from
                                            (
                                            
                                         
                                        
                                        
                                        
                                           select product_code,
                                                   sum(sales_qty) current_month_sales_qty,
                                                   sum(sales_val) current_month_sales_val,       
                                                   sum(return_qty) current_month_return_qty,
                                                   sum(return_val) current_month_return_val,
                                                   
                                                   0 last_month_sales_qty,
                                                   0 last_month_sales_val,       
                                                   0 last_month_return_qty,
                                                   0 last_month_return_val,               
                                                   
                                                   0 current_month_target_qty,
                                                   0 current_month_target_val,
                                                   
                                                   0 current_year_sales_qty,
                                                   0 current_year_sales_val,       
                                                   0 current_year_return_qty,
                                                   0 current_year_return_val,
                                                   
                                                   0 last_year_sales_qty,
                                                   0 last_year_sales_val,       
                                                   0 last_year_return_qty,
                                                   0 last_year_return_val                              
                                            from
                                                (
                                                select  a.product_code,
                                                        a.product_price,                                     
                                                        nvl(a.issued_qty,0) sales_qty,
                                                        nvl(a.net_val,0) sales_val,
                                                        nvl(b.return_qty,0) return_qty, 
                                                        nvl(b.return_value,0)  return_val            
                                                from
                                                   (
                                                    select  m.invoice_no,
                                                            d.product_code,
                                                            d.product_price,  
                                                            d.issued_qty,
                                                            NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0)  NET_VAL
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and   m.inv_type_code='INV001'
                                                    and   m.invoice_date between fDate and tDate
                                                   )a,                                                                            
                                                   ( 
                                                    select  a.invoice_no,
                                                            b.product_code,
                                                            nvl(b.return_qty,0) return_qty,
                                                            b.return_value
                                                    from    vw_ret_return_mst a, vw_ret_return_dtl b
                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                                                    )b
                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                )
                                            group by  product_code
                                                
                                            union all
                                            
                                            
                                            
                                            
                                            select product_code,
                                                   0 current_month_sales_qty,
                                                   0 current_month_sales_val,       
                                                   0 current_month_return_qty,
                                                   0 current_month_return_val,  
                                                                    
                                                   sum(sales_qty) last_month_sales_qty,
                                                   sum(sales_val) last_month_sales_val,       
                                                   sum(return_qty) last_month_return_qty,
                                                   sum(return_val) last_month_return_val,
                                                   
                                                   0 current_month_target_qty,
                                                   0 current_month_target_val,
                                                   
                                                   0 current_year_sales_qty,
                                                   0 current_year_sales_val,       
                                                   0 current_year_return_qty,
                                                   0 current_year_return_val,
                                                   
                                                   0 last_year_sales_qty,
                                                   0 last_year_sales_val,       
                                                   0 last_year_return_qty,
                                                   0 last_year_return_val                              
                                            from
                                                (
                                                select  a.product_code,
                                                        a.product_price,                                     
                                                        nvl(a.issued_qty,0) sales_qty,
                                                        nvl(a.net_val,0) sales_val,
                                                        nvl(b.return_qty,0) return_qty, 
                                                        nvl(b.return_value,0)  return_val            
                                                from
                                                   (
                                                    select  m.invoice_no,
                                                            d.product_code,
                                                            d.product_price,  
                                                            d.issued_qty,
                                                            NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0)  NET_VAL
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and   m.inv_type_code='INV001'
                                                    and  to_date(m.invoice_date,'DD/MM/RRRR') between to_date(add_months(trunc(to_date(fDate,'DD/MM/RRRR'),'MM'),-1),'DD/MM/RRRR') AND to_date(last_day(add_months(to_date(tDate,'DD/MM/RRRR'),-1)),'DD/MM/RRRR') 
                                                   )a,                                                                            
                                                   ( 
                                                    select  a.invoice_no,
                                                            b.product_code,
                                                            nvl(b.return_qty,0) return_qty,
                                                            b.return_value
                                                    from    vw_ret_return_mst a, vw_ret_return_dtl b
                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                                                    )b
                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                )
                                            group by  product_code
                                            
                                            
                                            union all
                                            

                                            select product_code ,
                                                   0 current_month_sales_qty,
                                                   0 current_month_sales_val,       
                                                   0 current_month_return_qty,
                                                   0 current_month_return_val,
                                                   
                                                   0 last_month_sales_qty,
                                                   0 last_month_sales_val,       
                                                   0 last_month_return_qty,
                                                   0 last_month_return_val, 
                                                                 
                                                   sum(target_qty) current_month_target_qty,
                                                   sum(target_val) current_month_target_val, 
                                                             
                                                   0 current_year_sales_qty,
                                                   0 current_year_sales_val,       
                                                   0 current_year_return_qty,
                                                   0 current_year_return_val,
                                                   
                                                   0 last_year_sales_qty,
                                                   0 last_year_sales_val,       
                                                   0 last_year_return_qty,
                                                   0 last_year_return_val                        
                                            from   mv_target_l3years
                                            where  year||month_code  = to_char(TO_DATE(ADD_MONTHS(TRUNC(TO_DATE(FDATE,'DD/MM/RRRR'),'MM'),-0),'DD/MM/RRRR')  ,'RRRRMM')
                                            group by product_code
                                            
                                            
                                            
                                           union all
                                           
                                           
                                            select product_code,
                                                   0 current_month_sales_qty,
                                                   0 current_month_sales_val,       
                                                   0 current_month_return_qty,
                                                   0 current_month_return_val,
                                                   
                                                   0 last_month_sales_qty,
                                                   0 last_month_sales_val,       
                                                   0 last_month_return_qty,
                                                   0 last_month_return_val,               
                                                   
                                                   0 current_month_target_qty,
                                                   0 current_month_target_val,
                                                                                 
                                                   sum(sales_qty) current_year_sales_qty,
                                                   sum(sales_val) current_year_sales_val,       
                                                   sum(return_qty) current_year_return_qty,
                                                   sum(return_val) current_year_return_val,
                                                   
                                                   0 last_year_sales_qty,
                                                   0 last_year_sales_val,       
                                                   0 last_year_return_qty,
                                                   0 last_year_return_val                
                                            from
                                                (
                                                select  a.product_code,
                                                        a.product_price,                                     
                                                        nvl(a.issued_qty,0) sales_qty,
                                                        nvl(a.net_val,0) sales_val,
                                                        nvl(b.return_qty,0) return_qty, 
                                                        nvl(b.return_value,0)  return_val            
                                                from
                                                   (
                                                    select  m.invoice_no,
                                                            d.product_code,
                                                            d.product_price,  
                                                            d.issued_qty,
                                                            NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0)  NET_VAL
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and   m.inv_type_code='INV001'
                                                    and  to_date(m.invoice_date,'DD/MM/RRRR') BETWEEN TO_DATE(TRUNC(TO_DATE(fDate,'DD/MM/RRRR'),'RR'),'DD/MM/RRRR') AND TO_DATE(tDate,'DD/MM/RRRR')
                                                   )a,                                                                            
                                                   ( 
                                                    select  a.invoice_no,
                                                            b.product_code,
                                                            nvl(b.return_qty,0) return_qty,
                                                            b.return_value
                                                    from    vw_ret_return_mst a, vw_ret_return_dtl b
                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                                                    )b
                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                )
                                            group by  product_code       
                                            

                                            union all  
                                            
                                            
                                            
                                            select product_code,
                                                   0 current_month_sales_qty,
                                                   0 current_month_sales_val,       
                                                   0 current_month_return_qty,
                                                   0 current_month_return_val,
                                                   
                                                   0 last_month_sales_qty,
                                                   0 last_month_sales_val,       
                                                   0 last_month_return_qty,
                                                   0 last_month_return_val,               
                                                   
                                                   0 current_month_target_qty,
                                                   0 current_month_target_val,
                                                   
                                                   0 current_year_sales_qty,
                                                   0 current_year_sales_val,       
                                                   0 current_year_return_qty,
                                                   0 current_year_return_val,
                                                            
                                                   sum(sales_qty) last_year_sales_qty,
                                                   sum(sales_val) last_year_sales_val,       
                                                   sum(return_qty) last_year_return_qty,
                                                   sum(return_val) last_year_return_val     
                                            from
                                                (
                                                select  a.product_code,
                                                        a.product_price,                                     
                                                        nvl(a.issued_qty,0) sales_qty,
                                                        nvl(a.net_val,0) sales_val,
                                                        nvl(b.return_qty,0) return_qty, 
                                                        nvl(b.return_value,0)  return_val            
                                                from
                                                   (
                                                    select  m.invoice_no,
                                                            d.product_code,
                                                            d.product_price,  
                                                            d.issued_qty,
                                                            NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0)  NET_VAL
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and  inv_type_code='INV001'
                                                    and  to_date(invoice_date,'DD/MM/RRRR') BETWEEN TO_DATE(ADD_MONTHS(TRUNC(TO_DATE(fDate,'DD/MM/RRRR'),'RR'),-12),'DD/MM/RRRR')  AND TO_DATE(ADD_MONTHS(TO_DATE(tDate,'DD/MM/RRRR'),-12),'DD/MM/RRRR')
                                                   )a,                                                                            
                                                   ( 
                                                    select  a.invoice_no,
                                                            b.product_code,
                                                            nvl(b.return_qty,0) return_qty,
                                                            b.return_value
                                                    from    vw_ret_return_mst a, vw_ret_return_dtl b
                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                                                    )b
                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                )
                                            group by  product_code
                                           
                                           
                                           
                                            )
                                        group by product_code
                                        )a, mv_product_info b,mv_base_product_info c, mv_brand_info d,mv_category_info e
                                        where a.product_code=b.product_code
                                        and   b.base_product_code=c.base_product_code
                                        and   b.brand_code=d.brand_code
                                        and   b.product_category=e.category_code;
         end;
     
     elsif vCount > 0 then
     
         begin
         
               open Ntl_Prod_Sales for                                                                            
                                     select
                                            b.base_product_code,
                                            c.base_product_name,
                                            b.product_category product_category_code,
                                            e.category_name product_category_name,
                                            b.brand_code,
                                            d.brand_name,
                                                
                                            a.product_code,
                                            b.product_name,
                                            b.pack_size,
                                            
                                            
                                            current_month_sales_val,
                                            current_month_return_val,
                                            current_month_net_sales_val, 
                                                   
                                            current_month_sales_qty,
                                            current_month_return_qty,
                                            current_month_net_sales_qty,

                                            last_month_sales_val,        
                                            last_month_return_val,
                                            last_month_net_sales_val,
                                            
                                            last_month_sales_qty,
                                            last_month_return_qty,
                                            last_month_net_sales_qty,

                                           
                                            current_month_target_qty,
                                            current_month_target_val,
                                          
                                            round(decode(nvl(current_month_target_val,0),0,0,((nvl(current_month_net_sales_val,0))/nvl(current_month_target_val,0)) *100),2) current_month_ach,       
                                                   
                                           round( (((nvl(current_month_net_sales_val,0) - nvl(last_month_net_sales_val,0))*100) / decode(nvl(last_month_net_sales_val,0),0,1,nvl(last_month_net_sales_val,0))),2 ) current_month_growth,
                                           
                                            round(nvl(current_year_net_sales_val,0),2) current_year_ims_val,        
                                            
                                            round(nvl(last_year_net_sales_val,0),2) last_year_ims_val                                  
                                                        
                                    from
                                        (    
                                        select product_code,
                                               sum(nvl(current_month_sales_qty,0)) current_month_sales_qty,
                                               sum(nvl(current_month_sales_val,0)) current_month_sales_val,       
                                               sum(nvl(current_month_return_qty,0)) current_month_return_qty,
                                               sum(nvl(current_month_return_val,0)) current_month_return_val,
                                               
                                               sum(nvl(current_month_sales_qty,0))-sum(nvl(current_month_return_qty,0))   current_month_net_sales_qty,
                                               sum(nvl(current_month_sales_val,0))-sum(nvl(current_month_return_val,0))   current_month_net_sales_val,
                                               
                                               
                                               
                                               sum(nvl(last_month_sales_qty,0)) last_month_sales_qty,
                                               sum(nvl(last_month_sales_val,0)) last_month_sales_val,       
                                               sum(nvl(last_month_return_qty,0)) last_month_return_qty,
                                               sum(nvl(last_month_return_val,0)) last_month_return_val, 
                                               
                                               
                                               sum(nvl(last_month_sales_qty,0))-sum(nvl(last_month_return_qty,0))  last_month_net_sales_qty,
                                               sum(nvl(last_month_sales_val,0))-sum(nvl(last_month_return_val,0))   last_month_net_sales_val,
                                               
                                                         
                                               
                                               sum(current_month_target_qty) current_month_target_qty,
                                               sum(current_month_target_val) current_month_target_val,
                                               
                                               sum(current_year_sales_qty) current_year_sales_qty,
                                               sum(current_year_sales_val) current_year_sales_val,       
                                               sum(current_year_return_qty) current_year_return_qty,
                                               sum(current_year_return_val) current_year_return_val,
                                               
                                               sum(current_year_sales_qty)-sum(current_year_return_qty)  current_year_net_sales_qty,
                                               sum(current_year_sales_val)-sum(current_year_return_val)   current_year_net_sales_val,
                                               
                                               
                                               sum(last_year_sales_qty) last_year_sales_qty,
                                               sum(last_year_sales_val) last_year_sales_val,       
                                               sum(last_year_return_qty) last_year_return_qty,
                                               sum(last_year_return_val) last_year_return_val,
                                               
                                               sum(last_year_sales_qty)-sum(last_year_return_qty) last_year_net_sales_qty,
                                               sum(last_year_sales_val)-sum(last_year_return_val)   last_year_net_sales_val                              
                                        from
                                            (
                                            
                                         
                                        
                                        
                                        
                                           select product_code,
                                                   sum(sales_qty) current_month_sales_qty,
                                                   sum(sales_val) current_month_sales_val,       
                                                   sum(return_qty) current_month_return_qty,
                                                   sum(return_val) current_month_return_val,
                                                   
                                                   0 last_month_sales_qty,
                                                   0 last_month_sales_val,       
                                                   0 last_month_return_qty,
                                                   0 last_month_return_val,               
                                                   
                                                   0 current_month_target_qty,
                                                   0 current_month_target_val,
                                                   
                                                   0 current_year_sales_qty,
                                                   0 current_year_sales_val,       
                                                   0 current_year_return_qty,
                                                   0 current_year_return_val,
                                                   
                                                   0 last_year_sales_qty,
                                                   0 last_year_sales_val,       
                                                   0 last_year_return_qty,
                                                   0 last_year_return_val                              
                                            from
                                                (
                                                select  a.product_code,
                                                        a.product_price,                                     
                                                        nvl(a.issued_qty,0) sales_qty,
                                                        nvl(a.net_val,0) sales_val,
                                                        nvl(b.return_qty,0) return_qty, 
                                                        nvl(b.return_value,0)  return_val            
                                                from
                                                   (
                                                    select  m.invoice_no,
                                                            d.product_code,
                                                            d.product_price,  
                                                            d.issued_qty,
                                                            NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0)  NET_VAL
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                    and   m.inv_type_code='INV001'
                                                    and   m.invoice_date between fDate and tDate
                                                   )a,                                                                            
                                                   ( 
                                                    select  a.invoice_no,
                                                            b.product_code,
                                                            nvl(b.return_qty,0) return_qty,
                                                            b.return_value
                                                    from    vw_ret_return_mst a, vw_ret_return_dtl b
                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                    and     b.product_code in (select product_code from user_product_dtl where user_id=userId)

                                                    )b
                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                )
                                            group by  product_code
                                                
                                            union all
                                            
                                            
                                            
                                            
                                            select product_code,
                                                   0 current_month_sales_qty,
                                                   0 current_month_sales_val,       
                                                   0 current_month_return_qty,
                                                   0 current_month_return_val,  
                                                                    
                                                   sum(sales_qty) last_month_sales_qty,
                                                   sum(sales_val) last_month_sales_val,       
                                                   sum(return_qty) last_month_return_qty,
                                                   sum(return_val) last_month_return_val,
                                                   
                                                   0 current_month_target_qty,
                                                   0 current_month_target_val,
                                                   
                                                   0 current_year_sales_qty,
                                                   0 current_year_sales_val,       
                                                   0 current_year_return_qty,
                                                   0 current_year_return_val,
                                                   
                                                   0 last_year_sales_qty,
                                                   0 last_year_sales_val,       
                                                   0 last_year_return_qty,
                                                   0 last_year_return_val                              
                                            from
                                                (
                                                select  a.product_code,
                                                        a.product_price,                                     
                                                        nvl(a.issued_qty,0) sales_qty,
                                                        nvl(a.net_val,0) sales_val,
                                                        nvl(b.return_qty,0) return_qty, 
                                                        nvl(b.return_value,0)  return_val            
                                                from
                                                   (
                                                    select  m.invoice_no,
                                                            d.product_code,
                                                            d.product_price,  
                                                            d.issued_qty,
                                                            NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0)  NET_VAL
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                    and   m.inv_type_code='INV001'
                                                    and  to_date(m.invoice_date,'DD/MM/RRRR') between TO_DATE(add_months(trunc(to_date(fDate,'DD/MM/RRRR'),'MM'),-1),'DD/MM/RRRR') and TO_DATE(add_months(to_date(tDate,'DD/MM/RRRR'),-1),'DD/MM/RRRR')
                                                   )a,                                                                            
                                                   ( 
                                                    select  a.invoice_no,
                                                            b.product_code,
                                                            nvl(b.return_qty,0) return_qty,
                                                            b.return_value
                                                    from    vw_ret_return_mst a, vw_ret_return_dtl b
                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                    and     b.product_code in (select product_code from user_product_dtl where user_id=userId)

                                                    )b
                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                )
                                            group by  product_code
                                            
                                            
                                            union all
                                            

                                            select product_code ,
                                                   0 current_month_sales_qty,
                                                   0 current_month_sales_val,       
                                                   0 current_month_return_qty,
                                                   0 current_month_return_val,
                                                   
                                                   0 last_month_sales_qty,
                                                   0 last_month_sales_val,       
                                                   0 last_month_return_qty,
                                                   0 last_month_return_val, 
                                                                 
                                                   sum(target_qty) current_month_target_qty,
                                                   sum(target_val) current_month_target_val, 
                                                             
                                                   0 current_year_sales_qty,
                                                   0 current_year_sales_val,       
                                                   0 current_year_return_qty,
                                                   0 current_year_return_val,
                                                   
                                                   0 last_year_sales_qty,
                                                   0 last_year_sales_val,       
                                                   0 last_year_return_qty,
                                                   0 last_year_return_val                        
                                            from   mv_target_l3years
                                            where  (year||month_code)  = to_char(  TO_DATE(ADD_MONTHS(TRUNC(TO_DATE(FDATE,'DD/MM/RRRR'),'MM'),-0),'DD/MM/RRRR')   ,'RRRRMM')
                                            and    product_code in (select product_code from user_product_dtl where user_id=userId)
                                            group by product_code
                                            
                                            
                                            
                                           union all
                                           
                                           
                                            select product_code,
                                                   0 current_month_sales_qty,
                                                   0 current_month_sales_val,       
                                                   0 current_month_return_qty,
                                                   0 current_month_return_val,
                                                   
                                                   0 last_month_sales_qty,
                                                   0 last_month_sales_val,       
                                                   0 last_month_return_qty,
                                                   0 last_month_return_val,               
                                                   
                                                   0 current_month_target_qty,
                                                   0 current_month_target_val,
                                                                                 
                                                   sum(sales_qty) current_year_sales_qty,
                                                   sum(sales_val) current_year_sales_val,       
                                                   sum(return_qty) current_year_return_qty,
                                                   sum(return_val) current_year_return_val,
                                                   
                                                   0 last_year_sales_qty,
                                                   0 last_year_sales_val,       
                                                   0 last_year_return_qty,
                                                   0 last_year_return_val                
                                            from
                                                (
                                                select  a.product_code,
                                                        a.product_price,                                     
                                                        nvl(a.issued_qty,0) sales_qty,
                                                        nvl(a.net_val,0) sales_val,
                                                        nvl(b.return_qty,0) return_qty, 
                                                        nvl(b.return_value,0)  return_val            
                                                from
                                                   (
                                                    select  m.invoice_no,
                                                            d.product_code,
                                                            d.product_price,  
                                                            d.issued_qty,
                                                            NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0)  NET_VAL
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                    and   m.inv_type_code='INV001'
                                                    and  to_date(m.invoice_date,'DD/MM/RRRR') BETWEEN TO_DATE(TRUNC(TO_DATE(fDate,'DD/MM/RRRR'),'RR'),'DD/MM/RRRR') AND TO_DATE(tDate,'DD/MM/RRRR')
                                                   )a,                                                                            
                                                   ( 
                                                    select  a.invoice_no,
                                                            b.product_code,
                                                            nvl(b.return_qty,0) return_qty,
                                                            b.return_value
                                                    from    vw_ret_return_mst a, vw_ret_return_dtl b
                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                    and     b.product_code in (select product_code from user_product_dtl where user_id=userId)

                                                    )b
                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                )
                                            group by  product_code       
                                            

                                            union all  
                                            
                                            
                                            
                                            select product_code,
                                                   0 current_month_sales_qty,
                                                   0 current_month_sales_val,       
                                                   0 current_month_return_qty,
                                                   0 current_month_return_val,
                                                   
                                                   0 last_month_sales_qty,
                                                   0 last_month_sales_val,       
                                                   0 last_month_return_qty,
                                                   0 last_month_return_val,               
                                                   
                                                   0 current_month_target_qty,
                                                   0 current_month_target_val,
                                                   
                                                   0 current_year_sales_qty,
                                                   0 current_year_sales_val,       
                                                   0 current_year_return_qty,
                                                   0 current_year_return_val,
                                                            
                                                   sum(sales_qty) last_year_sales_qty,
                                                   sum(sales_val) last_year_sales_val,       
                                                   sum(return_qty) last_year_return_qty,
                                                   sum(return_val) last_year_return_val     
                                            from
                                                (
                                                select  a.product_code,
                                                        a.product_price,                                     
                                                        nvl(a.issued_qty,0) sales_qty,
                                                        nvl(a.net_val,0) sales_val,
                                                        nvl(b.return_qty,0) return_qty, 
                                                        nvl(b.return_value,0)  return_val            
                                                from
                                                   (
                                                    select  m.invoice_no,
                                                            d.product_code,
                                                            d.product_price,  
                                                            d.issued_qty,
                                                            NVL(D.TOTAL_VAL,0) -NVL(BONUS_PRICE_DISCOUNT,0)  NET_VAL
                                                    from vw_invoice_mst m, vw_invoice_dtl d
                                                    where m.inv_mst_slno=d.inv_mst_slno
                                                    and   d.product_code in (select product_code from user_product_dtl where user_id=userId)
                                                    and  inv_type_code='INV001'
                                                    and  to_date(invoice_date,'DD/MM/RRRR') BETWEEN TO_DATE(ADD_MONTHS(TRUNC(TO_DATE(fDate,'DD/MM/YYYY'),'RR'),-12),'DD/MM/RRRR')  AND TO_DATE(ADD_MONTHS(TO_DATE(tDate,'DD/MM/RRRR'),-12),'DD/MM/RRRR')
                                                   )a,                                                                            
                                                   ( 
                                                    select  a.invoice_no,
                                                            b.product_code,
                                                            nvl(b.return_qty,0) return_qty,
                                                            b.return_value
                                                    from    vw_ret_return_mst a, vw_ret_return_dtl b
                                                    where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                                                    and     b.product_code in (select product_code from user_product_dtl where user_id=userId)

                                                    )b
                                                where a.invoice_no=b.invoice_no(+)
                                                and   a.product_code=b.product_code(+)
                                                )
                                            group by  product_code
                                            )
                                        group by product_code
                                        )a, mv_product_info b,mv_base_product_info c, mv_brand_info d,mv_category_info e
                                        where a.product_code=b.product_code
                                        and   b.base_product_code=c.base_product_code
                                        and   b.brand_code=d.brand_code
                                        and   b.product_category=e.category_code;        
         
         end;     
     
     end if;





   
    return Ntl_Prod_Sales;
    
exception
   when no_data_found
   then
   open Ntl_Prod_Sales for
         select *
           from dual
          where 1 = 2;
      return Ntl_Prod_Sales;
end;
/

CREATE OR REPLACE function             FN_RET_BONUS_SLAB_ADJ(pfrom_date varchar2,
                                                             pto_date varchar2,
                                                             pdivision_code varchar2, 
                                                             pregion_code varchar2,
                                                             parea_code varchar2,
                                                             pterritory_code varchar2,
                                                             pcustomer_code varchar2,
                                                             pbonus_type varchar2
                                                             )
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');

   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;
   bType varchar2(100)    :=pbonus_type;

begin
    open Ims for
                select /*+ append */ 
                       sysdate refresh_date,
                       f.zone_code division_code,
                       f.zone_name division_name,
                       f.area_code region_code,
                       f.area_name region_name,
                       f.belt_code area_code,
                       f.belt_name area_name,
                       f.territory_code,
                       f.territory_name,
                       a.customer_code,
                       b.customer_name,
                       b.db_location,
                       a.market_code,
                       c.market_name,
                       a.route_code,
                       d.route_name,
                       a.retailer_code, 
                       e.retailer_name,
                       a.invoice_no,
                       to_char(a.invoice_date,'MM/DD/RRRR HH:MI:SS AM') invoice_date, 
                       a.issue_product_code product_code, 
                       g.product_name,
                       g.pack_size,
                       a.bonus_slab_type, 
                       slab_qty,       
                       nvl(a.normal_dec_slab,0) normal_dec_slab,
                       a.issued_qty,
                       a.return_qty,
                       a.total_ims_qty,
                       a.normal_ims_qty,
                       a.ims_normal_bns_qty,
                       a.slab_ims_qty,
                       a.ims_slab_bns_qty,       
                       round(nvl(a.bonus_ratio,0),2) bonus_ratio,       
                       round(nvl(a.adjustable_slab,0),2) adjustable_slab               
                from
                    (   
                    select customer_code,
                           market_code,
                           route_code,
                           retailer_code, 
                           invoice_no,
                           invoice_date,  
                           issue_product_code, 
                           bonus_slab_type, 
                           slab_qty,       
                           normal_dec_slab ,
                           sum(issued_qty)issued_qty,
                           sum(return_qty)return_qty,
                           sum(nvl(total_ims_qty,0))total_ims_qty,
                           sum(nvl(normal_ims_qty,0))normal_ims_qty,
                           sum(nvl(ims_normal_bns_qty,0))ims_normal_bns_qty,
                           sum(nvl(slab_ims_qty,0))slab_ims_qty,
                           sum(nvl(ims_slab_bns_qty,0))ims_slab_bns_qty,       
                           sum(nvl(slab_ims_qty,0))/normal_dec_slab bonus_ratio,       
                           sum(nvl(ims_slab_bns_qty,0)) -(sum(nvl(slab_ims_qty,0))/normal_dec_slab) adjustable_slab               
                    from
                    ( 
                          
                                select a.customer_code,
                                       a.market_code,
                                       a.route_code,
                                       a.retailer_code, 
                                       a.invoice_no,
                                       a.invoice_date,  
                                       a.issue_product_code, 
                                       a.bonus_product_code,
                                       a.bonus_slab_type, 
                                       a.bonus_type,
                                       a.slab_qty, 
                                       a.bns_dec_qty,
                                       a.issued_qty,
                                       a.slab_bonus_qty,
                                       a.normal_bonus_qty,
                                       b.ret_issue_product_code,
                                       nvl(b.return_qty,0)return_qty ,
                                       b.ret_bonus_product_code,
                                       nvl(b.ret_bonus_qty,0)ret_bonus_qty,
                                       nvl(nvl(a.issued_qty,0)-nvl(b.return_qty,0),0)total_ims_qty,
                                       c.normal_dec_slab,
                                       nvl(decode(a.bonus_slab_type,'Normal',nvl(a.issued_qty,0))-nvl(b.return_qty,0),0) normal_ims_qty,
                                       nvl(decode(a.bonus_slab_type,'Normal',nvl(a.normal_bonus_qty,0)) -nvl(ret_bonus_qty,0),0)  ims_normal_bns_qty,      
                                       nvl(decode(a.bonus_slab_type,'Slab',nvl(a.issued_qty,0))-nvl(b.return_qty,0),0) slab_ims_qty,
                                       nvl(decode(a.bonus_slab_type,'Slab',nvl(a.slab_bonus_qty,0)) -nvl(ret_bonus_qty,0),0)  ims_slab_bns_qty
                                from 
                                    (
                                        select distinct
                                               customer_code,
                                               market_code,
                                               route_code,
                                               retailer_code, 
                                               invoice_no,
                                               invoice_date, 
                                               issue_product_code, 
                                               bonus_product_code,
                                               bonus_slab_type, 
                                               bonus_type,
                                               slab_qty, 
                                               bns_dec_qty,
                                               issued_qty,
                                               slab_bonus_qty ,
                                               normal_bonus_qty             
                                        from 
                                            (    
                                            select m.customer_code,
                                                   m.market_code,
                                                   m.route_code,
                                                   m.retailer_code, 
                                                   m.invoice_no,
                                                   m.invoice_date, 
                                                   b.issue_product_code, 
                                                   b.bonus_product_code,
                                                   b.bonus_slab_type, 
                                                   b.bonus_type,
                                                   b.slab_qty, 
                                                   b.bns_dec_qty,
                                                   d.issued_qty,
                                                   b.bonus_qty slab_bonus_qty,
                                                   0 normal_bonus_qty            
                                            from  mv_invoice_bonus_slab_dtl_v1 b , mv_invoice_mst m , mv_invoice_dtl d
                                            where b.inv_mst_slno =m.inv_mst_slno
                                            and   m.inv_mst_slno=d.inv_mst_slno
                                            and   b.inv_dtl_slno=d.inv_dtl_slno
                                            and   trunc(m.invoice_date) between fDate and  tDate  
                                            and   nvl(b.bonus_qty,0) >0
                                            and   b.bonus_slab_type = 'Slab'
                                                    
                                            union all 
                                                    
                                            select m.customer_code,
                                                   m.market_code, 
                                                   m.route_code,                  
                                                   m.retailer_code, 
                                                   m.invoice_no,
                                                   trunc(m.invoice_date) invoice_date,
                                                   b.issue_product_code, 
                                                   b.bonus_product_code,
                                                   b.bonus_slab_type, 
                                                   b.bonus_type,
                                                   b.slab_qty, 
                                                   b.bns_dec_qty,
                                                   d.issued_qty,
                                                   0 slab_bonus_qty,
                                                   b.bonus_qty normal_bonus_qty           
                                            from mv_invoice_bonus_slab_dtl_v1  b , mv_invoice_mst m , mv_invoice_dtl d
                                            where b.inv_mst_slno =m.inv_mst_slno
                                            and  m.inv_mst_slno=d.inv_mst_slno
                                            and  b.inv_dtl_slno=d.inv_dtl_slno
                                            and trunc(m.invoice_date) between fDate and  tDate 
                                            and nvl(b.bonus_qty,0) >0
                                            and b.bonus_slab_type = 'Normal'
                                            )
                                    )a,
                                        
                                    (
                                            select distinct
                                                   invoice_no,
                                                   ret_issue_product_code,
                                                   ret_bonus_product_code,
                                                   bonus_slab_type,               
                                                   return_qty,
                                                   ret_bonus_qty
                                            from   
                                                (                 
                                                   select  i.invoice_no,
                                                           b.issue_product_code ret_issue_product_code,
                                                           b.bonus_product_code ret_bonus_product_code,
                                                           b.bonus_slab_type,               
                                                           d.return_qty,
                                                           b.bonus_qty ret_bonus_qty
                                                    from mv_ret_return_mst m ,mv_ret_return_dtl d , mv_invoice_mst i, mv_invoice_bonus_slab_dtl_v1  b
                                                    where  m.ret_recv_mst_slno=d.ret_recv_mst_slno
                                                    and    m.invoice_no =i.invoice_no
                                                    and    i.inv_mst_slno =b.inv_mst_slno
                                                    and    d.product_code= b.issue_product_code
                                                    and  m.customer_code  =i.customer_code 
                                                    and  m.return_type ='F'
                                                    and  trunc(i.invoice_date) between fDate and  tDate 
                                                
                                                                      
                                                    union all
                                                            
                                                    select i.invoice_no, 
                                                           b.issue_product_code ret_issue_product_code,
                                                           b.bonus_product_code ret_bonus_product_code,
                                                           b.bonus_slab_type,                   
                                                           d.return_qty,                   
                                                           bb.ret_bns_back_qty ret_bonus_qty
                                                    from mv_ret_return_mst m ,mv_ret_return_dtl d , mv_invoice_mst i, mv_invoice_bonus_slab_dtl_v1 b, mv_return_bonus_slab_dtl_v1  bb
                                                    where  m.ret_recv_mst_slno=d.ret_recv_mst_slno
                                                    and    m.invoice_no =i.invoice_no
                                                    and    i.inv_mst_slno =b.inv_mst_slno
                                                    and    d.product_code= b.issue_product_code
                                                    and    m.customer_code  =i.customer_code 
                                                    and    m.return_type ='P'
                                                    and    nvl(b.bonus_qty,0) >0
                                                    and    b.inv_mst_slno =bb.inv_mst_slno
                                                    and    b.issue_product_code =bb.product_code
                                                    and    b.bonus_product_code=bb.bonus_product_code
                                                    and    b.slab_qty=bb.slab_qty
                                                    and    trunc(i.invoice_date) between fDate and  tDate 
                                                )     
                                    )b,
                                    (
                                        select distinct
                                               b.issue_product_code,                            
                                               b.slab_qty normal_dec_slab
                                        from   mv_invoice_bonus_slab_dtl_v1   b , mv_invoice_mst i
                                        where  b.inv_mst_slno =i.inv_mst_slno 
                                        and    b.bonus_slab_type ='Normal'  
                                        and    b.bonus_type ='P'
                                        and    b.bns_dec_qty =1
                                        and    trunc(i.invoice_date) between fDate and  tDate 
                                    )c     
                                where a.invoice_no          = b.invoice_no(+)
                                and   a.issue_product_code  = b.ret_issue_product_code(+)
                                and   a.bonus_product_code  = b.ret_bonus_product_code(+)
                                and   a.bonus_slab_type     = b.bonus_slab_type(+)

                               and   a.issue_product_code  = c.issue_product_code(+)
                                  
                       )         
                    group by customer_code, market_code,route_code,retailer_code, invoice_no,invoice_date,  issue_product_code, bonus_slab_type,slab_qty, normal_dec_slab   
                    ) a, mv_customer_info b, mv_market_info c, mv_route_info d, mv_retailer_info e,mv_division_customer_relation f,mv_product_info g
                where a.customer_code=b.customer_code
                and   a.market_code=c.market_code
                and   a.route_code=d.route_code
                and   a.retailer_code=e.retailer_code
                and   a.market_code=f.market_code(+)
                and   a.issue_product_code=g.product_code
                and  (f.zone_code = dCode or dCode='ALL')
                and  (f.area_code = rCode or rCode='ALL')
                and  (f.belt_code = aCode or aCode='ALL')
                and  (f.territory_code = tCode or tCode='ALL')  
                and  (a.customer_code = cCode or cCode='ALL') 
                and  (a.bonus_slab_type = bType or bType='ALL');



   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_TRADE_PROGRAM_PARTICIPATION( p_division_code varchar2, 
                                                                       p_region_code varchar2,
                                                                       p_area_code varchar2,
                                                                       p_territory_code varchar2,
                                                                       p_customer_code varchar2,
                                                                       p_program_no varchar2,
                                                                       p_effect_type varchar2
                                                                       )
   return sys_refcursor
as
   trade_ims       sys_refcursor;  
   
   


   
   v_divisionCode varchar2(100)   :=p_division_code;
   v_regionCode varchar2(100)     :=p_region_code;
   v_areaCode varchar2(100)       :=p_area_code;
   v_territoryCode varchar2(100)  :=p_territory_code;
   v_customerCode varchar2(100)   :=p_customer_code;
   
   
   v_program_no varchar2(100)  :=p_program_no;
   v_effect_type varchar2(100)   :=p_effect_type;   
   
   
      

begin
   open trade_ims for                                                                            
                        select division_code,
                               division_name,
                               region_code,
                               region_name,
                               area_code,
                               area_name,
                               territory_code,
                               territory_name,
                               customer_code,
                               customer_name,
                               db_location,
                               market_code,
                               market_name,
                               route_code,
                               route_name,
                               retailer_code,
                               retailer_name,
                               trade_program_no,
                               program_name,
                               effect_type,
                               trade_policy_no,
                               slab_target_val,
                               slab_upper_amt,
                               no_of_inv,
                               gift,
                               discount_amt,
                               discount_percentage,
                               entry_date,
                               program_type_code,
                               program_type,
                               effect_from_date,
                               effect_to_date,
                               sales_value,
                               return_value,
                               ims_value
                         from 
                            ( 
                             select  division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
                                     customer_code, customer_name, db_location, market_code, market_name, route_code, route_name, retailer_code, 
                                     retailer_name, trade_program_no, program_name, effect_type, trade_policy_no, slab_target_val, slab_upper_amt, 
                                     no_of_inv, gift, discount_amt, discount_percentage, entry_date, program_type_code, program_type, 
                                     effect_from_date, effect_to_date, sales_value, return_value, ims_value
                             from   MV_TRADE_PROGRAM_PARTICIPATION 
                             where  trade_program_no=v_program_no
                             and    effect_type=v_effect_type
                             )
        where  (division_code = v_divisionCode or v_divisionCode='ALL')
        and    (region_code = v_regionCode or v_regionCode='ALL')
        and    (area_code = v_areaCode or v_areaCode='ALL')
        and    (territory_code = v_territoryCode or v_territoryCode='ALL')  
        and    (customer_code = v_customerCode or v_customerCode='ALL') ;                 

                        
      


   
    return trade_ims;
    
exception
   when no_data_found
   then
   open trade_ims for
         select *
           from dual
          where 1 = 2;
      return trade_ims;
end;
/

CREATE OR REPLACE FUNCTION             FN_RET_TRADE_INV_VALUE(P_RET_CODE         VARCHAR2,
                                                            vTRADE_PROGRAM_NO   VARCHAR2,
                                                            vEFFECT_FROM_DATE   DATE,
                                                            vEFFECT_TO_DATE     DATE,
                                                            vPROG_TYPE          VARCHAR2)
RETURN NUMBER
AS
V_INV_AMT           NUMBER:=0;
vENTRY_DATE         DATE;
V_TRADE_INV_VALUE   NUMBER:=0;
vEFFECT_TYPE        VARCHAR2(20);
vSLAB_ADJUSTMENT    NUMBER:=0;

BEGIN
    
    BEGIN            
        SELECT TO_DATE(ENTRY_DATE,'DD/MM/RRRR')
        INTO   vENTRY_DATE
        FROM   MV_TRADE_PROGRAM_RETAILER 
        WHERE  TRADE_PROGRAM_NO=vTRADE_PROGRAM_NO
        AND    RETAILER_CODE=P_RET_CODE
        AND    PROGRAM_TYPE=vPROG_TYPE;        
    END;
     
    BEGIN
        SELECT  EFFECT_TYPE INTO vEFFECT_TYPE FROM MV_TRADE_PROG_PROD_MST   WHERE TRADE_PROG_PROD_MST_SLNO=vTRADE_PROGRAM_NO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN 
           vEFFECT_TYPE:='INVOICE'; 
    END;
    
    IF  vEFFECT_TYPE ='INVOICE' THEN          
        BEGIN
            SELECT NVL(SUM(NVL(TOTAL_VAL,0)),0)-(NVL(SUM(NVL(BONUS_PRICE_DISCOUNT,0)),0))
            INTO   V_INV_AMT
            FROM   MV_INVOICE_MST M,MV_INVOICE_DTL  D
            WHERE  M.INV_MST_SLNO=D.INV_MST_SLNO
            AND    TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)
            AND    TRUNC(INVOICE_DATE)>=vENTRY_DATE
            AND    D.PRODUCT_CODE IN (SELECT DISTINCT PRODUCT_CODE FROM MV_TRADE_PROG_PRODUCT  WHERE TRADE_PROG_PROD_MST_SLNO=vTRADE_PROGRAM_NO)
            AND    M.INV_TYPE_CODE='INV001'
            AND    M.RETAILER_CODE=P_RET_CODE;            
        EXCEPTION
            WHEN NO_DATA_FOUND  THEN
            V_INV_AMT :=0;
        END;
                
        V_TRADE_INV_VALUE := NVL(V_INV_AMT,0);   
        
    ELSE
    
        BEGIN
            SELECT NVL(SUM(NVL(TOTAL_VAL,0)),0)-(NVL(SUM(NVL(BONUS_PRICE_DISCOUNT,0)),0))
            INTO   V_INV_AMT
            FROM   MV_INVOICE_MST M, MV_INVOICE_DTL  D
            WHERE  M.INV_MST_SLNO=D.INV_MST_SLNO
            AND    TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)
            AND    D.PRODUCT_CODE IN (SELECT DISTINCT PRODUCT_CODE FROM MV_TRADE_PROG_PRODUCT WHERE TRADE_PROG_PROD_MST_SLNO=vTRADE_PROGRAM_NO)
            AND    M.INV_TYPE_CODE='INV001'
            AND    M.RETAILER_CODE=P_RET_CODE;            
        EXCEPTION
            WHEN NO_DATA_FOUND  THEN
            V_INV_AMT :=0;
        END;
                
        BEGIN
            SELECT SUM(NVL(SLAB_ADJUSTMENT,0))+SUM(NVL(SPECIAL_BONUS_DISC,0))
            INTO   vSLAB_ADJUSTMENT
            FROM   MV_INVOICE_MST M
            WHERE  TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)            
            AND    M.INV_TYPE_CODE='INV001'
            AND    M.RETAILER_CODE=P_RET_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN 
                vSLAB_ADJUSTMENT:=0;
        END;  
        
        V_TRADE_INV_VALUE := NVL(V_INV_AMT,0)-NVL(vSLAB_ADJUSTMENT,0);   
    END IF;          

    RETURN V_TRADE_INV_VALUE;    
    
EXCEPTION
    WHEN NO_DATA_FOUND  THEN 
    RETURN 0;

END ;
/

CREATE OR REPLACE FUNCTION             FN_RET_TRADE_RETURN_VALUE(P_RET_CODE         VARCHAR2,
                                                            vTRADE_PROGRAM_NO   VARCHAR2,
                                                            vEFFECT_FROM_DATE   DATE,
                                                            vEFFECT_TO_DATE     DATE,
                                                            vPROG_TYPE          VARCHAR2)
RETURN NUMBER
AS
vENTRY_DATE              DATE;
V_RET_VALUE              NUMBER:=0;
V_TRADE_RETURN_VALUE     NUMBER:=0;
vEFFECT_TYPE             VARCHAR2(20);
vRETURN_SLAB_VALUE       NUMBER:=0;

BEGIN
    
    BEGIN            
        SELECT TO_DATE(ENTRY_DATE,'DD/MM/RRRR')
        INTO   vENTRY_DATE
        FROM    MV_TRADE_PROGRAM_RETAILER
        WHERE  TRADE_PROGRAM_NO=vTRADE_PROGRAM_NO
        AND    RETAILER_CODE=P_RET_CODE
        AND    PROGRAM_TYPE=vPROG_TYPE;        
    END;
     
    BEGIN
        SELECT  EFFECT_TYPE INTO vEFFECT_TYPE FROM MV_TRADE_PROG_PROD_MST  WHERE TRADE_PROG_PROD_MST_SLNO=vTRADE_PROGRAM_NO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN 
           vEFFECT_TYPE:='INVOICE'; 
    END;
    IF  vEFFECT_TYPE ='INVOICE' THEN  
                
        BEGIN
                    
            SELECT  SUM(NVL(RETURN_VALUE,0)) 
            INTO    V_RET_VALUE
            FROM
            (
            SELECT   M.INVOICE_NO,
                     D.PRODUCT_CODE,
                     M.RETAILER_CODE,
                     SUM(D.RETURN_VALUE) RETURN_VALUE                      
            FROM     MV_RET_RETURN_MST M, MV_RET_RETURN_DTL D
            WHERE    M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO           
            AND      M.INV_TYPE_CODE='INV001'
            AND      M.RETAILER_CODE=P_RET_CODE          
            AND      TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)
            AND      TRUNC(INVOICE_DATE)>=vENTRY_DATE                                                            
            AND      D.PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM MV_TRADE_PROG_PRODUCT WHERE TRADE_PROG_PROD_MST_SLNO = vTRADE_PROGRAM_NO)  
            GROUP BY M.RETAILER_CODE, M.CUSTOMER_CODE,M.INVOICE_NO, D.PRODUCT_CODE
            );
                        
        EXCEPTION
            WHEN NO_DATA_FOUND  THEN 
            V_RET_VALUE:=0;
        END;
        
        V_TRADE_RETURN_VALUE := NVL(V_RET_VALUE,0);   
        
    ELSE
    
               
        BEGIN                    
            SELECT  SUM(NVL(RETURN_VALUE,0)) 
            INTO    V_RET_VALUE
            FROM
            (
            SELECT   M.INVOICE_NO,
                     D.PRODUCT_CODE,
                     M.RETAILER_CODE,
                     SUM(D.RETURN_VALUE) RETURN_VALUE                      
            FROM     MV_RET_RETURN_MST M, MV_RET_RETURN_DTL D
            WHERE    M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO           
            AND      M.INV_TYPE_CODE='INV001'
            AND      M.RETAILER_CODE=P_RET_CODE          
            AND      TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)                                                            
            AND      D.PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM MV_TRADE_PROG_PRODUCT  WHERE TRADE_PROG_PROD_MST_SLNO = vTRADE_PROGRAM_NO)  
            GROUP BY M.RETAILER_CODE, M.CUSTOMER_CODE,M.INVOICE_NO, D.PRODUCT_CODE
            );
                        
        EXCEPTION
            WHEN NO_DATA_FOUND  THEN 
            V_RET_VALUE:=0;
        END;   
        
        BEGIN        
            SELECT   NVL(SUM(NVL(M.RETURN_SLAB_AMOUNT,0)),0)+NVL(SUM(NVL(SPECIAL_BONUS_DISC,0)),0) INTO vRETURN_SLAB_VALUE                      
            FROM     MV_RET_RETURN_MST M         
            WHERE    M.INV_TYPE_CODE='INV001'
            AND      M.RETAILER_CODE=P_RET_CODE          
            AND      TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN 
               vRETURN_SLAB_VALUE:=0;
        END; 
        
        V_TRADE_RETURN_VALUE := NVL(V_RET_VALUE,0)- NVL(vRETURN_SLAB_VALUE,0); 
        
    END IF;
      
    RETURN V_TRADE_RETURN_VALUE;    
    
EXCEPTION
    WHEN NO_DATA_FOUND  THEN 
    RETURN 0;

END ;
/

CREATE OR REPLACE FUNCTION             FN_RET_ACHIEVEMENT_VALUE( P_RET_CODE         VARCHAR2,
                                                                 vTRADE_PROGRAM_NO   VARCHAR2,
                                                                 vEFFECT_FROM_DATE   DATE,
                                                                 vEFFECT_TO_DATE     DATE,
                                                                  vPROG_TYPE          VARCHAR2
                                                                  )
RETURN NUMBER
AS
V_INV_AMT           NUMBER:=0;
vENTRY_DATE         DATE;
V_RET_VALUE         NUMBER:=0;
V_ACHIV_AMT         NUMBER:=0;
vEFFECT_TYPE        VARCHAR2(20);
vSLAB_ADJUSTMENT    NUMBER:=0;
vRETURN_SLAB_VALUE  NUMBER:=0;

BEGIN
    
    BEGIN            
        SELECT TO_DATE(ENTRY_DATE,'DD/MM/RRRR')
        INTO   vENTRY_DATE
        FROM   MV_TRADE_PROGRAM_RETAILER 
        WHERE  TRADE_PROGRAM_NO=vTRADE_PROGRAM_NO
        AND    RETAILER_CODE=P_RET_CODE
        AND    PROGRAM_TYPE=vPROG_TYPE;        
    END;
     
    BEGIN
        SELECT  EFFECT_TYPE INTO vEFFECT_TYPE FROM MV_TRADE_PROG_PROD_MST WHERE TRADE_PROG_PROD_MST_SLNO=vTRADE_PROGRAM_NO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN 
           vEFFECT_TYPE:='INVOICE'; 
    END;
    
    
    IF  vEFFECT_TYPE ='INVOICE' THEN          
        BEGIN
            SELECT NVL(SUM(NVL(TOTAL_VAL,0)),0)-(NVL(SUM(NVL(BONUS_PRICE_DISCOUNT,0)),0))
            INTO   V_INV_AMT
            FROM   MV_INVOICE_MST M, MV_INVOICE_DTL  D
            WHERE  M.INV_MST_SLNO=D.INV_MST_SLNO
            AND    TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)
            AND    TRUNC(INVOICE_DATE)>=vENTRY_DATE
            AND    D.PRODUCT_CODE IN (SELECT DISTINCT PRODUCT_CODE FROM MV_TRADE_PROG_PRODUCT WHERE TRADE_PROG_PROD_MST_SLNO=vTRADE_PROGRAM_NO)
            AND    M.INV_TYPE_CODE='INV001'
            AND    M.RETAILER_CODE=P_RET_CODE;            
        EXCEPTION
            WHEN NO_DATA_FOUND  THEN
            V_INV_AMT :=0;
        END;
                
        BEGIN
                    
            SELECT  SUM(NVL(RETURN_VALUE,0)) 
            INTO    V_RET_VALUE
            FROM
            (
            SELECT   M.INVOICE_NO,
                     D.PRODUCT_CODE,
                     M.RETAILER_CODE,
                     SUM(D.RETURN_VALUE) RETURN_VALUE                      
            FROM     MV_RET_RETURN_MST M, MV_RET_RETURN_DTL D,MV_INVOICE_MST I
            WHERE    M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO  
            AND      M.INVOICE_NO=I.INVOICE_NO           
            AND      M.INV_TYPE_CODE='INV001'
            AND      M.RETAILER_CODE=P_RET_CODE          
            AND      TRUNC(I.INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)
            AND      TRUNC(I.INVOICE_DATE)>=vENTRY_DATE                                                            
            AND      D.PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM MV_TRADE_PROG_PRODUCT WHERE TRADE_PROG_PROD_MST_SLNO = vTRADE_PROGRAM_NO)  
            GROUP BY M.RETAILER_CODE, M.CUSTOMER_CODE,M.INVOICE_NO, D.PRODUCT_CODE
            );
                        
        EXCEPTION
            WHEN NO_DATA_FOUND  THEN 
            V_RET_VALUE:=0;
         END;
        
         V_ACHIV_AMT := NVL(V_INV_AMT,0) -  NVL(V_RET_VALUE,0); 
        
    ELSE
    
        BEGIN
            SELECT NVL(SUM(NVL(TOTAL_VAL,0)),0)-(NVL(SUM(NVL(BONUS_PRICE_DISCOUNT,0)),0))
            INTO   V_INV_AMT
            FROM   MV_INVOICE_MST M, MV_INVOICE_DTL  D
            WHERE  M.INV_MST_SLNO=D.INV_MST_SLNO
            AND    TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)
            AND    D.PRODUCT_CODE IN (SELECT DISTINCT PRODUCT_CODE FROM MV_TRADE_PROG_PRODUCT WHERE TRADE_PROG_PROD_MST_SLNO=vTRADE_PROGRAM_NO)
            AND    M.INV_TYPE_CODE='INV001'
            AND    M.RETAILER_CODE=P_RET_CODE;            
        EXCEPTION
            WHEN NO_DATA_FOUND  THEN
            V_INV_AMT :=0;
        END;
        
        BEGIN
            SELECT SUM(NVL(SLAB_ADJUSTMENT,0))+SUM(NVL(SPECIAL_BONUS_DISC,0))
            INTO   vSLAB_ADJUSTMENT
            FROM   MV_INVOICE_MST M
            WHERE  TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)            
            AND    M.INV_TYPE_CODE='INV001'
            AND    M.RETAILER_CODE=P_RET_CODE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN 
                vSLAB_ADJUSTMENT:=0;
        END;
        
        BEGIN        
            SELECT   NVL(SUM(NVL(M.RETURN_SLAB_AMOUNT,0)),0)+NVL(SUM(NVL(SPECIAL_BONUS_DISC,0)),0) INTO vRETURN_SLAB_VALUE                      
            FROM     MV_RET_RETURN_MST M         
            WHERE    M.INV_TYPE_CODE='INV001'
            AND      M.RETAILER_CODE=P_RET_CODE          
            AND      TRUNC(INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN 
               vRETURN_SLAB_VALUE:=0;
        END;
        
                
        BEGIN                    
            SELECT  SUM(NVL(RETURN_VALUE,0)) 
            INTO    V_RET_VALUE
            FROM
            (
            SELECT   M.INVOICE_NO,
                     D.PRODUCT_CODE,
                     M.RETAILER_CODE,
                     SUM(D.RETURN_VALUE) RETURN_VALUE                      
            FROM     MV_RET_RETURN_MST M, MV_RET_RETURN_DTL D,MV_INVOICE_MST I
            WHERE    M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO 
            AND      M.INVOICE_NO=I.INVOICE_NO            
            AND      M.INV_TYPE_CODE='INV001'
            AND      M.RETAILER_CODE=P_RET_CODE          
            AND      TRUNC(I.INVOICE_DATE) BETWEEN TRUNC(vEFFECT_FROM_DATE) AND TRUNC(vEFFECT_TO_DATE)                                                            
            AND      D.PRODUCT_CODE IN (SELECT PRODUCT_CODE FROM MV_TRADE_PROG_PRODUCT WHERE TRADE_PROG_PROD_MST_SLNO = vTRADE_PROGRAM_NO)  
            GROUP BY M.RETAILER_CODE, M.CUSTOMER_CODE,M.INVOICE_NO, D.PRODUCT_CODE
            );
                        
        EXCEPTION
            WHEN NO_DATA_FOUND  THEN 
            V_RET_VALUE:=0;
        END;    
        
         V_ACHIV_AMT := (NVL(V_INV_AMT,0)-NVL(vSLAB_ADJUSTMENT,0)) -  (NVL(V_RET_VALUE,0)-NVL(vRETURN_SLAB_VALUE,0));  
          
    END IF;
      
    

    RETURN V_ACHIV_AMT;
    
    
EXCEPTION
    WHEN NO_DATA_FOUND  THEN 
    RETURN 0;

END ;
/

CREATE OR REPLACE FUNCTION             FN_RET_TRADE_IMS_LY(P_RET_CODE         VARCHAR2,
                                                          vTRADE_PROGRAM_NO   VARCHAR2,
                                                          vYYYYMM             VARCHAR2
                                                          )
RETURN NUMBER
AS
V_IMS_VALUE           NUMBER:=0;

BEGIN
    
           
    BEGIN
        SELECT SUM(NVL(IMS_VALUE,0))
        INTO   V_IMS_VALUE
        FROM   MV_MONTH_WISE_TRADE_RET_IMS_LY
        WHERE  YYYYMM =vYYYYMM 
        AND    TRADE_PROGRAM_NO=vTRADE_PROGRAM_NO
        AND    RETAILER_CODE=P_RET_CODE;            
    EXCEPTION
        WHEN NO_DATA_FOUND  THEN
        V_IMS_VALUE :=0;
    END;

    RETURN NVL(V_IMS_VALUE,0);
    
    
EXCEPTION
    WHEN NO_DATA_FOUND  THEN 
    RETURN 0;

END ;
/

CREATE OR REPLACE function             FN_TRADE_PROG_RET_SALES_TND_LY( p_division_code varchar2, 
                                                                       p_region_code varchar2,
                                                                       p_area_code varchar2,
                                                                       p_territory_code varchar2,
                                                                       p_customer_code varchar2,
                                                                       p_program_no varchar2,
                                                                       p_effect_type varchar2
                                                                       )
   return sys_refcursor
as
   trade_ims       sys_refcursor;  
   
   


   
   v_divisionCode varchar2(100)   :=p_division_code;
   v_regionCode varchar2(100)     :=p_region_code;
   v_areaCode varchar2(100)       :=p_area_code;
   v_territoryCode varchar2(100)  :=p_territory_code;
   v_customerCode varchar2(100)   :=p_customer_code;
   
   
   v_program_no varchar2(100)  :=p_program_no;
   v_effect_type varchar2(100)   :=p_effect_type;   
   
   
      

begin
   open trade_ims for                                                                            
                                                                           
                                                                           
                        select division_code,
                               division_name,
                               region_code,
                               region_name,
                               area_code,
                               area_name,
                               territory_code,
                               territory_name,
                               customer_code,
                               customer_name,
                               db_location,
                               market_code,
                               market_name,
                               route_code,
                               route_name,
                               retailer_code,
                               retailer_name,
                               trade_program_no,
                               program_name,
                               effect_type,
                               trade_policy_no,
                               slab_target_val,
                               slab_upper_amt,
                               no_of_inv,
                               gift,
                               discount_amt,
                               discount_percentage,
                               entry_date,
                               program_type_code,
                               program_type,
                               effect_from_date,
                               effect_to_date,
                               sales_value,
                               return_value,
                               ims_value,
                               jan_ims_value,                               
                               feb_ims_value,                               
                               mar_ims_value,                               
                               apr_ims_value,                               
                               may_ims_value,                               
                               jun_ims_value,                               
                               jul_ims_value,                               
                               aug_ims_value,                               
                               sep_ims_value,                               
                               oct_ims_value,                               
                               nov_ims_value,                               
                               dec_ims_value
                         from 
                            ( 
                            select b.zone_code division_code,
                                   b.zone_name division_name,
                                   b.area_code region_code,
                                   b.area_name region_name,
                                   b.belt_code area_code,
                                   b.belt_name area_name,
                                   b.territory_code,
                                   b.territory_name,
                                   c.customer_code,
                                   c.customer_name,
                                   c.db_location,
                                   b.market_code,
                                   b.market_name,
                                   b.route_code,
                                   b.route_name,
                                   t.retailer_code,
                                   b.retailer_name,
                                   t.trade_program_no,
                                   s.title program_name,
                                   m.effect_type,
                                   t.trade_policy_no,
                                   nvl(s.slab_target_val,0) slab_target_val,
                                   nvl(s.slab_upper_amt,0) slab_upper_amt,
                                   nvl( s.no_inv_month,0) no_of_inv,
                                   s.gift,
                                   nvl (s.discount_amt, 0) discount_amt,
                                   nvl (s.discount_percentage, 0) discount_percentage,
                                   to_char (t.entry_date, 'MM/DD/YYYY') entry_date,
                                   program_type program_type_code,
                                   'Trade Program' program_type,
                                   to_char(s.effect_from_date,'dd/mm/rrrr') effect_from_date,
                                   to_char(s.effect_to_date,'dd/mm/rrrr')effect_to_date,
                                   
                                   fn_ret_trade_inv_value (t.retailer_code,t.trade_program_no,s.effect_from_date, s.effect_to_date,t.program_type) sales_value,
                                   fn_ret_trade_return_value (t.retailer_code,t.trade_program_no,s.effect_from_date,s.effect_to_date,t.program_type) return_value,
                                   fn_ret_achievement_value (t.retailer_code,t.trade_program_no,s.effect_from_date,s.effect_to_date,t.program_type) ims_value,
                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-12),'DD/MM/RRRR'),'RRRRMM')) jan_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-11),'DD/MM/RRRR'),'RRRRMM')) feb_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-10),'DD/MM/RRRR'),'RRRRMM')) mar_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-9),'DD/MM/RRRR'),'RRRRMM')) apr_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-8),'DD/MM/RRRR'),'RRRRMM')) may_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-7),'DD/MM/RRRR'),'RRRRMM')) jun_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-6),'DD/MM/RRRR'),'RRRRMM')) jul_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-5),'DD/MM/RRRR'),'RRRRMM')) aug_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-4),'DD/MM/RRRR'),'RRRRMM')) sep_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-3),'DD/MM/RRRR'),'RRRRMM')) oct_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-2),'DD/MM/RRRR'),'RRRRMM')) nov_ims_value,                                   
                                   fn_ret_trade_ims_ly (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-1),'DD/MM/RRRR'),'RRRRMM')) dec_ims_value
                                   
                             from  mv_trade_program_retailer t,spa_sfbl.vw_trade_gift_details@dl_spasfbl.squaregroup.com s,mv_trade_prog_prod_mst m , mv_division_retailer_relation b, mv_division_customer_relation c      
                             where t.trade_program_no = s.program_no(+)
                             and   t.trade_program_no = m.trade_prog_prod_mst_slno(+)
                             and   t.trade_policy_no = s.slab_no(+)
                             and   t.program_type = s.category(+)     
                             and   t.retailer_code = b.retailer_code
                             and   b.market_code=c.market_code
                             and   t.trade_program_no=v_program_no
                             and   m.effect_type=v_effect_type
                             )
        where  (division_code = v_divisionCode or v_divisionCode='ALL')
        and    (region_code = v_regionCode or v_regionCode='ALL')
        and    (area_code = v_areaCode or v_areaCode='ALL')
        and    (territory_code = v_territoryCode or v_territoryCode='ALL')  
        and    (customer_code = v_customerCode or v_customerCode='ALL') ;                 

   
    return trade_ims;
    
exception
   when no_data_found
   then
   open trade_ims for
         select *
           from dual
          where 1 = 2;
      return trade_ims;
end;
/

CREATE OR REPLACE FUNCTION             FN_RET_TRADE_IMS_CY(P_RET_CODE         VARCHAR2,
                                                          vTRADE_PROGRAM_NO   VARCHAR2,
                                                          vYYYYMM             VARCHAR2
                                                          )
RETURN NUMBER
AS
V_IMS_VALUE           NUMBER:=0;

BEGIN
    
           
    BEGIN
        SELECT SUM(NVL(IMS_VALUE,0))
        INTO   V_IMS_VALUE
        FROM   MV_MONTH_WISE_TRADE_RET_IMS_CY
        WHERE  YYYYMM =vYYYYMM 
        AND    TRADE_PROGRAM_NO=vTRADE_PROGRAM_NO
        AND    RETAILER_CODE=P_RET_CODE;            
    EXCEPTION
        WHEN NO_DATA_FOUND  THEN
        V_IMS_VALUE :=0;
    END;

    RETURN NVL(V_IMS_VALUE,0);
    
    
EXCEPTION
    WHEN NO_DATA_FOUND  THEN 
    RETURN 0;

END ;
/

CREATE OR REPLACE function             FN_TRADE_PROG_RET_SALES_TND_CY( p_division_code varchar2, 
                                                                       p_region_code varchar2,
                                                                       p_area_code varchar2,
                                                                       p_territory_code varchar2,
                                                                       p_customer_code varchar2,
                                                                       p_program_no varchar2,
                                                                       p_effect_type varchar2
                                                                       )
   return sys_refcursor
as
   trade_ims       sys_refcursor;  
   
   


   
   v_divisionCode varchar2(100)   :=p_division_code;
   v_regionCode varchar2(100)     :=p_region_code;
   v_areaCode varchar2(100)       :=p_area_code;
   v_territoryCode varchar2(100)  :=p_territory_code;
   v_customerCode varchar2(100)   :=p_customer_code;
   
   
   v_program_no varchar2(100)  :=p_program_no;
   v_effect_type varchar2(100)   :=p_effect_type;   
   
   
      

begin
   open trade_ims for                                                                            
                                                                           
                        select division_code,
                               division_name,
                               region_code,
                               region_name,
                               area_code,
                               area_name,
                               territory_code,
                               territory_name,
                               customer_code,
                               customer_name,
                               db_location,
                               market_code,
                               market_name,
                               route_code,
                               route_name,
                               retailer_code,
                               retailer_name,
                               trade_program_no,
                               program_name,
                               effect_type,
                               trade_policy_no,
                               slab_target_val,
                               slab_upper_amt,
                               no_of_inv,
                               gift,
                               discount_amt,
                               discount_percentage,
                               entry_date,
                               program_type_code,
                               program_type,
                               effect_from_date,
                               effect_to_date,
                               sales_value,
                               return_value,
                               ims_value,
                               jan_ims_value,                               
                               feb_ims_value,                               
                               mar_ims_value,                               
                               apr_ims_value,                               
                               may_ims_value,                               
                               jun_ims_value,                               
                               jul_ims_value,                               
                               aug_ims_value,                               
                               sep_ims_value,                               
                               oct_ims_value,                               
                               nov_ims_value,                               
                               dec_ims_value
                         from 
                            ( 
                            select b.zone_code division_code,
                                   b.zone_name division_name,
                                   b.area_code region_code,
                                   b.area_name region_name,
                                   b.belt_code area_code,
                                   b.belt_name area_name,
                                   b.territory_code,
                                   b.territory_name,
                                   c.customer_code,
                                   c.customer_name,
                                   c.db_location,
                                   b.market_code,
                                   b.market_name,
                                   b.route_code,
                                   b.route_name,
                                   t.retailer_code,
                                   b.retailer_name,
                                   t.trade_program_no,
                                   s.title program_name,
                                   m.effect_type,
                                   t.trade_policy_no,
                                   nvl(s.slab_target_val,0) slab_target_val,
                                   nvl(s.slab_upper_amt,0) slab_upper_amt,
                                   nvl( s.no_inv_month,0) no_of_inv,
                                   s.gift,
                                   nvl (s.discount_amt, 0) discount_amt,
                                   nvl (s.discount_percentage, 0) discount_percentage,
                                   to_char (t.entry_date, 'MM/DD/YYYY') entry_date,
                                   program_type program_type_code,
                                   'Trade Program' program_type,
                                   to_char(s.effect_from_date,'dd/mm/rrrr') effect_from_date,
                                   to_char(s.effect_to_date,'dd/mm/rrrr')effect_to_date,
                                   
                                   fn_ret_trade_inv_value (t.retailer_code,t.trade_program_no,s.effect_from_date, s.effect_to_date,t.program_type) sales_value,
                                   fn_ret_trade_return_value (t.retailer_code,t.trade_program_no,s.effect_from_date,s.effect_to_date,t.program_type) return_value,
                                   fn_ret_achievement_value (t.retailer_code,t.trade_program_no,s.effect_from_date,s.effect_to_date,t.program_type) ims_value,
                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+0),'DD/MM/RRRR'),'RRRRMM')) jan_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+1),'DD/MM/RRRR'),'RRRRMM')) feb_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+2),'DD/MM/RRRR'),'RRRRMM')) mar_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+3),'DD/MM/RRRR'),'RRRRMM')) apr_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+4),'DD/MM/RRRR'),'RRRRMM')) may_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+5),'DD/MM/RRRR'),'RRRRMM')) jun_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+6),'DD/MM/RRRR'),'RRRRMM')) jul_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+7),'DD/MM/RRRR'),'RRRRMM')) aug_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+8),'DD/MM/RRRR'),'RRRRMM')) sep_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+9),'DD/MM/RRRR'),'RRRRMM')) oct_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+10),'DD/MM/RRRR'),'RRRRMM')) nov_ims_value,                                   
                                   fn_ret_trade_ims_cy (t.retailer_code,t.trade_program_no,to_char(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+11),'DD/MM/RRRR'),'RRRRMM')) dec_ims_value                                   
                             
                             from  mv_trade_program_retailer t,spa_sfbl.vw_trade_gift_details@dl_spasfbl.squaregroup.com s,mv_trade_prog_prod_mst m , mv_division_retailer_relation b, mv_division_customer_relation c           
                             where t.trade_program_no = s.program_no(+)
                             and   t.trade_program_no = m.trade_prog_prod_mst_slno(+)
                             and   t.trade_policy_no = s.slab_no(+)
                             and   t.program_type = s.category(+)     
                             and   t.retailer_code = b.retailer_code
                             and   b.market_code=c.market_code
                             and   t.trade_program_no=v_program_no
                             and   m.effect_type=v_effect_type
                             )
        where  (division_code = v_divisionCode or v_divisionCode='ALL')
        and    (region_code = v_regionCode or v_regionCode='ALL')
        and    (area_code = v_areaCode or v_areaCode='ALL')
        and    (territory_code = v_territoryCode or v_territoryCode='ALL')  
        and    (customer_code = v_customerCode or v_customerCode='ALL');                  

                        
      


   
    return trade_ims;
    
exception
   when no_data_found
   then
   open trade_ims for
         select *
           from dual
          where 1 = 2;
      return trade_ims;
end;
/

CREATE OR REPLACE function             FN_INVOICE_WISE_TRADE_PROG_CAL( pfrom_date varchar2,
                                                                       pto_date   varchar2,
                                                                       pdivision_code varchar2, 
                                                                       pregion_code varchar2,
                                                                       parea_code varchar2,
                                                                       pterritory_code varchar2,
                                                                       pcustomer_code varchar2,
                                                                       ppolicy_no number
                                                                       
                                                                       )
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   
   fDate     date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate     date             := to_date(pto_date,'DD/MM/RRRR');
   dCode     varchar2(100)    :=pdivision_code;
   rCode     varchar2(100)    :=pregion_code;
   aCode     varchar2(100)    :=parea_code;
   tCode     varchar2(100)    :=pterritory_code;
   cCode     varchar2(100)    :=pcustomer_code;
   vPolicyNo number           :=ppolicy_no;

begin
   open Ims for                                                                            
        select /*+ append */  
                c.zone_code division_code,
                c.zone_name division_name,
                c.area_code region_code,
                c.area_name region_name,
                c.belt_code area_code,
                c.belt_name area_name,
                c.territory_code,
                c.territory_name,
                b.market_code,
                c.market_name,        
                b.customer_code,
                c.customer_name,
                c.db_location ,      
                b.retailer_code, 
                fn_retailer_name(b.retailer_code)retailer_name, 
                b.invoice_no,
                to_char(b.invoice_date,'MM/DD/RRRR') invoice_date,
                a.program_no,
                a.program_name,
                a.slab_no,
                a.slab_amount,
                a.disc_pct,
                a.item_qty,
                nvl(b.net_val,0) sale_value,
                nvl(c.return_value,0) return_value,
                (nvl(b.net_val,0) - nvl(c.return_value,0)) net_ims ,
                nvl(d.return_slab_amount,0) return_slab_amount,
                a.discount_val,
                (nvl(a.discount_val,0)-nvl(d.return_slab_amount,0)) actual_discount
        from
            
            (
              select distinct
                     a.inv_mst_slno,
                     a.trade_policy_no program_no,
                     b.trade_name program_name,
                     a.slab_no,
                     a.slab_amount, 
                     d.trade_disc_pct disc_pct,
                     a.discount_val,
                     e.item_qty, 
                     trade_status
              from  mv_tt_trade_prog_discount_v1 a, mv_trade_prog_prod_mst b, mv_trade_prog_amount_slab c, mv_trade_prog_prod_dtl d,mv_tt_trade_gift_item_qty_v1 e
              where  a.trade_policy_no=b.trade_prog_prod_mst_slno
              and    a.trade_policy_no=c.trade_prog_prod_mst_slno
              and    c.trade_prog_prod_slab_slno=d.trade_prog_prod_slab_slno
              and    a.inv_mst_slno=e.inv_mst_slno(+)
              and    a.trade_policy_no=vPolicyNo
              and    a.trade_status = 'A'
            ) a,
            
            
            (
              select  
                      a.customer_code,
                      a.market_code,
                      a.retailer_code,  
                      a.inv_mst_slno,
                      a.invoice_no, 
                      trunc(a.invoice_date) invoice_date,               
                      a.slab_adjustment,
                      sum(nvl(b.net_val,0))net_val                           
              from    mv_invoice_mst a, mv_invoice_dtl b
              where   a.inv_mst_slno = b.inv_mst_slno
              and     trunc(a.invoice_date) between fDate  and  tDate
              
              and     b.product_code in (
                                         select distinct b.product_code
                                         from   mv_trade_prog_prod_mst a,mv_trade_prog_product b
                                         where  a.trade_prog_prod_mst_slno = b.trade_prog_prod_mst_slno
                                         and    a.trade_prog_prod_mst_slno = vPolicyNo)
              and  a.retailer_code in (
                                       select distinct retailer_code
                                       from   mv_tt_trade_prog_discount_v1 
                                       where  trade_policy_no=vPolicyNo
                                       and    trade_status = 'A')       
              group by a.customer_code,a.market_code,a.retailer_code,a.inv_mst_slno,a.invoice_no,trunc(a.invoice_date),a.slab_adjustment
            
            ) b,

            (

                  select m.invoice_no,
                         sum(d.return_value)return_value
                  from   mv_ret_return_mst m,mv_ret_return_dtl d,  mv_invoice_mst inv
                  where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                  and    m.invoice_no = inv.invoice_no
                  and    trunc(inv.invoice_date) between fDate  and  tDate
                  and    inv.inv_type_code='INV001'   
                  and    d.product_code in (
                                            select b.product_code
                                            from mv_trade_prog_prod_mst a,mv_trade_prog_product b
                                            where a.trade_prog_prod_mst_slno = b.trade_prog_prod_mst_slno
                                            and   a.trade_prog_prod_mst_slno = vPolicyNo) 
                  and     m.retailer_code in
                                           (
                                             select distinct retailer_code
                                             from mv_tt_trade_prog_discount_v1 
                                             where trade_policy_no=vPolicyNo
                                             and trade_status = 'A')
                                             
                  group by  m.invoice_no     

            )c,
            
            (
                select invoice_no,discount_amt return_slab_amount
                from mv_return_disc_tracking
                where program_type='Trade Offer'
                and   program_no=vPolicyNo
            )d,mv_division_customer_relation c

        where a.inv_mst_slno = b.inv_mst_slno
        and   b.invoice_no = c.invoice_no(+)
        and   b.invoice_no = d.invoice_no(+)

        and   b.market_code=c.market_code(+)


        and  (c.zone_code = dCode or dCode='ALL')
        and  (c.area_code = rCode or rCode='ALL')
        and  (c.belt_code = aCode or aCode='ALL')
        and  (c.territory_code = tCode or tCode='ALL')  
        and  (b.customer_code = cCode or cCode='ALL');   
        --order by division_name, region_name, area_name, territory_name, customer_name,market_name,retailer_code,invoice_no;   
 


  


   
    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_CUST_WISE_TRADE_PROG_CAL(pfrom_date varchar2,
                                                       pto_date   varchar2,
                                                       pdivision_code varchar2, 
                                                       pregion_code varchar2,
                                                       parea_code varchar2,
                                                       pterritory_code varchar2,
                                                       pcustomer_code varchar2,
                                                       ppolicy_no number
                                                                               
                                                       )
   return sys_refcursor
as
   Ims       sys_refcursor;  
   
   
   fDate     date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate     date             := to_date(pto_date,'DD/MM/RRRR');
   dCode     varchar2(100)    :=pdivision_code;
   rCode     varchar2(100)    :=pregion_code;
   aCode     varchar2(100)    :=parea_code;
   tCode     varchar2(100)    :=pterritory_code;
   cCode     varchar2(100)    :=pcustomer_code;
   vPolicyNo number           :=ppolicy_no;

begin
   open Ims for                                                                            
                 select  /*+ append */   
                        b.zone_code division_code,
                        b.zone_name division_name,
                        b.area_code region_code,
                        b.area_name region_name,
                        b.belt_code area_code,
                        b.belt_name area_name,
                        b.territory_code,
                        b.territory_name,                                                  
                        a.customer_code, 
                        b.customer_name,
                        b.db_location ,                        
                        a.program_no,
                        a.program_name,                                                              
                        a.sales_value,                
                        a.return_value,                
                        a.net_ims,                
                        a.return_slab_amount,                                
                        a.discount_val ,                
                        a.actual_discount_val                
                 from
                    (
                         select                                                 
                                b.customer_code,                 
                                a.program_no,
                                a.program_name,                                                              
                                sum(nvl(b.sales_value,0)) sales_value,                
                                sum(nvl(c.return_value,0)) return_value,                
                                sum(nvl(b.sales_value,0))-sum(nvl(c.return_value,0)) net_ims,                
                                sum(nvl(d.return_slab_amount,0)) return_slab_amount,                                
                                sum(nvl(a.discount_val,0)) discount_val ,                
                                sum(nvl(a.discount_val,0))-sum(nvl(d.return_slab_amount,0)) actual_discount_val                
                         from
                            (                  
                              select a.inv_mst_slno,
                                     a.trade_policy_no program_no,
                                     b.trade_name program_name,
                                     a.discount_val
                              from  mv_tt_trade_prog_discount_v1 a, mv_trade_prog_prod_mst b, mv_trade_prog_amount_slab c, mv_trade_prog_prod_dtl d
                              where  a.trade_policy_no=b.trade_prog_prod_mst_slno
                              and    a.trade_policy_no=c.trade_prog_prod_mst_slno
                              and    c.trade_prog_prod_slab_slno=d.trade_prog_prod_slab_slno
                              and    a.trade_policy_no=vPolicyNo
                              and    a.trade_status = 'A'                                    
                            )a,
                            
                            (              
                              select  
                                      a.customer_code,
                                      a.inv_mst_slno,
                                      a.invoice_no,               
                                      sum( nvl(b.total_val,0) - nvl(bonus_price_discount,0)) sales_value                           
                              from    mv_invoice_mst a, mv_invoice_dtl b
                              where   a.inv_mst_slno = b.inv_mst_slno
                              and     trunc(a.invoice_date) between fdate  and  tdate              
                              and     b.product_code in (
                                                         select distinct b.product_code
                                                         from   mv_trade_prog_prod_mst a,mv_trade_prog_product b
                                                         where  a.trade_prog_prod_mst_slno = b.trade_prog_prod_mst_slno
                                                         and    a.trade_prog_prod_mst_slno = vpolicyno)
                              and  a.retailer_code in (
                                                       select distinct retailer_code
                                                       from   mv_tt_trade_prog_discount_v1 
                                                       where  trade_policy_no=vpolicyno
                                                       and    trade_status = 'A')       
                              group by a.customer_code,a.inv_mst_slno,a.invoice_no
                              ) b ,                            
                              (
                                  select m.invoice_no,
                                         sum(d.return_value)return_value
                                  from   mv_ret_return_mst m,mv_ret_return_dtl d,  mv_invoice_mst inv
                                  where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                                  and    m.invoice_no = inv.invoice_no
                                  and    trunc(inv.invoice_date) between fDate  and  tDate
                                  and    inv.inv_type_code='INV001'   
                                  and    d.product_code in (
                                                            select b.product_code
                                                            from mv_trade_prog_prod_mst a,mv_trade_prog_product b
                                                            where a.trade_prog_prod_mst_slno = b.trade_prog_prod_mst_slno
                                                            and   a.trade_prog_prod_mst_slno = vPolicyNo) 
                                  and     m.retailer_code in
                                                           (
                                                             select distinct retailer_code
                                                             from mv_tt_trade_prog_discount_v1 
                                                             where trade_policy_no=vPolicyNo
                                                             and trade_status = 'A')
                                                             
                                  group by  m.invoice_no
                             )c,                    
                             (
                                select invoice_no,
                                       nvl(discount_amt,0) return_slab_amount
                                from mv_return_disc_tracking
                                where program_type='Trade Offer'
                                and   program_no=vPolicyNo
                            )d                      
                           where a.inv_mst_slno=b.inv_mst_slno
                           and   b.invoice_no=c.invoice_no(+) 
                           and   c.invoice_no=d.invoice_no(+)                    
                           group by a.program_no,a.program_name,b.customer_code
                        
                        )a,
                        (select distinct zone_code, zone_name, area_code, area_name, belt_code, belt_name, territory_code, territory_name, customer_code, customer_name, db_location 
                        from mv_division_customer_relation
                        )b
                where a.customer_code=b.customer_code(+)
                and  (b.zone_code = dCode or dCode='ALL')
                and  (b.area_code = rCode or rCode='ALL')
                and  (b.belt_code = aCode or aCode='ALL')
                and  (b.territory_code = tCode or tCode='ALL')  
                and  (b.customer_code = cCode or cCode='ALL') 
                and  a.program_no  =vPolicyNo;
                --order by division_name, region_name, area_name, territory_name, customer_name;

    return Ims;
    
exception
   when no_data_found
   then
   open Ims for
         select *
           from dual
          where 1 = 2;
      return Ims;
end;
/

CREATE OR REPLACE function             FN_DIST_BONUS_ADJ_DATE_RANGE(pfrom_date varchar2,pto_date varchar2,pdivision_code varchar2, pregion_code varchar2,parea_code varchar2,pterritory_code varchar2,pcustomer_code varchar2)
   return sys_refcursor
as
   BNS       sys_refcursor;  
   
   
   fDate date             := to_date(pfrom_date,'DD/MM/RRRR'); 
   tDate date             := to_date(pto_date,'DD/MM/RRRR');
   dCode varchar2(100)    :=pdivision_code;
   rCode varchar2(100)    :=pregion_code;
   aCode varchar2(100)    :=parea_code;
   tCode varchar2(100)    :=pterritory_code;
   cCode varchar2(100)    :=pcustomer_code;

begin
   open BNS for                                                                            
                SELECT B.DIVISION_CODE,
                       B.DIVISION_NAME,
                       B.REGION_CODE,
                       B.REGION_NAME,
                       B.AREA_CODE,
                       B.AREA_NAME,
                       B.TERRITORY_CODE,
                       B.TERRITORY_NAME, 
                       A.CUSTOMER_CODE,
                       B.CUSTOMER_NAME,
                       B.DB_LOCATION ,
                       A.PRODUCT_CODE, 
                       C.PRODUCT_NAME,
                       C.PACK_SIZE,
                       
                       A.BONUS_QTY,             
                       A.RET_BONUS_QTY,
                       A.NET_BONUS_QTY,
                       
                       A.BONUS_VAL,              
                       A.RET_BONUS_VAL,                           
                       A.NET_BONUS_VAL, 
                       
                       A.BONUS_PRICE_DISCOUNT,
                       A.RET_BONUS_PRICE_DISCOUNT,      
                       A.NET_BONUS_PRICE_DISCOUNT                                                                              
                FROM
                (


                        SELECT CUSTOMER_CODE,
                               PRODUCT_CODE,
                               SUM(NVL(BONUS_PRICE_DISCOUNT,0))BONUS_PRICE_DISCOUNT, 
                               SUM(NVL(RET_BONUS_PRICE_DISCOUNT,0))RET_BONUS_PRICE_DISCOUNT, 
                               SUM(NVL(NET_BONUS_PRICE_DISCOUNT,0))NET_BONUS_PRICE_DISCOUNT,                                       
                               SUM(NVL(BONUS_QTY,0))BONUS_QTY,                                        
                               SUM(NVL(RET_BONUS_QTY,0))RET_BONUS_QTY,
                               SUM(NVL(NET_BONUS_QTY,0))NET_BONUS_QTY,                                                
                               SUM(NVL(BONUS_VAL,0))BONUS_VAL,
                               SUM(NVL(RET_BONUS_VAL,0))RET_BONUS_VAL,                                        
                               SUM(NVL(NET_BONUS_VAL,0))NET_BONUS_VAL                                                                              
                        FROM
                        (

                                SELECT A.CUSTOMER_CODE,
                                       A.PRODUCT_CODE,
                                       SUM(NVL(BONUS_PRICE_DISCOUNT,0))BONUS_PRICE_DISCOUNT, 
                                       SUM(NVL(RET_BONUS_PRICE_DISCOUNT,0)) RET_BONUS_PRICE_DISCOUNT, 
                                       SUM(NVL(BONUS_PRICE_DISCOUNT,0))-SUM(NVL(RET_BONUS_PRICE_DISCOUNT,0)) NET_BONUS_PRICE_DISCOUNT,                                       
                                       0 BONUS_QTY,                                        
                                       0 RET_BONUS_QTY,
                                       0 NET_BONUS_QTY,                                                
                                       0 BONUS_VAL,
                                       0 RET_BONUS_VAL,                                        
                                       0 NET_BONUS_VAL                                                                              
                                FROM
                                (
                                SELECT M.CUSTOMER_CODE,
                                       M.INVOICE_NO,
                                       D.PRODUCT_CODE, 
                                       NVL(D.BONUS_PRICE_DISCOUNT,0) BONUS_PRICE_DISCOUNT         
                                FROM MV_INVOICE_MST M, MV_INVOICE_DTL D
                                WHERE M.INV_MST_SLNO=D.INV_MST_SLNO
                                AND   M.INV_TYPE_CODE='INV001'
                                AND   D.BONUS_PRICE_DISCOUNT>0
                                AND  (M.CUSTOMER_CODE = cCode OR cCode='ALL')                                
                                AND   TRUNC(M.INVOICE_DATE) BETWEEN  fDate AND tDate  
                                )A,
                                (
                                SELECT   M.INVOICE_NO,
                                         D.PRODUCT_CODE,
                                         NVL(D.BONUS_PRICE_DISCOUNT,0) RET_BONUS_PRICE_DISCOUNT
                                FROM     MV_RET_RETURN_MST M,MV_RET_RETURN_DTL D
                                WHERE    M.RET_RECV_MST_SLNO =D.RET_RECV_MST_SLNO
                                )B
                                WHERE A.INVOICE_NO=B.INVOICE_NO(+)
                                AND   A.PRODUCT_CODE=B.PRODUCT_CODE(+)
                                GROUP BY  A.CUSTOMER_CODE,A.PRODUCT_CODE
                                                                
                                                                
                                UNION ALL     
                                                           
                                                                
                                SELECT  CUSTOMER_CODE,
                                    PRODUCT_CODE,
                                                                
                                    0 BONUS_PRICE_DISCOUNT, 
                                    0 RET_BONUS_PRICE_DISCOUNT, 
                                    0 NET_BONUS_PRICE_DISCOUNT,                                 

                                    SUM(NVL(BONUS_QTY,0)) BONUS_QTY,                                        
                                    SUM(NVL(RET_BONUS_QTY,0)) RET_BONUS_QTY,
                                    SUM(NVL(NET_BONUS_QTY,0)) NET_BONUS_QTY,
                                                                        
                                    SUM(NVL(BONUS_VAL,0)) BONUS_VAL,
                                    SUM(NVL(RET_BONUS_VAL,0)) RET_BONUS_VAL,                                        
                                    SUM(NVL(NET_BONUS_VAL,0))NET_BONUS_VAL
                                                                        
                                FROM
                                (                            
                                                                                                                                
                                    SELECT  A.CUSTOMER_CODE,
                                            A.INVOICE_NO,
                                            A.PRODUCT_CODE, 
                                            NVL(A.UNIT_TP,0) UNIT_TP,
                                            NVL(A.BONUS_QTY,0) BONUS_QTY,
                                                                        
                                            NVL(B.RET_BNS_QTY,0) RET_BONUS_QTY,
                                            NVL(A.BONUS_QTY,0)- NVL(B.RET_BNS_QTY,0) NET_BONUS_QTY,
                                                                        
                                            NVL(A.BONUS_QTY,0)* NVL(A.UNIT_TP,0) BONUS_VAL,
                                            NVL(B.RET_BNS_QTY,0)* NVL(A.UNIT_TP,0) RET_BONUS_VAL,
                                                                        
                                            (NVL(A.BONUS_QTY,0)- NVL(B.RET_BNS_QTY,0))* NVL(A.UNIT_TP,0) NET_BONUS_VAL
                                                                        
                                    FROM
                                        (
                                        SELECT A.CUSTOMER_CODE,
                                               A.INVOICE_NO,
                                               C.PRODUCT_CODE,
                                               C.BONUS_QTY ,
                                               DECODE(
                                                     (SELECT PRODUCT_PRICE FROM MV_INVOICE_DTL WHERE  PRODUCT_CODE = C.PRODUCT_CODE AND INV_DTL_SLNO = C.INV_DTL_SLNO)
                                                     ,'', (SELECT UNIT_TP FROM MV_PRODUCT_PRICE WHERE PRODUCT_CODE= C.PRODUCT_CODE)
                                                     ,(SELECT PRODUCT_PRICE FROM MV_INVOICE_DTL WHERE  PRODUCT_CODE = C.PRODUCT_CODE AND INV_DTL_SLNO = C.INV_DTL_SLNO)
                                                     )
                                                UNIT_TP
                                        FROM   MV_INVOICE_MST A, MV_INVOICE_DTL B, MV_INVOICE_BONUS C
                                        WHERE  A.INV_MST_SLNO = B.INV_MST_SLNO
                                        AND    B.INV_DTL_SLNO = C.INV_DTL_SLNO(+)
                                        AND    NVL(C.BONUS_QTY,0)>0
                                        AND   (A.CUSTOMER_CODE = cCode OR cCode='ALL')                                
                                        AND   TRUNC(A.INVOICE_DATE) BETWEEN  fDate AND tDate                                        
                                        AND    A.INV_TYPE_CODE = 'INV001' 
                                        )A,
                                                                    
                                        (
                                            SELECT   A.INVOICE_NO,
                                                     C.PRODUCT_CODE,
                                                     C.BONUS_QTY RET_BNS_QTY
                                            FROM    MV_RET_RETURN_MST A,MV_RET_RETURN_DTL B,MV_RET_RETURN_BONUS C
                                            WHERE   A.RET_RECV_MST_SLNO =B.RET_RECV_MST_SLNO
                                            AND     B.RET_RECV_DTL_SLNO =C.RET_RECV_DTL_SLNO
                                            AND     NVL(C.BONUS_QTY,0)>0
                                      )B
                                    WHERE A.INVOICE_NO=B.INVOICE_NO(+)
                                    AND   A.PRODUCT_CODE=B.PRODUCT_CODE(+)
                                    )
                                    GROUP BY CUSTOMER_CODE,PRODUCT_CODE
                         )
                        GROUP BY CUSTOMER_CODE,PRODUCT_CODE
                  )A,      
                  ( 
                    SELECT DISTINCT  
                             ZONE_CODE DIVISION_CODE,
                             ZONE_NAME DIVISION_NAME,
                             AREA_CODE  REGION_CODE,
                             AREA_NAME  REGION_NAME,
                             BELT_CODE  AREA_CODE,
                             BELT_NAME  AREA_NAME,
                             TERRITORY_CODE,
                             TERRITORY_NAME, 
                             CUSTOMER_CODE,
                             CUSTOMER_NAME,
                             DB_LOCATION 
                    FROM MV_DIVISION_CUSTOMER_RELATION 
                  )B, MV_PRODUCT_INFO C
                    
                WHERE A.CUSTOMER_CODE=B.CUSTOMER_CODE(+) 
                AND   A.PRODUCT_CODE=C.PRODUCT_CODE(+)                            
               AND   (B.DIVISION_CODE = dCode OR dCode='ALL')
               AND   (B.REGION_CODE = rCode OR rCode='ALL')
               AND   (B.AREA_CODE = aCode OR aCode='ALL')
               AND   (B.TERRITORY_CODE = tCode OR tCode='ALL')
                
                
                ;

   
    return BNS;
    
exception
   when no_data_found
   then
   open BNS for
         select *
           from dual
          where 1 = 2;
      return BNS;
end;
/

CREATE OR REPLACE FUNCTION             FN_LOCATION_NAME (
   pLOC_ID      NUMBER,
   pLOC_TYPE    VARCHAR2)
   RETURN CHAR
IS
   vLOC_ID     NUMBER := pLOC_ID;
   vLOV_TYPE   VARCHAR2 (150) := pLOC_TYPE;
   vLOC_NAME   VARCHAR2 (200);
BEGIN
   IF vLOV_TYPE = 'National'
   THEN
        SELECT REGEXP_REPLACE (DEPOT_NAME, '[[:space:]]', ' ')
        INTO vLOC_NAME
        FROM DEPOT_INFO
       WHERE DEPOT_ID = REGEXP_REPLACE (pLOC_ID, '[[:space:]]', ' ');
   ELSIF vLOV_TYPE = 'Depot' THEN
      SELECT REGEXP_REPLACE (DEPOT_NAME, '[[:space:]]', ' ')
        INTO vLOC_NAME
        FROM DEPOT_INFO
       WHERE DEPOT_ID = REGEXP_REPLACE (pLOC_ID, '[[:space:]]', ' ');
   END IF;



   RETURN vLOC_NAME;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
END;
/

CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_BONUS_CY
(INV_BNS_SLNO, INV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 BONUS_QTY, CUSTOMER_CODE, INVOICE_DATE)
AS 
SELECT "INV_BNS_SLNO",
          "INV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "BONUS_QTY",
          "CUSTOMER_CODE",
          "INVOICE_DATE"
     FROM VW_INVOICE_BONUS
    WHERE INV_DTL_SLNO IN (SELECT B.INV_DTL_SLNO
                             FROM VW_INVOICE_MST A, VW_INVOICE_DTL B
                            WHERE     A.INV_MST_SLNO = B.INV_MST_SLNO
                                  AND TO_CHAR (A.INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE - 1, 'RRRR') );


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_BONUS_LY
(INV_BNS_SLNO, INV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 BONUS_QTY, CUSTOMER_CODE, INVOICE_DATE)
AS 
SELECT "INV_BNS_SLNO",
          "INV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "BONUS_QTY",
          "CUSTOMER_CODE",
          "INVOICE_DATE"
     FROM VW_INVOICE_BONUS
    WHERE INV_DTL_SLNO IN (SELECT B.INV_DTL_SLNO
                             FROM VW_INVOICE_MST A, VW_INVOICE_DTL B
                            WHERE     A.INV_MST_SLNO = B.INV_MST_SLNO
                                  AND TO_CHAR (A.INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1,'RRRR') );


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_DTL_CY
(INV_DTL_SLNO, INV_MST_SLNO, PRODUCT_CODE, PRODUCT_PRICE, ISSUED_QTY, 
 RTL_DISCOUNT, RTL_DISCOUNT_VAL, PROD_DISCOUNT, PROD_DISCOUNT_VAL, BONUS_PRICE_DISCOUNT, 
 TOTAL_VAL, SLAB_ADJ_VAL, SLAB_ADJ_STATUS, SLAB_ADJ_DATE, NET_VAL)
AS 
SELECT "INV_DTL_SLNO",
          "INV_MST_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_PRICE",
          "ISSUED_QTY",
          "RTL_DISCOUNT",
          "RTL_DISCOUNT_VAL",
          "PROD_DISCOUNT",
          "PROD_DISCOUNT_VAL",
          "BONUS_PRICE_DISCOUNT",
          "TOTAL_VAL",
          "SLAB_ADJ_VAL",
          "SLAB_ADJ_STATUS",
          "SLAB_ADJ_DATE",
          "NET_VAL"
     FROM VW_INVOICE_DTL
    WHERE INV_MST_SLNO IN (SELECT INV_MST_SLNO
                             FROM VW_INVOICE_MST
                            WHERE TO_CHAR (INVOICE_DATE, 'RRRR') = TO_CHAR(TRUNC(SYSDATE-1,'RR'),'RRRR') );


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_DTL_LY
(INV_DTL_SLNO, INV_MST_SLNO, PRODUCT_CODE, PRODUCT_PRICE, ISSUED_QTY, 
 RTL_DISCOUNT, RTL_DISCOUNT_VAL, PROD_DISCOUNT, PROD_DISCOUNT_VAL, BONUS_PRICE_DISCOUNT, 
 TOTAL_VAL, SLAB_ADJ_VAL, SLAB_ADJ_STATUS, SLAB_ADJ_DATE, NET_VAL)
AS 
SELECT "INV_DTL_SLNO",
          "INV_MST_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_PRICE",
          "ISSUED_QTY",
          "RTL_DISCOUNT",
          "RTL_DISCOUNT_VAL",
          "PROD_DISCOUNT",
          "PROD_DISCOUNT_VAL",
          "BONUS_PRICE_DISCOUNT",
          "TOTAL_VAL",
          "SLAB_ADJ_VAL",
          "SLAB_ADJ_STATUS",
          "SLAB_ADJ_DATE",
          "NET_VAL"
     FROM VW_INVOICE_DTL
    WHERE INV_MST_SLNO IN (SELECT INV_MST_SLNO
                             FROM VW_INVOICE_MST
                            WHERE TO_CHAR (INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE-1, 'RR') - 1, 'RRRR') );


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_ISSUE_CY
(INV_ISS_SLNO, INV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 ISSUED_QTY, CUSTOMER_CODE, INVOICE_DATE, ISSUED_PRICE)
AS 
SELECT "INV_ISS_SLNO",
          "INV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "ISSUED_QTY",
          "CUSTOMER_CODE",
          "INVOICE_DATE",
          "ISSUED_PRICE"
     FROM VW_INVOICE_ISSUE
    WHERE INV_DTL_SLNO IN (SELECT B.INV_DTL_SLNO
                             FROM VW_INVOICE_MST A, VW_INVOICE_DTL B
                            WHERE     A.INV_MST_SLNO = B.INV_MST_SLNO
                                  AND TO_CHAR (INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE - 1, 'RRRR') );


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_ISSUE_LY
(INV_ISS_SLNO, INV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 ISSUED_QTY, CUSTOMER_CODE, INVOICE_DATE, ISSUED_PRICE)
AS 
SELECT "INV_ISS_SLNO",
          "INV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "ISSUED_QTY",
          "CUSTOMER_CODE",
          "INVOICE_DATE",
          "ISSUED_PRICE"
     FROM VW_INVOICE_ISSUE
    WHERE INV_DTL_SLNO IN (SELECT B.INV_DTL_SLNO
                             FROM VW_INVOICE_MST A, VW_INVOICE_DTL B
                            WHERE     A.INV_MST_SLNO = B.INV_MST_SLNO
                                  AND TO_CHAR (INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1,'RRRR') );


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_MST_CY
(INV_MST_SLNO, INVOICE_NO, INVOICE_DATE, ORDER_NO, ORDER_DATE, 
 INV_TYPE_CODE, DELIVERY_DATE, DELIVERY_TIME, RETAILER_CODE, ROUTE_CODE, 
 MARKET_CODE, EMPLOYEE_CODE, CUSTOMER_CODE, GRAND_TOTAL, TOTAL_TDS, 
 SLAB_ADJUSTMENT, TOTAL_ADJUSTMENT, NET_INV_AMOUNT, INV_STATUS, REMARKS, 
 ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, UPDATED_BY, UPDATED_DATE, 
 UPDATED_TERMINAL, TRADE_POLICY_NO, SPECIAL_BONUS_DISC, RETAILER_TYPE, ZONE_CODE, 
 AREA_CODE, BELT_CODE, TERRITORY_CODE, INVOICE_VERSION)
AS 
SELECT "INV_MST_SLNO",
          "INVOICE_NO",
          "INVOICE_DATE",
          "ORDER_NO",
          "ORDER_DATE",
          "INV_TYPE_CODE",
          "DELIVERY_DATE",
          "DELIVERY_TIME",
          "RETAILER_CODE",
          "ROUTE_CODE",
          "MARKET_CODE",
          "EMPLOYEE_CODE",
          "CUSTOMER_CODE",
          "GRAND_TOTAL",
          "TOTAL_TDS",
          "SLAB_ADJUSTMENT",
          "TOTAL_ADJUSTMENT",
          "NET_INV_AMOUNT",
          "INV_STATUS",
          "REMARKS",
          "ENTERED_BY",
          "ENTERED_DATE",
          "ENTERED_TERMINAL",
          "UPDATED_BY",
          "UPDATED_DATE",
          "UPDATED_TERMINAL",
          "TRADE_POLICY_NO",
          "SPECIAL_BONUS_DISC",
          "RETAILER_TYPE",
          "ZONE_CODE",
          "AREA_CODE",
          "BELT_CODE",
          "TERRITORY_CODE",
          "INVOICE_VERSION"
     FROM VW_INVOICE_MST
    WHERE TO_CHAR (INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE-1, 'RRRR');


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_MST_LY
(INV_MST_SLNO, INVOICE_NO, INVOICE_DATE, ORDER_NO, ORDER_DATE, 
 INV_TYPE_CODE, DELIVERY_DATE, DELIVERY_TIME, RETAILER_CODE, ROUTE_CODE, 
 MARKET_CODE, EMPLOYEE_CODE, CUSTOMER_CODE, GRAND_TOTAL, TOTAL_TDS, 
 SLAB_ADJUSTMENT, TOTAL_ADJUSTMENT, NET_INV_AMOUNT, INV_STATUS, REMARKS, 
 ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, UPDATED_BY, UPDATED_DATE, 
 UPDATED_TERMINAL, TRADE_POLICY_NO, SPECIAL_BONUS_DISC, RETAILER_TYPE, ZONE_CODE, 
 AREA_CODE, BELT_CODE, TERRITORY_CODE, INVOICE_VERSION)
AS 
SELECT "INV_MST_SLNO",
          "INVOICE_NO",
          "INVOICE_DATE",
          "ORDER_NO",
          "ORDER_DATE",
          "INV_TYPE_CODE",
          "DELIVERY_DATE",
          "DELIVERY_TIME",
          "RETAILER_CODE",
          "ROUTE_CODE",
          "MARKET_CODE",
          "EMPLOYEE_CODE",
          "CUSTOMER_CODE",
          "GRAND_TOTAL",
          "TOTAL_TDS",
          "SLAB_ADJUSTMENT",
          "TOTAL_ADJUSTMENT",
          "NET_INV_AMOUNT",
          "INV_STATUS",
          "REMARKS",
          "ENTERED_BY",
          "ENTERED_DATE",
          "ENTERED_TERMINAL",
          "UPDATED_BY",
          "UPDATED_DATE",
          "UPDATED_TERMINAL",
          "TRADE_POLICY_NO",
          "SPECIAL_BONUS_DISC",
          "RETAILER_TYPE",
          "ZONE_CODE",
          "AREA_CODE",
          "BELT_CODE",
          "TERRITORY_CODE",
          "INVOICE_VERSION"
     FROM VW_INVOICE_MST
    WHERE TO_CHAR (INVOICE_DATE, 'RRRR') =
             TO_CHAR (TRUNC (SYSDATE-1, 'RR') - 1, 'RRRR');


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_PROD_IMS_LMONTH
(DIVISION_CODE, DIVISION_NAME, REGION_CODE, REGION_NAME, AREA_CODE, 
 AREA_NAME, TERRITORY_CODE, TERRITORY_NAME, MARKET_CODE, MARKET_NAME, 
 CUSTOMER_CODE, CUSTOMER_NAME, DB_LOCATION, ROUTE_CODE, ROUTE_NAME, 
 RETAILER_CODE, RETAILER_NAME, BASE_PRODUCT_CODE, BASE_PRODUCT_NAME, BRAND_CODE, 
 BRAND_NAME, PRODUCT_CATEGORY_CODE, PRODUCT_CATEGORY_NAME, INVOICE_NO, INVOICE_DATE, 
 PRODUCT_CODE, PRODUCT_NAME, PACK_SIZE, PRODUCT_PRICE, INVOICE_AMT, 
 SALES_QTY, SALES_BONUS_QTY, BONUS_PRICE_DISCOUNT, REPLACE_QTY, RETURN_SALES_QTY, 
 RETURN_BNS_QTY, IMS_SALES_QTY, IMS_BNS_QTY, RETURN_VALUE, BNS_DISC_RET, 
 DISCOUNT_VAL, NET_IMS, NUMBER_OF_INVOICE, TARGET_QTY)
AS 
SELECT b.zone_code division_code,
          b.zone_name division_name,
          b.area_code region_code,
          b.area_name region_name,
          b.belt_code area_code,
          b.belt_name area_name,
          b.territory_code,
          b.territory_name,
          a.market_code,
          b.market_name,
          a.customer_code,
          b.customer_name,
          b.db_location,
          a.route_code,
          c.route_name,
          a.retailer_code,
          d.retailer_name,
          p.base_product_code,
          f.base_product_name,
          p.brand_code,
          g.brand_name,
          p.product_category product_category_code,
          h.category_name product_category_name,
          a.invoice_no,
          TO_DATE (inv.invoice_date, 'dd/mm/rrrr') invoice_date,
          a.product_code,
          p.product_name,
          p.pack_size,
          i.unit_tp product_price,
          NVL (a.invoice_amt, 0) invoice_amt,
          NVL (a.issued_qty, 0) sales_qty,
          NVL (a.bonus_qty, 0) sales_bonus_qty,
          NVL (a.bonus_price_discount, 0) bonus_price_discount,
          NVL (a.replace_qty, 0) replace_qty,
          NVL (a.return_sales_qty, 0) return_sales_qty,
          NVL (a.return_bns_qty, 0) return_bns_qty,
          NVL (a.issued_qty, 0) - NVL (a.return_sales_qty, 0) ims_sales_qty,
          NVL (a.bonus_qty, 0) - NVL (a.return_bns_qty, 0) ims_bns_qty,
          NVL (a.return_value, 0) return_value,
          NVL (a.bns_disc_ret, 0) bns_disc_ret,
          NVL (a.bonus_price_discount, 0) - NVL (a.bns_disc_ret, 0)
             discount_val,
          NVL (a.invoice_amt, 0) - NVL (return_value, 0) net_ims,
          NVL (a.number_of_invoice, 0) number_of_invoice,
          NVL (e.target_qty, 0) target_qty
     FROM (  SELECT customer_code,
                    market_code,
                    route_code,
                    retailer_code,
                    invoice_no,
                    product_code,
                    SUM (NVL (issued_qty, 0)) issued_qty,
                    SUM (NVL (bonus_qty, 0)) bonus_qty,
                    SUM (NVL (bonus_price_discount, 0)) bonus_price_discount,
                    SUM (NVL (invoice_amt, 0)) invoice_amt,
                    SUM (NVL (replace_qty, 0)) replace_qty,
                    SUM (NVL (return_sales_qty, 0)) return_sales_qty,
                    SUM (NVL (return_value, 0)) return_value,
                    SUM (NVL (return_bns_qty, 0)) return_bns_qty,
                    SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                    SUM (NVL (number_of_invoice, 0)) number_of_invoice
               FROM (  SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              invoice_no,
                              product_code,
                              SUM (issued_qty) issued_qty,
                                SUM (bonus_qty)
                              + SUM (trade_qty)
                              + SUM (spec_bonus_qty)
                                 bonus_qty,
                              SUM (bonus_price_discount) bonus_price_discount,
                              SUM (total) invoice_amt,
                              SUM (replace_qty) replace_qty,
                              0 return_sales_qty,
                              0 return_value,
                              0 return_bns_qty,
                              0 bns_disc_ret,
                              0 number_of_invoice
                         FROM (SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      --to_date(m.invoice_date,'dd/mm/rrrr')invoice_date,
                                      d.product_code,
                                      NVL (d.issued_qty, 0) issued_qty,
                                      0 bonus_qty,
                                      NVL (d.bonus_price_discount, 0)
                                         bonus_price_discount,
                                        NVL (d.total_val, 0)
                                      - (  NVL (d.bonus_price_discount, 0)
                                         + NVL (rtl_discount_val, 0))
                                         total,
                                      0 trade_qty,
                                      0 spec_bonus_qty,
                                      0 replace_qty
                                 FROM mv_invoice_mst m, mv_invoice_dtl d
                                WHERE     m.inv_mst_slno = d.inv_mst_slno
                                      AND m.inv_type_code = 'INV001'
                                      AND TRUNC (m.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1)))
                               UNION ALL
                               SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      i.product_code,
                                      0 issued_qty,
                                      NVL (i.bonus_qty, 0) bonus_qty,
                                      0 bonus_price_discount,
                                      0 total,
                                      0 trade_qty,
                                      0 spec_bonus_qty,
                                      0 replace_qty
                                 FROM mv_invoice_mst m,
                                      mv_invoice_dtl d,
                                      mv_invoice_bonus i
                                WHERE     m.inv_mst_slno = d.inv_mst_slno
                                      AND d.inv_dtl_slno = i.inv_dtl_slno
                                      AND TRUNC (m.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1)))
                                      AND m.inv_type_code = 'INV001'
                               UNION ALL
                               SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      i.product_code,
                                      0 issued_qty,
                                      0 bonus_qty,
                                      0 bonus_price_discount,
                                      0 total,
                                      NVL (i.trade_qty, 0) trade_qty,
                                      0 spec_bonus_qty,
                                      0 replace_qty
                                 FROM mv_invoice_mst m,
                                      mv_invoice_dtl d,
                                      mv_invoice_trade i
                                WHERE     m.inv_mst_slno = d.inv_mst_slno
                                      AND d.inv_dtl_slno = i.inv_dtl_slno
                                      AND TRUNC (m.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1)))
                                      AND m.inv_type_code = 'INV001'
                               UNION ALL
                               SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      d.product_code,
                                      0 issued_qty,
                                      0 bonus_qty,
                                      0 bonus_price_discount,
                                      0 total,
                                      0 trade_qty,
                                      NVL (d.spec_bonus_qty, 0) spec_bonus_qty,
                                      0 replace_qty
                                 FROM mv_invoice_mst m, mv_invoice_spec_bonus d
                                WHERE     m.inv_mst_slno = d.inv_mst_slno
                                      AND TRUNC (m.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1)))
                                      AND m.inv_type_code = 'INV001'
                               UNION ALL
                               SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      d.product_code,
                                      0 issued_qty,
                                      0 bonus_qty,
                                      0 bonus_price_discount,
                                      0 total,
                                      0 trade_qty,
                                      0 spec_bonus_qty,
                                      NVL (issued_qty, 0) replace_qty
                                 FROM mv_invoice_mst m, mv_invoice_dtl d
                                WHERE     m.inv_mst_slno = d.inv_mst_slno
                                      AND TRUNC (m.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1)))
                                      AND m.inv_type_code = 'INV002')
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              invoice_no,
                              product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              invoice_no,
                              product_code,
                              0 issued_qty,
                              0 bonus_qty,
                              0 bonus_price_discount,
                              0 invoice_amt,
                              0 replace_qty,
                              SUM (NVL (return_qty, 0)) return_sales_qty,
                              SUM (NVL (return_value, 0)) return_value,
                                SUM (NVL (ret_bns_qty, 0))
                              + SUM (NVL (ret_trd_qty, 0))
                              + SUM (NVL (spec_bonus_qty, 0))
                                 return_bns_qty,
                              SUM (NVL (bns_disc_ret, 0)) bns_disc_ret,
                              0 number_of_invoice
                         FROM (SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      d.product_code,
                                      NVL (d.return_qty, 0) return_qty,
                                      NVL (d.return_value, 0) return_value,
                                      0 ret_bns_qty,
                                      0 ret_trd_qty,
                                      0 bns_disc_ret,
                                      0 spec_bonus_qty
                                 FROM mv_ret_return_mst m,
                                      mv_ret_return_dtl d,
                                      mv_invoice_mst i
                                WHERE     m.ret_recv_mst_slno =
                                             d.ret_recv_mst_slno
                                      AND m.invoice_no = i.invoice_no
                                      AND i.inv_type_code = 'INV001'
                                      AND TRUNC (i.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1)))
                               UNION ALL
                               SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      d.product_code,
                                      0 return_qty,
                                      0 return_value,
                                      0 ret_bns_qty,
                                      0 ret_trd_qty,
                                      NVL (bonus_price_discount, 0) bns_disc_ret,
                                      0 spec_bonus_qty
                                 FROM mv_ret_return_mst m,
                                      mv_ret_return_dtl d,
                                      mv_invoice_mst i
                                WHERE     m.ret_recv_mst_slno =
                                             d.ret_recv_mst_slno
                                      AND m.invoice_no = i.invoice_no
                                      AND i.inv_type_code = 'INV001'
                                      AND TRUNC (i.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1)))
                               UNION ALL
                               SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      b.product_code,
                                      0 return_qty,
                                      0 return_value,
                                      NVL (b.bonus_qty, 0) ret_bns_qty,
                                      0 ret_trd_qty,
                                      0 bns_disc_ret,
                                      0 spec_bonus_qty
                                 FROM mv_ret_return_mst m,
                                      mv_ret_return_dtl d,
                                      mv_ret_return_bonus b,
                                      mv_invoice_mst i
                                WHERE     m.ret_recv_mst_slno =
                                             d.ret_recv_mst_slno
                                      AND d.ret_recv_dtl_slno =
                                             b.ret_recv_dtl_slno
                                      AND m.invoice_no = i.invoice_no
                                      AND i.inv_type_code = 'INV001'
                                      AND TRUNC (i.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1)))
                               UNION ALL
                               SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      b.product_code,
                                      0 return_qty,
                                      0 return_value,
                                      0 ret_bns_qty,
                                      NVL (b.trade_qty, 0) ret_trd_qty,
                                      0 bns_disc_ret,
                                      0 spec_bonus_qty
                                 FROM mv_ret_return_mst m,
                                      mv_ret_return_dtl d,
                                      mv_ret_return_trade b,
                                      mv_invoice_mst i
                                WHERE     m.ret_recv_mst_slno =
                                             d.ret_recv_mst_slno
                                      AND d.ret_recv_dtl_slno =
                                             b.ret_recv_dtl_slno
                                      AND m.invoice_no = i.invoice_no
                                      AND i.inv_type_code = 'INV001'
                                      AND TRUNC (i.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1)))
                               UNION ALL
                               SELECT m.customer_code,
                                      m.market_code,
                                      m.route_code,
                                      m.retailer_code,
                                      m.invoice_no,
                                      d.product_code,
                                      0 return_qty,
                                      0 return_value,
                                      0 ret_bns_qty,
                                      0 ret_trd_qty,
                                      0 bns_disc_ret,
                                      NVL (d.spec_bonus_qty, 0) spec_bonus_qty
                                 FROM mv_ret_return_mst m,
                                      mv_ret_return_spec_bonus d,
                                      mv_invoice_mst i
                                WHERE     m.ret_recv_mst_slno =
                                             d.ret_recv_mst_slno
                                      AND m.invoice_no = i.invoice_no
                                      AND i.inv_type_code = 'INV001'
                                      AND TRUNC (i.invoice_date) BETWEEN TRUNC (
                                                                            ADD_MONTHS (
                                                                               SYSDATE,
                                                                               -1),
                                                                            'MM')
                                                                     AND TRUNC (
                                                                            LAST_DAY (
                                                                               ADD_MONTHS (
                                                                                  SYSDATE,
                                                                                  -1))))
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              invoice_no,
                              product_code)
           GROUP BY customer_code,
                    market_code,
                    route_code,
                    retailer_code,
                    invoice_no,
                    product_code) a,
          (SELECT market_code, product_code, target_qty
             FROM mv_target_l3years
            WHERE (year || month_code) =
                     TO_CHAR (TRUNC (ADD_MONTHS (SYSDATE, -1), 'MM'),
                              'YYYYMM')) e,
          mv_division_customer_relation b,
          mv_route_info c,
          mv_retailer_info d,
          mv_product_info p,
          mv_base_product_info f,
          mv_brand_info g,
          mv_category_info h,
          mv_product_price i,
          mv_invoice_mst inv
    WHERE     a.market_code = b.market_code(+)
          AND a.route_code = c.route_code
          AND a.retailer_code = d.retailer_code
          AND a.market_code = e.market_code(+)
          AND a.product_code = e.product_code(+)
          AND a.product_code = p.product_code(+)
          AND p.base_product_code = f.base_product_code
          AND p.brand_code = g.brand_code
          AND p.product_category = h.category_code
          AND a.product_code = i.product_code
          AND a.invoice_no = inv.invoice_no;


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_SPEC_BONUS_CY
(INV_SPEC_BNS_SLNO, INV_MST_SLNO, CUSTOMER_CODE, INVOICE_DATE, PRODUCT_CODE, 
 PRODUCT_BATCH_NO, LOT_NO, SPEC_BONUS_QTY, PRODUCT_PRICE)
AS 
SELECT "INV_SPEC_BNS_SLNO",
          "INV_MST_SLNO",
          "CUSTOMER_CODE",
          "INVOICE_DATE",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "SPEC_BONUS_QTY",
          "PRODUCT_PRICE"
     FROM VW_INVOICE_SPEC_BONUS
    WHERE INV_MST_SLNO IN (SELECT INV_MST_SLNO
                             FROM VW_INVOICE_MST
                            WHERE TO_CHAR (INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR'),'RRRR')  );


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_SPEC_BONUS_LY
(INV_SPEC_BNS_SLNO, INV_MST_SLNO, CUSTOMER_CODE, INVOICE_DATE, PRODUCT_CODE, 
 PRODUCT_BATCH_NO, LOT_NO, SPEC_BONUS_QTY, PRODUCT_PRICE)
AS 
SELECT "INV_SPEC_BNS_SLNO",
          "INV_MST_SLNO",
          "CUSTOMER_CODE",
          "INVOICE_DATE",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "SPEC_BONUS_QTY",
          "PRODUCT_PRICE"
     FROM VW_INVOICE_SPEC_BONUS
    WHERE INV_MST_SLNO IN (SELECT INV_MST_SLNO
                             FROM VW_INVOICE_MST
                            WHERE TO_CHAR (INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1,'RRRR')  );


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_TRADE_CY
(INV_TRD_SLNO, INV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 TRADE_QTY, CUSTOMER_CODE, INVOICE_DATE)
AS 
SELECT INV_TRD_SLNO,
          INV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          TRADE_QTY,
          CUSTOMER_CODE,
          INVOICE_DATE
     FROM VW_INVOICE_TRADE
    WHERE INV_DTL_SLNO IN (SELECT B.INV_DTL_SLNO
                             FROM VW_INVOICE_MST A, VW_INVOICE_DTL B
                            WHERE     A.INV_MST_SLNO = B.INV_MST_SLNO
                                  AND TO_CHAR (A.INVOICE_DATE, 'RRRR') =
                                         TO_CHAR (SYSDATE - 1, 'RRRR'));


CREATE OR REPLACE FORCE VIEW VIEW_INVOICE_TRADE_LY
(INV_TRD_SLNO, INV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 TRADE_QTY, CUSTOMER_CODE, INVOICE_DATE)
AS 
SELECT INV_TRD_SLNO,
          INV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          TRADE_QTY,
          CUSTOMER_CODE,
          INVOICE_DATE
     FROM VW_INVOICE_TRADE
    WHERE INV_DTL_SLNO IN (SELECT B.INV_DTL_SLNO
                             FROM VW_INVOICE_MST A, VW_INVOICE_DTL B
                            WHERE     A.INV_MST_SLNO = B.INV_MST_SLNO
                                  AND TO_CHAR (A.INVOICE_DATE, 'RRRR') =
                                         TO_CHAR (
                                            TRUNC (SYSDATE - 1, 'RR') - 1,
                                            'RRRR'));


CREATE OR REPLACE FORCE VIEW VIEW_INV_SPEC_PRICE_DISC_CY
(INV_SPEC_PRICE_SLNO, INV_MST_SLNO, PRICE_DISC_AMT)
AS 
SELECT INV_SPEC_PRICE_SLNO,
          INV_MST_SLNO,
          PRICE_DISC_AMT
     FROM VW_INV_SPEC_PRICE_DISC
    WHERE INV_MST_SLNO IN (SELECT INV_MST_SLNO
                           FROM VW_INVOICE_MST
                           WHERE TO_CHAR (INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE - 1, 'RRRR') );


CREATE OR REPLACE FORCE VIEW VIEW_INV_SPEC_PRICE_DISC_LY
(INV_SPEC_PRICE_SLNO, INV_MST_SLNO, PRICE_DISC_AMT)
AS 
SELECT INV_SPEC_PRICE_SLNO,
          INV_MST_SLNO,
          PRICE_DISC_AMT
     FROM VW_INV_SPEC_PRICE_DISC
    WHERE INV_MST_SLNO IN (SELECT INV_MST_SLNO
                           FROM VW_INVOICE_MST
                           WHERE TO_CHAR (INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1,'RRRR') );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_BONUS_CY
(RET_RECV_BNS_SLNO, RET_RECV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 BONUS_QTY, BONUS_VALUE, ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, 
 UPDATED_BY, UPDATED_DATE, UPDATED_TERMINAL, CUSTOMER_CODE)
AS 
SELECT "RET_RECV_BNS_SLNO",
          "RET_RECV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "BONUS_QTY",
          "BONUS_VALUE",
          "ENTERED_BY",
          "ENTERED_DATE",
          "ENTERED_TERMINAL",
          "UPDATED_BY",
          "UPDATED_DATE",
          "UPDATED_TERMINAL",
          "CUSTOMER_CODE"
     FROM VW_RET_RETURN_BONUS
    WHERE RET_RECV_DTL_SLNO IN (   
                                SELECT RET_RECV_DTL_SLNO
                                FROM   VW_RET_RETURN_MST M, VW_RET_RETURN_DTL D,VW_INVOICE_MST I
                                WHERE  M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO
                                AND    M.INVOICE_NO=I.INVOICE_NO
                                AND    TO_CHAR (I.INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE - 1, 'RRRR')                                
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_BONUS_LY
(RET_RECV_BNS_SLNO, RET_RECV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 BONUS_QTY, BONUS_VALUE, ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, 
 UPDATED_BY, UPDATED_DATE, UPDATED_TERMINAL, CUSTOMER_CODE)
AS 
SELECT "RET_RECV_BNS_SLNO",
          "RET_RECV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "BONUS_QTY",
          "BONUS_VALUE",
          "ENTERED_BY",
          "ENTERED_DATE",
          "ENTERED_TERMINAL",
          "UPDATED_BY",
          "UPDATED_DATE",
          "UPDATED_TERMINAL",
          "CUSTOMER_CODE"
     FROM VW_RET_RETURN_BONUS
    WHERE RET_RECV_DTL_SLNO IN (   
                                SELECT RET_RECV_DTL_SLNO
                                FROM   VW_RET_RETURN_MST M, VW_RET_RETURN_DTL D,VW_INVOICE_MST I
                                WHERE  M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO
                                AND    M.INVOICE_NO=I.INVOICE_NO
                                AND    TO_CHAR (I.INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1, 'RRRR')                        
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_DTL_CY
(RET_RECV_DTL_SLNO, RET_RECV_MST_SLNO, PRODUCT_CODE, TRADE_PRICE, ISSUED_QTY, 
 RETURN_QTY, CUST_DISCOUNT_VAL, CUST_BONUS_DISCOUNT, ADJUSTMENT_VAL, RETURN_VALUE, 
 BONUS_PRICE_DISCOUNT, INVOICE_NO, RETURN_TYPE)
AS 
SELECT "RET_RECV_DTL_SLNO",
          "RET_RECV_MST_SLNO",
          "PRODUCT_CODE",
          "TRADE_PRICE",
          "ISSUED_QTY",
          "RETURN_QTY",
          "CUST_DISCOUNT_VAL",
          "CUST_BONUS_DISCOUNT",
          "ADJUSTMENT_VAL",
          "RETURN_VALUE",
          "BONUS_PRICE_DISCOUNT",
          "INVOICE_NO",
          "RETURN_TYPE"
     FROM VW_RET_RETURN_DTL
    WHERE RET_RECV_MST_SLNO IN (
    
                                SELECT RET_RECV_MST_SLNO
                                FROM VW_RET_RETURN_MST A, VW_INVOICE_MST B
                                WHERE A.INVOICE_NO=B.INVOICE_NO
                                AND  TO_CHAR (B.INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE - 1, 'RRRR')
                                          
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_DTL_LY
(RET_RECV_DTL_SLNO, RET_RECV_MST_SLNO, PRODUCT_CODE, TRADE_PRICE, ISSUED_QTY, 
 RETURN_QTY, CUST_DISCOUNT_VAL, CUST_BONUS_DISCOUNT, ADJUSTMENT_VAL, RETURN_VALUE, 
 BONUS_PRICE_DISCOUNT, INVOICE_NO, RETURN_TYPE)
AS 
SELECT "RET_RECV_DTL_SLNO",
          "RET_RECV_MST_SLNO",
          "PRODUCT_CODE",
          "TRADE_PRICE",
          "ISSUED_QTY",
          "RETURN_QTY",
          "CUST_DISCOUNT_VAL",
          "CUST_BONUS_DISCOUNT",
          "ADJUSTMENT_VAL",
          "RETURN_VALUE",
          "BONUS_PRICE_DISCOUNT",
          "INVOICE_NO",
          "RETURN_TYPE"
     FROM VW_RET_RETURN_DTL
    WHERE RET_RECV_MST_SLNO IN (
    
                                SELECT RET_RECV_MST_SLNO
                                FROM VW_RET_RETURN_MST A, VW_INVOICE_MST B
                                WHERE A.INVOICE_NO=B.INVOICE_NO
                                AND  TO_CHAR (B.INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1, 'RRRR')
                                          
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_ISSUE_CY
(RET_RECV_ISS_SLNO, RET_RECV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 RECEIVED_QTY, RECEIVED_VALUE, ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, 
 UPDATED_BY, UPDATED_DATE, UPDATED_TERMINAL, CUSTOMER_CODE)
AS 
SELECT "RET_RECV_ISS_SLNO",
          "RET_RECV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "RECEIVED_QTY",
          "RECEIVED_VALUE",
          "ENTERED_BY",
          "ENTERED_DATE",
          "ENTERED_TERMINAL",
          "UPDATED_BY",
          "UPDATED_DATE",
          "UPDATED_TERMINAL",
          "CUSTOMER_CODE"
     FROM VW_RET_RETURN_ISSUE
    WHERE RET_RECV_DTL_SLNO IN (
    
                                SELECT RET_RECV_DTL_SLNO
                                FROM   VW_RET_RETURN_MST M, VW_RET_RETURN_DTL D,VW_INVOICE_MST I
                                WHERE  M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO
                                AND    M.INVOICE_NO=I.INVOICE_NO
                                AND    TO_CHAR (I.INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE - 1, 'RRRR')
                                
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_ISSUE_LY
(RET_RECV_ISS_SLNO, RET_RECV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 RECEIVED_QTY, RECEIVED_VALUE, ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, 
 UPDATED_BY, UPDATED_DATE, UPDATED_TERMINAL, CUSTOMER_CODE)
AS 
SELECT "RET_RECV_ISS_SLNO",
          "RET_RECV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "RECEIVED_QTY",
          "RECEIVED_VALUE",
          "ENTERED_BY",
          "ENTERED_DATE",
          "ENTERED_TERMINAL",
          "UPDATED_BY",
          "UPDATED_DATE",
          "UPDATED_TERMINAL",
          "CUSTOMER_CODE"
     FROM VW_RET_RETURN_ISSUE
    WHERE RET_RECV_DTL_SLNO IN (
    
                                SELECT RET_RECV_DTL_SLNO
                                FROM   VW_RET_RETURN_MST M, VW_RET_RETURN_DTL D,VW_INVOICE_MST I
                                WHERE  M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO
                                AND    M.INVOICE_NO=I.INVOICE_NO
                                AND    TO_CHAR (I.INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1, 'RRRR')
                                
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_MST_CY
(RET_RECV_MST_SLNO, CUSTOMER_CODE, RETAILER_CODE, RETURN_DATE, INVOICE_NO, 
 RETURN_TYPE, NET_RETURN_VAL, TDS_VAL, ADJUSTMENT_VAL, RETURN_STATUS, 
 RETURN_BNS_DISC, RETURN_SLAB_AMOUNT, SPECIAL_BONUS_DISC, RETURN_VALUE, INV_TYPE_CODE, 
 INVOICE_DATE, EMPLOYEE_CODE, RETURN_DATETIME, MARKET_CODE, ROUTE_CODE)
AS 
SELECT A.RET_RECV_MST_SLNO,
          A.CUSTOMER_CODE,
          A.RETAILER_CODE,
          A.RETURN_DATE,
          A.INVOICE_NO,
          A.RETURN_TYPE,
          A.NET_RETURN_VAL,
          A.TDS_VAL,
          A.ADJUSTMENT_VAL,
          A.RETURN_STATUS,
          A.RETURN_BNS_DISC,
          A.RETURN_SLAB_AMOUNT,
          A.SPECIAL_BONUS_DISC,
          A.RETURN_VALUE,
          A.INV_TYPE_CODE,
          A.INVOICE_DATE,
          A.EMPLOYEE_CODE,
          A.RETURN_DATETIME,
          A.MARKET_CODE,
          A.ROUTE_CODE
     FROM VW_RET_RETURN_MST A, VW_INVOICE_MST B
    WHERE     A.INVOICE_NO = B.INVOICE_NO
          AND TO_CHAR (B.INVOICE_DATE, 'RRRR') =
                 TO_CHAR (SYSDATE - 1, 'RRRR');


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_MST_LY
(RET_RECV_MST_SLNO, CUSTOMER_CODE, RETAILER_CODE, RETURN_DATE, INVOICE_NO, 
 RETURN_TYPE, NET_RETURN_VAL, TDS_VAL, ADJUSTMENT_VAL, RETURN_STATUS, 
 RETURN_BNS_DISC, RETURN_SLAB_AMOUNT, SPECIAL_BONUS_DISC, RETURN_VALUE, INV_TYPE_CODE, 
 INVOICE_DATE, EMPLOYEE_CODE, RETURN_DATETIME, MARKET_CODE, ROUTE_CODE)
AS 
SELECT A.RET_RECV_MST_SLNO,
          A.CUSTOMER_CODE,
          A.RETAILER_CODE,
          A.RETURN_DATE,
          A.INVOICE_NO,
          A.RETURN_TYPE,
          A.NET_RETURN_VAL,
          A.TDS_VAL,
          A.ADJUSTMENT_VAL,
          A.RETURN_STATUS,
          A.RETURN_BNS_DISC,
          A.RETURN_SLAB_AMOUNT,
          A.SPECIAL_BONUS_DISC,
          A.RETURN_VALUE,
          A.INV_TYPE_CODE,
          A.INVOICE_DATE,
          A.EMPLOYEE_CODE,
          A.RETURN_DATETIME,
          A.MARKET_CODE,
          A.ROUTE_CODE
     FROM VW_RET_RETURN_MST A, VW_INVOICE_MST B
    WHERE     A.INVOICE_NO = B.INVOICE_NO
          AND TO_CHAR (B.INVOICE_DATE, 'RRRR') =
                 TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1, 'RRRR');


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_SPEC_BONUS_CY
(RET_RECV_SPEC_BNS_SLNO, RET_RECV_MST_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 SPEC_BONUS_QTY, SPEC_BONUS_VAL)
AS 
SELECT "RET_RECV_SPEC_BNS_SLNO",
          "RET_RECV_MST_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "SPEC_BONUS_QTY",
          "SPEC_BONUS_VAL"
     FROM VW_RET_RETURN_SPEC_BONUS
    WHERE RET_RECV_MST_SLNO IN (   
                                SELECT RET_RECV_MST_SLNO
                                FROM VW_RET_RETURN_MST A, VW_INVOICE_MST B
                                WHERE A.INVOICE_NO=B.INVOICE_NO
                                AND  TO_CHAR (B.INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE - 1, 'RRRR')                                          
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_SPEC_BONUS_LY
(RET_RECV_SPEC_BNS_SLNO, RET_RECV_MST_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 SPEC_BONUS_QTY, SPEC_BONUS_VAL)
AS 
SELECT "RET_RECV_SPEC_BNS_SLNO",
          "RET_RECV_MST_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "SPEC_BONUS_QTY",
          "SPEC_BONUS_VAL"
     FROM VW_RET_RETURN_SPEC_BONUS
    WHERE RET_RECV_MST_SLNO IN (    
                                SELECT RET_RECV_MST_SLNO
                                FROM VW_RET_RETURN_MST A, VW_INVOICE_MST B
                                WHERE A.INVOICE_NO=B.INVOICE_NO
                                AND  TO_CHAR (B.INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1, 'RRRR')                                          
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_SPEC_DISC_CY
(RET_RECV_SPEC_DISC_SLNO, RET_RECV_MST_SLNO, SPECIAL_BONUS_DISC)
AS 
SELECT "RET_RECV_SPEC_DISC_SLNO",
          "RET_RECV_MST_SLNO",
          "SPECIAL_BONUS_DISC"
     FROM VW_RET_RETURN_SPEC_DISC
    WHERE RET_RECV_MST_SLNO IN (SELECT RET_RECV_MST_SLNO
                                  FROM VW_RET_RETURN_MST A, VW_INVOICE_MST B
                                 WHERE     A.INVOICE_NO = B.INVOICE_NO
                                       AND TO_CHAR (B.INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE - 1, 'RRRR')   
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_SPEC_DISC_LY
(RET_RECV_SPEC_DISC_SLNO, RET_RECV_MST_SLNO, SPECIAL_BONUS_DISC)
AS 
SELECT "RET_RECV_SPEC_DISC_SLNO",
          "RET_RECV_MST_SLNO",
          "SPECIAL_BONUS_DISC"
     FROM VW_RET_RETURN_SPEC_DISC
    WHERE RET_RECV_MST_SLNO IN (SELECT RET_RECV_MST_SLNO
                                  FROM VW_RET_RETURN_MST A, VW_INVOICE_MST B
                                 WHERE     A.INVOICE_NO = B.INVOICE_NO
                                       AND TO_CHAR (B.INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1,'RRRR')
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_TRADE_CY
(RET_RECV_TRD_SLNO, RET_RECV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 TRADE_QTY, TRADE_VALUE, ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, 
 UPDATED_BY, UPDATED_DATE, UPDATED_TERMINAL, CUSTOMER_CODE)
AS 
SELECT "RET_RECV_TRD_SLNO",
          "RET_RECV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "TRADE_QTY",
          "TRADE_VALUE",
          "ENTERED_BY",
          "ENTERED_DATE",
          "ENTERED_TERMINAL",
          "UPDATED_BY",
          "UPDATED_DATE",
          "UPDATED_TERMINAL",
          "CUSTOMER_CODE"
     FROM VW_RET_RETURN_TRADE
    WHERE RET_RECV_DTL_SLNO IN (   
                                SELECT RET_RECV_DTL_SLNO
                                FROM   VW_RET_RETURN_MST M, VW_RET_RETURN_DTL D,VW_INVOICE_MST I
                                WHERE  M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO
                                AND    M.INVOICE_NO=I.INVOICE_NO
                                AND    TO_CHAR (I.INVOICE_DATE, 'RRRR') = TO_CHAR (SYSDATE - 1, 'RRRR')                                
                                );


CREATE OR REPLACE FORCE VIEW VIEW_RET_RETURN_TRADE_LY
(RET_RECV_TRD_SLNO, RET_RECV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 TRADE_QTY, TRADE_VALUE, ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, 
 UPDATED_BY, UPDATED_DATE, UPDATED_TERMINAL, CUSTOMER_CODE)
AS 
SELECT "RET_RECV_TRD_SLNO",
          "RET_RECV_DTL_SLNO",
          "PRODUCT_CODE",
          "PRODUCT_BATCH_NO",
          "LOT_NO",
          "TRADE_QTY",
          "TRADE_VALUE",
          "ENTERED_BY",
          "ENTERED_DATE",
          "ENTERED_TERMINAL",
          "UPDATED_BY",
          "UPDATED_DATE",
          "UPDATED_TERMINAL",
          "CUSTOMER_CODE"
     FROM VW_RET_RETURN_TRADE
    WHERE RET_RECV_DTL_SLNO IN (   
                                SELECT RET_RECV_DTL_SLNO
                                FROM   VW_RET_RETURN_MST M, VW_RET_RETURN_DTL D,VW_INVOICE_MST I
                                WHERE  M.RET_RECV_MST_SLNO = D.RET_RECV_MST_SLNO
                                AND    M.INVOICE_NO=I.INVOICE_NO
                                AND    TO_CHAR (I.INVOICE_DATE, 'RRRR') = TO_CHAR (TRUNC (SYSDATE - 1, 'RR') - 1, 'RRRR')                         
                                );


CREATE OR REPLACE FORCE VIEW VW_INVOICE_BONUS
(INV_BNS_SLNO, INV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 BONUS_QTY, CUSTOMER_CODE, INVOICE_DATE)
AS 
SELECT INV_BNS_SLNO,
          INV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          BONUS_QTY,
          CUSTOMER_CODE,
          INVOICE_DATE
     FROM MV_INVOICE_BONUS
   UNION ALL
   SELECT INV_BNS_SLNO,
          INV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          BONUS_QTY,
          CUSTOMER_CODE,
          INVOICE_DATE
     FROM MV_INVOICE_BONUS_ARC;


CREATE OR REPLACE FORCE VIEW VW_INVOICE_DTL
(INV_DTL_SLNO, INV_MST_SLNO, PRODUCT_CODE, PRODUCT_PRICE, ISSUED_QTY, 
 RTL_DISCOUNT, RTL_DISCOUNT_VAL, PROD_DISCOUNT, PROD_DISCOUNT_VAL, BONUS_PRICE_DISCOUNT, 
 TOTAL_VAL, SLAB_ADJ_VAL, SLAB_ADJ_STATUS, SLAB_ADJ_DATE, NET_VAL)
AS 
SELECT INV_DTL_SLNO,
          INV_MST_SLNO,
          PRODUCT_CODE,
          PRODUCT_PRICE,
          ISSUED_QTY,
          RTL_DISCOUNT,
          RTL_DISCOUNT_VAL,
          PROD_DISCOUNT,
          PROD_DISCOUNT_VAL,
          BONUS_PRICE_DISCOUNT,
          TOTAL_VAL,
          SLAB_ADJ_VAL,
          SLAB_ADJ_STATUS,
          SLAB_ADJ_DATE,
          NET_VAL
     FROM MV_INVOICE_DTL
   UNION ALL
   SELECT INV_DTL_SLNO,
          INV_MST_SLNO,
          PRODUCT_CODE,
          PRODUCT_PRICE,
          ISSUED_QTY,
          RTL_DISCOUNT,
          RTL_DISCOUNT_VAL,
          PROD_DISCOUNT,
          PROD_DISCOUNT_VAL,
          BONUS_PRICE_DISCOUNT,
          NVL (TOTAL_VAL, 0) - NVL (RTL_DISCOUNT_VAL, 0) TOTAL_VAL,
          SLAB_ADJ_VAL,
          SLAB_ADJ_STATUS,
          SLAB_ADJ_DATE,
          NET_VAL
     FROM MV_INVOICE_DTL_ARC;


CREATE OR REPLACE FORCE VIEW VW_INVOICE_ISSUE
(INV_ISS_SLNO, INV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 ISSUED_QTY, CUSTOMER_CODE, INVOICE_DATE, ISSUED_PRICE)
AS 
SELECT INV_ISS_SLNO,
          INV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          ISSUED_QTY,
          CUSTOMER_CODE,
          INVOICE_DATE,
          ISSUED_PRICE
     FROM MV_INVOICE_ISSUE
   UNION ALL
   SELECT INV_ISS_SLNO,
          INV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          ISSUED_QTY,
          CUSTOMER_CODE,
          INVOICE_DATE,
          ISSUED_PRICE
     FROM MV_INVOICE_ISSUE_ARC;


CREATE OR REPLACE FORCE VIEW VW_INVOICE_MST
(INV_MST_SLNO, INVOICE_NO, INVOICE_DATE, ORDER_NO, ORDER_DATE, 
 INV_TYPE_CODE, DELIVERY_DATE, DELIVERY_TIME, RETAILER_CODE, ROUTE_CODE, 
 MARKET_CODE, EMPLOYEE_CODE, CUSTOMER_CODE, GRAND_TOTAL, TOTAL_TDS, 
 SLAB_ADJUSTMENT, TOTAL_ADJUSTMENT, NET_INV_AMOUNT, INV_STATUS, REMARKS, 
 ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, UPDATED_BY, UPDATED_DATE, 
 UPDATED_TERMINAL, TRADE_POLICY_NO, SPECIAL_BONUS_DISC, RETAILER_TYPE, ZONE_CODE, 
 AREA_CODE, BELT_CODE, TERRITORY_CODE, INVOICE_VERSION)
AS 
SELECT INV_MST_SLNO,
          INVOICE_NO,
          INVOICE_DATE,
          ORDER_NO,
          ORDER_DATE,
          INV_TYPE_CODE,
          DELIVERY_DATE,
          DELIVERY_TIME,
          RETAILER_CODE,
          ROUTE_CODE,
          MARKET_CODE,
          EMPLOYEE_CODE,
          CUSTOMER_CODE,
          GRAND_TOTAL,
          TOTAL_TDS,
          SLAB_ADJUSTMENT,
          TOTAL_ADJUSTMENT,
          NET_INV_AMOUNT,
          INV_STATUS,
          REMARKS,
          ENTERED_BY,
          ENTERED_DATE,
          ENTERED_TERMINAL,
          UPDATED_BY,
          UPDATED_DATE,
          UPDATED_TERMINAL,
          TRADE_POLICY_NO,
          SPECIAL_BONUS_DISC,
          RETAILER_TYPE,
          ZONE_CODE,
          AREA_CODE,
          BELT_CODE,
          TERRITORY_CODE,
          INVOICE_VERSION
     FROM MV_INVOICE_MST
   UNION ALL
   SELECT INV_MST_SLNO,
          INVOICE_NO,
          INVOICE_DATE,
          ORDER_NO,
          ORDER_DATE,
          INV_TYPE_CODE,
          DELIVERY_DATE,
          DELIVERY_TIME,
          RETAILER_CODE,
          ROUTE_CODE,
          MARKET_CODE,
          EMPLOYEE_CODE,
          CUSTOMER_CODE,
          GRAND_TOTAL,
          TOTAL_TDS,
          SLAB_ADJUSTMENT,
          TOTAL_ADJUSTMENT,
          NET_INV_AMOUNT,
          INV_STATUS,
          REMARKS,
          ENTERED_BY,
          ENTERED_DATE,
          ENTERED_TERMINAL,
          UPDATED_BY,
          UPDATED_DATE,
          UPDATED_TERMINAL,
          TRADE_POLICY_NO,
          SPECIAL_BONUS_DISC,
          RETAILER_TYPE,
          ZONE_CODE,
          AREA_CODE,
          BELT_CODE,
          TERRITORY_CODE,
          INVOICE_VERSION
     FROM MV_INVOICE_MST_ARC;


CREATE OR REPLACE FORCE VIEW VW_INVOICE_SPEC_BONUS
(INV_SPEC_BNS_SLNO, INV_MST_SLNO, CUSTOMER_CODE, INVOICE_DATE, PRODUCT_CODE, 
 PRODUCT_BATCH_NO, LOT_NO, SPEC_BONUS_QTY, PRODUCT_PRICE)
AS 
SELECT INV_SPEC_BNS_SLNO,
          INV_MST_SLNO,
          CUSTOMER_CODE,
          INVOICE_DATE,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          SPEC_BONUS_QTY,
          PRODUCT_PRICE
     FROM MV_INVOICE_SPEC_BONUS
   UNION ALL
   SELECT INV_SPEC_BNS_SLNO,
          INV_MST_SLNO,
          CUSTOMER_CODE,
          INVOICE_DATE,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          SPEC_BONUS_QTY,
          PRODUCT_PRICE
     FROM MV_INVOICE_SPEC_BONUS_ARC;


CREATE OR REPLACE FORCE VIEW VW_INVOICE_TRADE
(INV_TRD_SLNO, INV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 TRADE_QTY, CUSTOMER_CODE, INVOICE_DATE)
AS 
SELECT INV_TRD_SLNO,
          INV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          TRADE_QTY,
          CUSTOMER_CODE,
          INVOICE_DATE
     FROM MV_INVOICE_TRADE
   UNION ALL
   SELECT INV_TRD_SLNO,
          INV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          TRADE_QTY,
          CUSTOMER_CODE,
          INVOICE_DATE
     FROM MV_INVOICE_TRADE_ARC;


CREATE OR REPLACE FORCE VIEW VW_INV_SPEC_PRICE_DISC
(INV_SPEC_PRICE_SLNO, INV_MST_SLNO, PRICE_DISC_AMT)
AS 
SELECT INV_SPEC_PRICE_SLNO, INV_MST_SLNO, PRICE_DISC_AMT
     FROM MV_INV_SPEC_PRICE_DISC
   UNION ALL
   SELECT INV_SPEC_PRICE_SLNO, INV_MST_SLNO, PRICE_DISC_AMT
     FROM MV_INV_SPEC_PRICE_DISC_ARC;


CREATE OR REPLACE FORCE VIEW VW_LOCATION
(LOC_NAME, LOC_CODE, LOC_TYPE)
AS 
SELECT zone_NAME loc_name, zone_CODE loc_code, 'Z' LOC_TYPE FROM MV_ZONE_INFO
   UNION
   SELECT 'Remaining Zone/ALL' loc_name, 'RZ' loc_code, 'Z' LOC_TYPE
     FROM DUAL
   UNION
   SELECT AREA_NAME loc_name, AREA_CODE loc_code, 'A' LOC_TYPE FROM MV_AREA_INFO
   UNION
   SELECT 'Remaining Area/ALL' loc_name, 'RA' loc_code, 'A' LOC_TYPE
     FROM DUAL
   UNION
   SELECT BELT_NAME loc_name, BELT_CODE loc_code, 'B' LOC_TYPE FROM MV_BELT_INFO
   UNION
   SELECT 'Remaining Belt/ALL' loc_name, 'RB' loc_code, 'B' LOC_TYPE
     FROM DUAL
   UNION
   SELECT TERRITORY_NAME loc_name, TERRITORY_CODE loc_code, 'T' LOC_TYPE
     FROM MV_TERRITORY_INFO
   UNION
   SELECT 'Remaining/ALL' loc_name, 'RT' loc_code, 'T' LOC_TYPE FROM DUAL
   UNION
   SELECT MARKET_NAME loc_name, MARKET_CODE loc_code, 'M' LOC_TYPE
     FROM MV_MARKET_INFO
   UNION
   SELECT 'Remaining Market/ALL' loc_name, 'RM' loc_code, 'M' LOC_TYPE
     FROM DUAL;


CREATE OR REPLACE FORCE VIEW VW_NATIONAL_STOCK
(PRODUCT_CODE, PRODUCT_NAME, PACK_SIZE, UNIT_TP, STOCK_QTY, 
 STOCK_VALUE)
AS 
SELECT A.PRODUCT_CODE,
       B.PRODUCT_NAME,
       B.PACK_SIZE,
       A.UNIT_TP,
       A.STOCK_QTY,
       A.STOCK_VALUE
FROM (

     SELECT P.PRODUCT_CODE,
            P.PRODUCT_PRICE UNIT_TP,
            SUM (NVL (PASSED_QTY, 0)) STOCK_QTY,
            SUM (NVL (PASSED_QTY, 0)) * NVL (P.PRODUCT_PRICE, 0) STOCK_VALUE
     FROM (
       
             SELECT A.PRODUCT_CODE,
                    A.LOT_NO,
                    A.PASSED_QTY,
                    B.PRODUCT_PRICE
             FROM  (  
               
                       SELECT S.PRODUCT_CODE,
                              S.LOT_NO,
                              SUM (NVL (S.PASSED_QTY, 0)) PASSED_QTY
                         FROM SPA_SFBL.BATCH_LOT_WISE_STOCK@DL_SPASFBL.SQUAREGROUP.COM  S,
                              (SELECT DISTINCT CUSTOMER_CODE
                                 FROM MV_DIVISION_CUSTOMER_RELATION) L
                        WHERE S.CUSTOMER_CODE = L.CUSTOMER_CODE
                     GROUP BY S.PRODUCT_CODE, S.LOT_NO
                    ) A,
                    (
                    SELECT B.PRODUCT_CODE, B.PRODUCT_PRICE, A.LOT_NO
                       FROM SPA_SFBL.REQUISITION_RECEIVE_MST@DL_SPASFBL.SQUAREGROUP.COM  A,
                            SPA_SFBL.REQUISITION_RECEIVE_DTL@DL_SPASFBL.SQUAREGROUP.COM  B
                      WHERE A.RECEIVE_MST_SLNO = B.RECEIVE_MST_SLNO
                    ) B
             WHERE A.PRODUCT_CODE = B.PRODUCT_CODE AND A.LOT_NO = B.LOT_NO 
            ) P
     GROUP BY P.PRODUCT_CODE,P.PRODUCT_PRICE
     ) A, MV_PRODUCT_INFO B
WHERE A.PRODUCT_CODE=B.PRODUCT_CODE;


CREATE OR REPLACE FORCE VIEW VW_ORDER_DTL
(ORDER_DTL_SLNO, ORDER_MST_SLNO, PRODUCT_CODE, ORDER_QTY, REVISED_ORDER_QTY, 
 PRODUCT_PRICE)
AS 
SELECT ORDER_DTL_SLNO,
          ORDER_MST_SLNO,
          PRODUCT_CODE,
          ORDER_QTY,
          REVISED_ORDER_QTY,
          PRODUCT_PRICE
     FROM MV_ORDER_DTL
   UNION ALL
   SELECT ORDER_DTL_SLNO,
          ORDER_MST_SLNO,
          PRODUCT_CODE,
          ORDER_QTY,
          REVISED_ORDER_QTY,
          PRODUCT_PRICE
     FROM MV_ORDER_DTL_ARC;


CREATE OR REPLACE FORCE VIEW VW_ORDER_MST
(ORDER_MST_SLNO, ORDER_NO, ORDER_DATE, ORDER_TYPE, DELIVERY_DATE, 
 RETAILER_CODE, ROUTE_CODE, MARKET_CODE, EMPLOYEE_CODE, CUSTOMER_CODE, 
 INVOICE_STATUS, RETAILER_LAT, RETAILER_LONG, TRADE_POLICY_NO, ORDER_ACTUAL_DATETIME)
AS 
SELECT ORDER_MST_SLNO,
          ORDER_NO,
          ORDER_DATE,
          ORDER_TYPE,
          DELIVERY_DATE,
          RETAILER_CODE,
          ROUTE_CODE,
          MARKET_CODE,
          EMPLOYEE_CODE,
          CUSTOMER_CODE,
          INVOICE_STATUS,
          RETAILER_LAT,
          RETAILER_LONG,
          TRADE_POLICY_NO,
          ORDER_ACTUAL_DATETIME
     FROM MV_ORDER_MST
   UNION ALL
   SELECT ORDER_MST_SLNO,
          ORDER_NO,
          ORDER_DATE,
          ORDER_TYPE,
          DELIVERY_DATE,
          RETAILER_CODE,
          ROUTE_CODE,
          MARKET_CODE,
          EMPLOYEE_CODE,
          CUSTOMER_CODE,
          INVOICE_STATUS,
          RETAILER_LAT,
          RETAILER_LONG,
          TRADE_POLICY_NO,
          ORDER_ACTUAL_DATETIME
     FROM MV_ORDER_MST_ARC;


CREATE OR REPLACE FORCE VIEW VW_PRODUCT_PRICE
(PRODUCT_CODE, PRODUCT_NAME, PACK_SIZE, BASE_PRODUCT_CODE, BASE_PRODUCT_NAME, 
 PRODUCT_CATEGORY_CODE, PRODUCT_CATEGORY_NAME, BRAND_CODE, BRAND_NAME, UNIT_TP, 
 UNIT_VAT, MRP, STATUS)
AS 
select a.product_code,
          a.product_name,
          a.pack_size,
          a.base_product_code,
          e.base_product_name,
          a.product_category product_category_code,
          c.category_name product_category_name,
          a.brand_code,
          d.brand_name,
          b.unit_tp,
          b.unit_vat,
          b.mrp,
          a.status
     from mv_product_info a, mv_product_price_info b, mv_category_info c,mv_brand_info d, mv_base_product_info e
    where     a.product_code = b.product_code
    --AND a.STATUS = 'A'
    and b.price_date = (select max (price_date)
                                 from mv_product_price_info
                                where product_code = a.product_code)
    and a.product_category = c.category_code
    and a.brand_code=d.brand_code
    and a.base_product_code=e.base_product_code;


CREATE OR REPLACE FORCE VIEW VW_REPORT_ACCESS
(SLNO, USER_ID, USER_NAME, EMP_ID, EMP_NAME, 
 REPORT_NAME, VIEW_DATE, VIEW_TERMINAL, VIEW_IP)
AS 
SELECT A.SLNO,
            A.USER_ID,
            B.USER_NAME,
            C.EMPLOYEE_CODE EMP_ID,
            C.EMPLOYEE_NAME EMP_NAME,
            A.REPORT_NAME,
            A.REPORT_ACCESS_DATE VIEW_DATE,
            A.REPORT_ACCESS_TERMINAL VIEW_TERMINAL,
            A.REPORT_ACCESS_IP VIEW_IP
       FROM SC_REPORT_ACCESS_INFO A, SC_USER_LOGIN B, SC_EMPLOYEE_INFO C
      WHERE A.USER_ID = B.USER_ID AND B.EMPLOYEE_ID = C.EMPLOYEE_ID
   ORDER BY A.USER_ID, A.REPORT_ACCESS_DATE;


CREATE OR REPLACE FORCE VIEW VW_REPORT_TYPE
(REPORT_TYPE_NAME, REPORT_TYPE_VALUE, REPORT_NAME, SLNO)
AS 
SELECT 'Today (' || TO_CHAR (TRUNC (SYSDATE), 'DD/MM/RRRR') || ')'
             report_type_name,
          'Today' report_type_value,
          'Today_' || TO_CHAR (TRUNC (SYSDATE), 'DD_MM_RRRR') report_name,
          0 slno
     FROM DUAL
   UNION ALL
   SELECT 'Yesterday (' || TO_CHAR (TRUNC (SYSDATE) - 1, 'DD/MM/RRRR') || ')'
             report_type_name,
          'Yesterday' report_type_value,
          'Yesterday_' || TO_CHAR (TRUNC (SYSDATE) - 1, 'DD_MM_RRRR')
             report_name,
          1 slno
     FROM DUAL
   UNION ALL
   SELECT    'Last 7 Days ('
          || TO_CHAR (TRUNC (SYSDATE) - 7, 'DD/MM/RRRR')
          || '-'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'DD/MM/RRRR')
          || ')'
             report_type_name,
          'LastSevendays' report_type_value,
             'Last_7_Days_'
          || TO_CHAR (TRUNC (SYSDATE) - 7, 'DD_MM_RRRR')
          || '_'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'DD_MM_RRRR')
             report_name,
          2 slno
     FROM DUAL
   UNION ALL
   SELECT    'Last 30 Days ('
          || TO_CHAR (TRUNC (SYSDATE) - 30, 'DD/MM/RRRR')
          || '-'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'DD/MM/RRRR')
          || ')'
             report_type_name,
          'LastThirtydays' report_type_value,
             'Last_30_Days_'
          || TO_CHAR (TRUNC (SYSDATE) - 30, 'DD_MM_RRRR')
          || '_'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'DD_MM_RRRR')
             report_name,
          3 slno
     FROM DUAL
   UNION ALL
   SELECT    'Current Month ('
          || TO_CHAR (TRUNC (SYSDATE - 1, 'MM'), 'DD/MM/RRRR')
          || '-'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'DD/MM/RRRR')
          || ')'
             report_type_name,
          'CurrentMonth' report_type_value,
             'Current_Month_ '
          || TO_CHAR (TRUNC (SYSDATE - 1, 'MM'), 'DD_MM_RRRR')
          || '_'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'DD_MM_RRRR')
             report_name,
          4 slno
     FROM DUAL
   UNION ALL
   SELECT    'Last Month ('
          || TO_CHAR (ADD_MONTHS (SYSDATE - 1, -1), 'Mon,YYYY')
          || ')'
             report_type_name,
          'LastMonth' report_type_value,
          'Last_Month_' || TO_CHAR (ADD_MONTHS (SYSDATE - 1, -1), 'Mon_YYYY')
             report_name,
          5 slno
     FROM DUAL
   UNION ALL
   SELECT 'Month On Month (' || TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY') || ')'
             report_type_name,
          'MonthOnMonthCy' report_type_value,
          'Month_On_Month_' || TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')
             report_name,
          6 slno
     FROM DUAL
   UNION ALL
   SELECT    'Month On Month ('
          || (TO_CHAR (TO_NUMBER (TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')) - 1))
          || ')'
             report_type_name,
          'MonthOnMonthLy' report_type_value,
             'Month_On_Month_'
          || (TO_CHAR (TO_NUMBER (TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')) - 1))
             report__name,
          7 slno
     FROM DUAL
   UNION ALL
   SELECT    'Month On Month ('
          || (TO_CHAR (TO_NUMBER (TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')) - 2))
          || ')'
             report_type_name,
          'MonthOnMonthLpy' report_type_value,
             'Month_On_Month_'
          || (TO_CHAR (TO_NUMBER (TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')) - 2))
             report_name,
          8 slno
     FROM DUAL
   UNION ALL
   SELECT 'Custom Date Range' report_type_name,
          'CustomDate' report_type_value,
          'Custom_Date_Range' report__name,
          9 slno
     FROM DUAL
   UNION ALL
   SELECT 'Dispaly Program' report_type_name,
          'DispalyProgram' report_type_value,
          'Dispaly_Program' report_name,
          10 slno
     FROM DUAL
   UNION ALL
   SELECT 'Retailer Details Info' report_type_name,
          'RetailerDetails' report_type_value,
          'RetailerDetails' report_name,
          11 slno
     FROM DUAL
   UNION ALL
   SELECT 'Dead Retailer Info' report_type_name,
          'DeadRetailer' report_type_value,
          'DeadRetailer' report_name,
          12 slno
     FROM DUAL
   UNION ALL
   SELECT 'Product Information' report_type_name,
          'ProductInformation' report_type_value,
          'ProductInformation' report_name,
          13 slno
     FROM DUAL
   UNION ALL
   SELECT 'Dead Product Info' report_type_name,
          'DeadProduct' report_type_value,
          'DeadProduct' report_name,
          14 slno
     FROM DUAL
   UNION ALL
   SELECT 'Trade Program Participation Report' report_type_name,
          'TradeProgramParticipation' report_type_value,
          'TradeProgramParticipation' report_name,
          15 slno
     FROM DUAL
   UNION ALL
   SELECT    'MOM Retail Product Trend ('
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')
          || ')'
             report_type_name,
          'MomRetailProductTrend' report_type_value,
          'MomRetailProductTrend' report_name,
          16 slno
     FROM DUAL
   UNION ALL
   SELECT    'SKU Wise Numeric Dist (MOM-'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')
          || ')'
             report_type_name,
          'MomSKUWiseNumericDistribution' report_type_value,
          'MomSKUWiseNumericDistribution' report_name,
          17 slno
     FROM DUAL
   UNION ALL
   SELECT    'SKU Wise Numeric Dist (MOM-'
          || TO_CHAR (
                TO_DATE (
                   ADD_MONTHS (TRUNC (TO_DATE (SYSDATE, 'DD/MM/RRRR'), 'RR'),
                               -12),
                   'DD/MM/RRRR'),
                'YYYY')
          || ')'
             report_type_name,
          'MomSKUWiseNumericDistributionLy' report_type_value,
          'MomSKUWiseNumericDistributionLy' report_name,
          29 slno
     FROM DUAL
   UNION ALL
   SELECT    'SKU Wise National Numeric Dist (MOM-'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')
          || ')'
             report_type_name,
          'MomSKUWiseNtlNumericDistribution' report_type_value,
          'MomSKUWiseNtlNumericDistribution' report_name,
          18 slno
     FROM DUAL
   UNION ALL
   SELECT    'SKU Wise National Numeric Dist (MOM-'
          || TO_CHAR (
                TO_DATE (
                   ADD_MONTHS (TRUNC (TO_DATE (SYSDATE, 'DD/MM/RRRR'), 'RR'),
                               -12),
                   'DD/MM/RRRR'),
                'YYYY')
          || ')'
             report_type_name,
          'MomSKUWiseNtlNumericDistributionLy' report_type_value,
          'MomSKUWiseNtlNumericDistributionLy' report_name,
          28 slno
     FROM DUAL
   UNION ALL
   SELECT    'Category Wise Numeric Dist (MOM-'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')
          || ')'
             report_type_name,
          'MomCategoryWiseNumericDistribution' report_type_value,
          'MomCategoryWiseNumericDistribution' report_name,
          19 slno
     FROM DUAL
   UNION ALL
   SELECT    'Category Wise Numeric Dist (MOM-'
          || TO_CHAR (
                TO_DATE (
                   ADD_MONTHS (TRUNC (TO_DATE (SYSDATE, 'DD/MM/RRRR'), 'RR'),
                               -12),
                   'DD/MM/RRRR'),
                'YYYY')
          || ')'
             report_type_name,
          'MomCategoryWiseNumericDistributionLy' report_type_value,
          'MomCategoryWiseNumericDistributionLy' report_name,
          27 slno
     FROM DUAL
   UNION ALL
   SELECT 'Invoice Wise Trade Program Calculation' report_type_name,
          'InvoiceWiseTradeProgramCalculation' report_type_value,
          'InvoiceWiseTradeProgramCalculation' report_name,
          20 slno
     FROM DUAL
   UNION ALL
   SELECT    'Product Wise National Numeric Dist( MOM-'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')
          || ')'
             report_type_name,
          'MomProductWiseNtlNumericDistribution' report_type_value,
          'MomProductWiseNtlNumericDistribution' report_name,
          21 slno
     FROM DUAL
   UNION ALL
   SELECT    'Product Wise National Numeric Dist( MOM-'
          || TO_CHAR (
                TO_DATE (
                   ADD_MONTHS (TRUNC (TO_DATE (SYSDATE, 'DD/MM/RRRR'), 'RR'),
                               -12),
                   'DD/MM/RRRR'),
                'YYYY')
          || ')'
             report_type_name,
          'MomProductWiseNtlNumericDistributionLy' report_type_value,
          'MomProductWiseNtlNumericDistribution' report_name,
          25 slno
     FROM DUAL
   UNION ALL
   SELECT    'Location Wise Product Numeric Dist( MOM-'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')
          || ')'
             report_type_name,
          'MomLocationWiseProductNumericDist' report_type_value,
          'MomLocationWiseProductNumericDist' report_name,
          22 slno
     FROM DUAL
   UNION ALL
   SELECT    'Location Wise Product Numeric Dist( MOM-'
          || TO_CHAR (
                TO_DATE (
                   ADD_MONTHS (TRUNC (TO_DATE (SYSDATE, 'DD/MM/RRRR'), 'RR'),
                               -12),
                   'DD/MM/RRRR'),
                'YYYY')
          || ')'
             report_type_name,
          'MomLocationWiseProductNumericDistLy' report_type_value,
          'MomLocationWiseProductNumericDist' report_name,
          26 slno
     FROM DUAL
   UNION ALL
   SELECT    'Retailer Ims ( MOM-'
          || TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')
          || ')'
             report_type_name,
          'MomRetailerImsCy' report_type_value,
          'MomRetailerImsCy' report_name,
          23 slno
     FROM DUAL
   UNION ALL
   SELECT    'Retailer Ims ( MOM-'
          || TO_CHAR (
                TO_DATE (
                   ADD_MONTHS (TRUNC (TO_DATE (SYSDATE, 'DD/MM/RRRR'), 'RR'),
                               -12),
                   'DD/MM/RRRR'),
                'YYYY')
          || ')'
             report_type_name,
          'MomRetailerImsLy' report_type_value,
          'MomRetailerImsLy' report_name,
          24 slno
     FROM DUAL
   UNION ALL
   SELECT 'Customer Wise Trade Program Calculation' report_type_name,
          'CustomerWiseTradeProgramCalculation' report_type_value,
          'CustomerWiseTradeProgramCalculation' report_name,
          30 slno
     FROM DUAL
   UNION ALL
   SELECT    'MOM Retail Product Trend ('
          || (TO_CHAR (TO_NUMBER (TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')) - 1))
          || ')'
             report_type_name,
          'MomRetailProductTrendLy' report_type_value,
          'MomRetailProductTrendLy' report_name,
          31 slno
     FROM DUAL
   UNION ALL
   SELECT    'Trade Program Retailer Sales Trend ('
          || (TO_CHAR (TO_NUMBER (TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')) - 0))
          || ')'
             report_type_name,
          'TradeProgramRetailerSalesTrendCy' report_type_value,
          'TradeProgramRetailerSalesTrendCy' report_name,
          32 slno
     FROM DUAL
   UNION ALL
   SELECT    'Trade Program Retailer Sales Trend ('
          || (TO_CHAR (TO_NUMBER (TO_CHAR (TRUNC (SYSDATE) - 1, 'YYYY')) - 1))
          || ')'
             report_type_name,
          'TradeProgramRetailerSalesTrendLy' report_type_value,
          'TradeProgramRetailerSalesTrendLy' report_name,
          33 slno
     FROM DUAL
     

     
     
        UNION ALL
   SELECT    'FSO Wise First and Last Invoice (Relation)' report_type_name,
          'FSOWiseFirstandLastInvoiceRel' report_type_value,
          'FSO Wise First and Last Invoice (Relation)' report_name,
          34 slno
     FROM DUAL
     
     
             UNION ALL
   SELECT    'FSO Wise First and Last Invoice' report_type_name,
          'FSOWiseFirstandLastInvoiceAll' report_type_value,
          'FSO Wise First and Last Invoice' report_name,
          35 slno
     FROM DUAL
     
   ORDER BY slno;


CREATE OR REPLACE FORCE VIEW VW_RET_RETURN_BONUS
(RET_RECV_BNS_SLNO, RET_RECV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 BONUS_QTY, BONUS_VALUE, ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, 
 UPDATED_BY, UPDATED_DATE, UPDATED_TERMINAL, CUSTOMER_CODE)
AS 
SELECT RET_RECV_BNS_SLNO,
          RET_RECV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          BONUS_QTY,
          BONUS_VALUE,
          ENTERED_BY,
          ENTERED_DATE,
          ENTERED_TERMINAL,
          UPDATED_BY,
          UPDATED_DATE,
          UPDATED_TERMINAL,
          CUSTOMER_CODE
     FROM MV_RET_RETURN_BONUS
   UNION ALL
   SELECT RET_RECV_BNS_SLNO,
          RET_RECV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          BONUS_QTY,
          BONUS_VALUE,
          ENTERED_BY,
          ENTERED_DATE,
          ENTERED_TERMINAL,
          UPDATED_BY,
          UPDATED_DATE,
          UPDATED_TERMINAL,
          CUSTOMER_CODE
     FROM MV_RET_RETURN_BONUS_ARC;


CREATE OR REPLACE FORCE VIEW VW_RET_RETURN_DTL
(RET_RECV_DTL_SLNO, RET_RECV_MST_SLNO, PRODUCT_CODE, TRADE_PRICE, ISSUED_QTY, 
 RETURN_QTY, CUST_DISCOUNT_VAL, CUST_BONUS_DISCOUNT, ADJUSTMENT_VAL, RETURN_VALUE, 
 BONUS_PRICE_DISCOUNT, INVOICE_NO, RETURN_TYPE)
AS 
SELECT RET_RECV_DTL_SLNO,
          RET_RECV_MST_SLNO,
          PRODUCT_CODE,
          TRADE_PRICE,
          ISSUED_QTY,
          RETURN_QTY,
          CUST_DISCOUNT_VAL,
          CUST_BONUS_DISCOUNT,
          ADJUSTMENT_VAL,
          RETURN_VALUE,
          BONUS_PRICE_DISCOUNT,
          INVOICE_NO,
          RETURN_TYPE
     FROM MV_RET_RETURN_DTL
   UNION ALL
   SELECT RET_RECV_DTL_SLNO,
          RET_RECV_MST_SLNO,
          PRODUCT_CODE,
          TRADE_PRICE,
          ISSUED_QTY,
          RETURN_QTY,
          CUST_DISCOUNT_VAL,
          CUST_BONUS_DISCOUNT,
          ADJUSTMENT_VAL,
          RETURN_VALUE,
          BONUS_PRICE_DISCOUNT,
          INVOICE_NO,
          RETURN_TYPE
     FROM MV_RET_RETURN_DTL_ARC;


CREATE OR REPLACE FORCE VIEW VW_RET_RETURN_ISSUE
(RET_RECV_ISS_SLNO, RET_RECV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 RECEIVED_QTY, RECEIVED_VALUE, ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, 
 UPDATED_BY, UPDATED_DATE, UPDATED_TERMINAL, CUSTOMER_CODE)
AS 
SELECT RET_RECV_ISS_SLNO,
          RET_RECV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          RECEIVED_QTY,
          RECEIVED_VALUE,
          ENTERED_BY,
          ENTERED_DATE,
          ENTERED_TERMINAL,
          UPDATED_BY,
          UPDATED_DATE,
          UPDATED_TERMINAL,
          CUSTOMER_CODE
     FROM MV_RET_RETURN_ISSUE
   UNION ALL
   SELECT RET_RECV_ISS_SLNO,
          RET_RECV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          RECEIVED_QTY,
          RECEIVED_VALUE,
          ENTERED_BY,
          ENTERED_DATE,
          ENTERED_TERMINAL,
          UPDATED_BY,
          UPDATED_DATE,
          UPDATED_TERMINAL,
          CUSTOMER_CODE
     FROM MV_RET_RETURN_ISSUE_ARC;


CREATE OR REPLACE FORCE VIEW VW_RET_RETURN_MST
(RET_RECV_MST_SLNO, CUSTOMER_CODE, RETAILER_CODE, RETURN_DATE, INVOICE_NO, 
 RETURN_TYPE, NET_RETURN_VAL, TDS_VAL, ADJUSTMENT_VAL, RETURN_STATUS, 
 RETURN_BNS_DISC, RETURN_SLAB_AMOUNT, SPECIAL_BONUS_DISC, RETURN_VALUE, INV_TYPE_CODE, 
 INVOICE_DATE, EMPLOYEE_CODE, RETURN_DATETIME, MARKET_CODE, ROUTE_CODE)
AS 
SELECT RET_RECV_MST_SLNO,
          CUSTOMER_CODE,
          RETAILER_CODE,
          RETURN_DATE,
          INVOICE_NO,
          RETURN_TYPE,
          NET_RETURN_VAL,
          TDS_VAL,
          ADJUSTMENT_VAL,
          RETURN_STATUS,
          RETURN_BNS_DISC,
          RETURN_SLAB_AMOUNT,
          SPECIAL_BONUS_DISC,
          RETURN_VALUE,
          INV_TYPE_CODE,
          INVOICE_DATE,
          EMPLOYEE_CODE,
          RETURN_DATETIME,
          MARKET_CODE,
          ROUTE_CODE
     FROM MV_RET_RETURN_MST
   UNION ALL
   SELECT RET_RECV_MST_SLNO,
          CUSTOMER_CODE,
          RETAILER_CODE,
          RETURN_DATE,
          INVOICE_NO,
          RETURN_TYPE,
          NET_RETURN_VAL,
          TDS_VAL,
          ADJUSTMENT_VAL,
          RETURN_STATUS,
          RETURN_BNS_DISC,
          RETURN_SLAB_AMOUNT,
          SPECIAL_BONUS_DISC,
          RETURN_VALUE,
          INV_TYPE_CODE,
          INVOICE_DATE,
          EMPLOYEE_CODE,
          RETURN_DATETIME,
          MARKET_CODE,
          ROUTE_CODE
     FROM MV_RET_RETURN_MST_ARC;


CREATE OR REPLACE FORCE VIEW VW_RET_RETURN_SPEC_BONUS
(RET_RECV_SPEC_BNS_SLNO, RET_RECV_MST_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 SPEC_BONUS_QTY, SPEC_BONUS_VAL)
AS 
SELECT RET_RECV_SPEC_BNS_SLNO,
          RET_RECV_MST_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          SPEC_BONUS_QTY,
          SPEC_BONUS_VAL
     FROM MV_RET_RETURN_SPEC_BONUS
   UNION ALL
   SELECT RET_RECV_SPEC_BNS_SLNO,
          RET_RECV_MST_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          SPEC_BONUS_QTY,
          SPEC_BONUS_VAL
     FROM MV_RET_RETURN_SPEC_BONUS_ARC;


CREATE OR REPLACE FORCE VIEW VW_RET_RETURN_SPEC_DISC
(RET_RECV_SPEC_DISC_SLNO, RET_RECV_MST_SLNO, SPECIAL_BONUS_DISC)
AS 
SELECT RET_RECV_SPEC_DISC_SLNO, RET_RECV_MST_SLNO, SPECIAL_BONUS_DISC
     FROM MV_RET_RETURN_SPEC_DISC
   UNION ALL
   SELECT RET_RECV_SPEC_DISC_SLNO, RET_RECV_MST_SLNO, SPECIAL_BONUS_DISC
     FROM MV_RET_RETURN_SPEC_DISC_ARC;


CREATE OR REPLACE FORCE VIEW VW_RET_RETURN_TRADE
(RET_RECV_TRD_SLNO, RET_RECV_DTL_SLNO, PRODUCT_CODE, PRODUCT_BATCH_NO, LOT_NO, 
 TRADE_QTY, TRADE_VALUE, ENTERED_BY, ENTERED_DATE, ENTERED_TERMINAL, 
 UPDATED_BY, UPDATED_DATE, UPDATED_TERMINAL, CUSTOMER_CODE)
AS 
SELECT RET_RECV_TRD_SLNO,
          RET_RECV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          TRADE_QTY,
          TRADE_VALUE,
          ENTERED_BY,
          ENTERED_DATE,
          ENTERED_TERMINAL,
          UPDATED_BY,
          UPDATED_DATE,
          UPDATED_TERMINAL,
          CUSTOMER_CODE
     FROM MV_RET_RETURN_TRADE
   UNION ALL
   SELECT RET_RECV_TRD_SLNO,
          RET_RECV_DTL_SLNO,
          PRODUCT_CODE,
          PRODUCT_BATCH_NO,
          LOT_NO,
          TRADE_QTY,
          TRADE_VALUE,
          ENTERED_BY,
          ENTERED_DATE,
          ENTERED_TERMINAL,
          UPDATED_BY,
          UPDATED_DATE,
          UPDATED_TERMINAL,
          CUSTOMER_CODE
     FROM MV_RET_RETURN_TRADE_ARC;


CREATE OR REPLACE FORCE VIEW VW_SCHEDULER_JOB_RUN_DETAILS
(LOG_ID, JOB_NAME, RUN_DATE, RUN_DURATION, STATUS)
AS 
select log_id,
       job_name,
       --to_char(log_date,'dd/mm/rr hh:mi:ss AM') log_date,              
       to_char(actual_start_date,'dd/mm/rr hh:mi:ss AM') run_date,
       run_duration,
       status
from all_scheduler_job_run_details a
where log_date = ( select max(log_date) from all_scheduler_job_run_details where job_name=a.job_name)
and   trunc(log_date) = trunc(sysdate)
order by 
          log_id asc
         --log_date asc
         --actual_start_date asc
;


CREATE OR REPLACE FORCE VIEW VW_USER_MENUD_DTL
(USER_ID, USER_NAME, ROLE_ID, ROLE_NAME, MENU_HEAD_NAME, 
 MENU_ID, MENU_NAME)
AS 
SELECT  F.USER_ID,
        G.USER_NAME,
        B.ROLE_ID,
        B.ROLE_NAME,
        H.MENU_NAME MENU_HEAD_NAME,
        E.MENU_ID,
        E.MENU_NAME
FROM    SC_ROLE_MENU_CONF A,
        SC_ROLE_INFO B,
        SC_ROLE_MENU_CONF C,
        SC_MENU_CONF D,
        SC_MENU_INFO E,
        SC_ROLE_USER_CONF F,
        SC_USER_LOGIN G,
        SC_MENU_INFO H
WHERE A.ROLE_ID=B.ROLE_ID
AND   A.ID=C.ID
AND   A.MC_ID=D.ID
AND   D.CHILD_ID=E.MENU_ID
AND   B.ROLE_ID=F.ROLE_ID
AND   F.USER_ID=G.USER_ID
AND   D.PARENT_ID=H.MENU_ID
AND   E.MENU_ID NOT IN (SELECT DISTINCT PARENT_ID FROM SC_MENU_CONF)
order  by F.USER_ID,B.ROLE_ID,D.PARENT_ID,D.CHILD_SEQ;


CREATE OR REPLACE FORCE VIEW VW_USER_ROLE_MENU_DTL
(USER_ID, USER_NAME, EMPLOYEE_ID, EMPLOYEE_CODE, EMPLOYEE_NAME, 
 ROLE_ID, ROLE_NAME, MENU_ID, MENU_NAME, MENU_DISPLAY_NAME, 
 DOWNLOAD_STATUS)
AS 
SELECT A.USER_ID,
          A.USER_NAME,
          A.EMPLOYEE_ID,
          C.EMPLOYEE_CODE,
          C.EMPLOYEE_NAME,
          B.ROLE_ID,
          G.ROLE_NAME,
          F.MENU_ID,
          F.MENU_NAME,
          F.MENU_DISPLAY_NAME,
          FN_DOWNLOAD_STATUS (A.USER_ID, F.MENU_ID) DOWNLOAD_STATUS
     FROM SC_USER_LOGIN A,
          SC_ROLE_USER_CONF B,
          SC_EMPLOYEE_INFO C,
          SC_ROLE_MENU_CONF D,
          SC_MENU_CONF E,
          SC_MENU_INFO F,
          SC_ROLE_INFO G
    WHERE     A.USER_ID = B.USER_ID
          AND A.EMPLOYEE_ID = C.EMPLOYEE_ID
          AND B.ROLE_ID = D.ROLE_ID
          AND D.MC_ID = E.ID
          AND E.CHILD_ID = F.MENU_ID
          AND B.ROLE_ID = G.ROLE_ID
          AND F.MENU_ID NOT IN (SELECT DISTINCT PARENT_ID FROM SC_MENU_CONF)
          AND F.MENU_ID NOT IN (SELECT DISTINCT CHILD_ID FROM SC_MENU_CONF where PARENT_ID=101);


CREATE OR REPLACE TRIGGER TRI_TRADE_PROG_PRODUCT_TYPE
  AFTER INSERT OR UPDATE OR DELETE ON USER_PRODUCT_TYPE
  FOR EACH ROW
DECLARE
     
  vTPRODUCT_DTL_ID NUMBER:=0;

BEGIN   
     
   IF INSERTING THEN 
    
    
        IF  :NEW.TYPE_NAME='BASE_PRODUCT' THEN
          
          DECLARE
          
          
          CURSOR C2 IS 
                   SELECT  A.PRODUCT_CODE,
                           A.PRODUCT_NAME,
                           A.PACK_SIZE,
                           A.BASE_PRODUCT_CODE PRODUCT_TYPE_CODE,
                           B.BASE_PRODUCT_NAME PRODUCT_TYPE_DESC
                   FROM    MV_PRODUCT_INFO A, MV_BASE_PRODUCT_INFO B 
                   WHERE   A.BASE_PRODUCT_CODE=B.BASE_PRODUCT_CODE
                   AND     A.STATUS='A'
                   AND     A.BASE_PRODUCT_CODE=:NEW.PRODUCT_TYPE_CODE
                   ORDER BY A.PRODUCT_CODE;
                   
                         
              BEGIN
                                                
                        
                        FOR R2 IN C2
                        LOOP
                          
                            SELECT NVL(MAX(PRODUCT_DTL_ID),0)+1 
                            INTO vTPRODUCT_DTL_ID
                            FROM USER_PRODUCT_DTL;
                        
                            INSERT INTO USER_PRODUCT_DTL( PRODUCT_DTL_ID, 
                                                          PRODUCT_TYPE_ID, 
                                                          USER_ID, 
                                                          PRODUCT_CODE,
                                                          PRODUCT_NAME,
                                                          PACK_SIZE,
                                                          PRODUCT_TYPE_CODE, 
                                                          PRODUCT_TYPE_DESC,
                                                          TYPE_NAME
                                                         )
                                         
                                                   VALUES(
                                                            vTPRODUCT_DTL_ID,
                                                            :NEW.PRODUCT_TYPE_ID,
                                                            :NEW.USER_ID,                                                            
                                                            R2.PRODUCT_CODE, 
                                                            R2.PRODUCT_NAME, 
                                                            R2.PACK_SIZE,                                                                                                                        
                                                            R2.PRODUCT_TYPE_CODE,
                                                            R2.PRODUCT_TYPE_DESC,
                                                            :NEW.TYPE_NAME                                                     
                                                           );   
                        END LOOP;
        
              END;
          


    
        ELSIF  :NEW.TYPE_NAME='BRAND' THEN
          
          DECLARE

          
          CURSOR C2 IS 
                   SELECT  A.PRODUCT_CODE,
                           A.PRODUCT_NAME,
                           A.PACK_SIZE,
                           A.BASE_PRODUCT_CODE PRODUCT_TYPE_CODE,
                           B.BASE_PRODUCT_NAME PRODUCT_TYPE_DESC
                   FROM    MV_PRODUCT_INFO A, MV_BASE_PRODUCT_INFO B 
                   WHERE   A.BASE_PRODUCT_CODE=B.BASE_PRODUCT_CODE
                   AND     A.STATUS='A'
                   AND     A.BRAND_CODE=:NEW.PRODUCT_TYPE_CODE
                   ORDER BY A.PRODUCT_CODE;
                   
                         
              BEGIN
                                                
                        
                        FOR R2 IN C2
                        LOOP
                          
                            SELECT NVL(MAX(PRODUCT_DTL_ID),0)+1 
                            INTO vTPRODUCT_DTL_ID
                            FROM USER_PRODUCT_DTL;
                        
                            INSERT INTO USER_PRODUCT_DTL( PRODUCT_DTL_ID, 
                                                          PRODUCT_TYPE_ID, 
                                                          USER_ID, 
                                                          PRODUCT_CODE,
                                                          PRODUCT_NAME,
                                                          PACK_SIZE,
                                                          PRODUCT_TYPE_CODE, 
                                                          PRODUCT_TYPE_DESC,
                                                          TYPE_NAME
                                                         )
                                         
                                                   VALUES(
                                                            vTPRODUCT_DTL_ID,
                                                            :NEW.PRODUCT_TYPE_ID,
                                                            :NEW.USER_ID,                                                            
                                                            R2.PRODUCT_CODE, 
                                                            R2.PRODUCT_NAME, 
                                                            R2.PACK_SIZE,                                                                                                                        
                                                            R2.PRODUCT_TYPE_CODE,
                                                            R2.PRODUCT_TYPE_DESC,
                                                            :NEW.TYPE_NAME                                                     
                                                           );   
                        END LOOP;
        
              END;
          
          
          
          
          
          
    
        ELSIF  :NEW.TYPE_NAME='CATEGORY' THEN
          
          DECLARE


          
          CURSOR C2 IS 
                   SELECT  A.PRODUCT_CODE,
                           A.PRODUCT_NAME,
                           A.PACK_SIZE,
                           A.BASE_PRODUCT_CODE PRODUCT_TYPE_CODE,
                           B.BASE_PRODUCT_NAME PRODUCT_TYPE_DESC
                   FROM    MV_PRODUCT_INFO A, MV_BASE_PRODUCT_INFO B 
                   WHERE   A.BASE_PRODUCT_CODE=B.BASE_PRODUCT_CODE
                   AND     A.STATUS='A'
                   AND     A.PRODUCT_CATEGORY=:NEW.PRODUCT_TYPE_CODE
                   ORDER BY A.PRODUCT_CODE;
                   
                         
              BEGIN
                                                
                        
                        FOR R2 IN C2
                        LOOP
                          
                            SELECT NVL(MAX(PRODUCT_DTL_ID),0)+1 
                            INTO vTPRODUCT_DTL_ID
                            FROM USER_PRODUCT_DTL;
                        
                            INSERT INTO USER_PRODUCT_DTL( PRODUCT_DTL_ID, 
                                                          PRODUCT_TYPE_ID, 
                                                          USER_ID, 
                                                          PRODUCT_CODE,
                                                          PRODUCT_NAME,
                                                          PACK_SIZE,
                                                          PRODUCT_TYPE_CODE, 
                                                          PRODUCT_TYPE_DESC,
                                                          TYPE_NAME
                                                         )
                                         
                                                   VALUES(
                                                            vTPRODUCT_DTL_ID,
                                                            :NEW.PRODUCT_TYPE_ID,
                                                            :NEW.USER_ID,                                                            
                                                            R2.PRODUCT_CODE, 
                                                            R2.PRODUCT_NAME, 
                                                            R2.PACK_SIZE,                                                                                                                        
                                                            R2.PRODUCT_TYPE_CODE,
                                                            R2.PRODUCT_TYPE_DESC,
                                                            :NEW.TYPE_NAME                                                     
                                                           );   
                        END LOOP;
        
              END;
          
          
        END IF;           
          
          
          
          
   END IF;        
        

    
    
    
        
    IF UPDATING THEN 
    
        NULL;
        
    END IF;
    
    
    
        
    IF DELETING THEN 
      
    
      DELETE FROM USER_PRODUCT_DTL WHERE PRODUCT_TYPE_ID=:OLD.PRODUCT_TYPE_ID;
    
    
    END IF;
    
 END;
/


CREATE OR REPLACE TRIGGER TRI_SLNO_GEN
  BEFORE INSERT ON SC_REPORT_ACCESS_INFO
  FOR EACH ROW
BEGIN
  SELECT SEQ_REPORT_ACCESS_INFO.NEXTVAL
  INTO :new.SLNO 
  FROM DUAL;
END;
/


BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_AREA_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_AREA_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_AREA_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_AREA_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_AREA_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_AREA_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_AREA_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_AREA_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_AREA_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_AREA_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_AREA_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_BASE_PRODUCT_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_BASE_PRODUCT_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BASE_PRODUCT_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BASE_PRODUCT_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BASE_PRODUCT_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BASE_PRODUCT_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BASE_PRODUCT_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BASE_PRODUCT_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BASE_PRODUCT_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BASE_PRODUCT_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_BASE_PRODUCT_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_BELT_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_BELT_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BELT_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BELT_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BELT_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BELT_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BELT_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BELT_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BELT_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BELT_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_BELT_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_BRAND_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_BRAND_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BRAND_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BRAND_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BRAND_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BRAND_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BRAND_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BRAND_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BRAND_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BRAND_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_BRAND_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_BUDGETED_NET_IMS_TARGET'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_BUDGETED_NET_IMS_TARGET'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUDGETED_NET_IMS_TARGET'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUDGETED_NET_IMS_TARGET'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BUDGETED_NET_IMS_TARGET'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BUDGETED_NET_IMS_TARGET'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUDGETED_NET_IMS_TARGET'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUDGETED_NET_IMS_TARGET'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BUDGETED_NET_IMS_TARGET'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUDGETED_NET_IMS_TARGET'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_BUDGETED_NET_IMS_TARGET');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_BUD_NET_LIFTING_TARGET'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_BUDGETED_NET_LIFTING_TARGET'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUD_NET_LIFTING_TARGET'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUD_NET_LIFTING_TARGET'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BUD_NET_LIFTING_TARGET'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BUD_NET_LIFTING_TARGET'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUD_NET_LIFTING_TARGET'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUD_NET_LIFTING_TARGET'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_BUD_NET_LIFTING_TARGET'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_BUD_NET_LIFTING_TARGET'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_BUD_NET_LIFTING_TARGET');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_CATEGORY_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_CATEGORY_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CATEGORY_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CATEGORY_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CATEGORY_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CATEGORY_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CATEGORY_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CATEGORY_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CATEGORY_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CATEGORY_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_CATEGORY_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_CAT_NM_SALES_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:35:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_CAT_NUMERIC_SALES_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.35:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CAT_NM_SALES_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CAT_NM_SALES_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CAT_NM_SALES_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_CAT_NM_SALES_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_CAT_NM_SALES_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:40:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_CAT_NUMERIC_SALES_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.40:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CAT_NM_SALES_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CAT_NM_SALES_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CAT_NM_SALES_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CAT_NM_SALES_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_CAT_NM_SALES_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_CUSTOMER_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_CUSTOMER_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CUSTOMER_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CUSTOMER_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CUSTOMER_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_CUSTOMER_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_CUSTOMER_MKT_DTL'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''mv_customer_mkt_dtl'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_DTL'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_DTL'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CUSTOMER_MKT_DTL'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CUSTOMER_MKT_DTL'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_DTL'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_DTL'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CUSTOMER_MKT_DTL'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_DTL'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_CUSTOMER_MKT_DTL');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_CUSTOMER_MKT_MST'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''mv_customer_mkt_mst'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_MST'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_MST'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CUSTOMER_MKT_MST'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CUSTOMER_MKT_MST'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_MST'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_MST'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_CUSTOMER_MKT_MST'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_CUSTOMER_MKT_MST'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_CUSTOMER_MKT_MST');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DISPLAY_PROG_PARTI'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 06:10:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DISPLAY_PROG_PARTICIPATION'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.10:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DISPLAY_PROG_PARTI'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DISPLAY_PROG_PARTI'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DISPLAY_PROG_PARTI'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DISPLAY_PROG_PARTI'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DISPLAY_PROG_PARTI'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DISPLAY_PROG_PARTI'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DISPLAY_PROG_PARTI'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DISPLAY_PROG_PARTI'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DISPLAY_PROG_PARTI');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_ACH_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 05:40:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DISTRIBUTOR_ACH_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 05.40:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_ACH_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_ACH_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_ACH_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_ACH_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_ACH_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 05:45:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DISTRIBUTOR_ACH_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 05.45:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_ACH_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_ACH_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_ACH_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_ACH_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_ACH_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_BONUS_ADJ_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 06:15:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_BONUS_ADJUST_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.15:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_BONUS_ADJ_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_BONUS_ADJ_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 06:20:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_BONUS_ADJUST_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.20:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_BONUS_ADJ_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_BONUS_ADJ_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:16:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_PRODUCT_IMS_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.16:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_PRODUCT_IMS_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:17:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_PRODUCT_IMS_LAST_30DAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.17:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_PRODUCT_IMS_L30DAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:18:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_PRODUCT_IMS_LAST_7DAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.18:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_PRODUCT_IMS_L7DAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 02:19:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_PRODUCT_IMS_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.19:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_PRODUCT_IMS_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_PRODUCT_IMS_YDAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:20:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_PRODUCT_IMS_YESTERDAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.20:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_YDAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_YDAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_YDAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_YDAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_YDAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_YDAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_YDAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_PRODUCT_IMS_YDAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_PRODUCT_IMS_YDAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_REPLACE_STK_TRANS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 05:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_REPLACE_STK_TRANS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 05.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_REPLACE_STK_TRANS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_REPLACE_STK_TRANS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_REPLACE_STK_TRANS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_REPLACE_STK_TRANS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_REPLACE_STK_TRANS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_REPLACE_STK_TRANS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_REPLACE_STK_TRANS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_REPLACE_STK_TRANS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_REPLACE_STK_TRANS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_STOCK_CONSUMPTION'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 05:25:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_STOCK_CONSUMPTION'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 05.25:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_STOCK_CONSUMPTION'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_STOCK_CONSUMPTION'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_STOCK_CONSUMPTION'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_STOCK_CONSUMPTION'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_STOCK_CONSUMPTION'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_STOCK_CONSUMPTION'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_STOCK_CONSUMPTION'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_STOCK_CONSUMPTION'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_STOCK_CONSUMPTION');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIST_WISE_PIPELINE_STK'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIST_WISE_PIPELINE_STK'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_WISE_PIPELINE_STK'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_WISE_PIPELINE_STK'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_WISE_PIPELINE_STK'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_WISE_PIPELINE_STK'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_WISE_PIPELINE_STK'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_WISE_PIPELINE_STK'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIST_WISE_PIPELINE_STK'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIST_WISE_PIPELINE_STK'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIST_WISE_PIPELINE_STK');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIVISION_MARKET_REL'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:03:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIVISION_MARKET_RELATION'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.03:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIVISION_MARKET_REL'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIVISION_MARKET_REL'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIVISION_MARKET_REL'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIVISION_MARKET_REL'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIVISION_MARKET_REL'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIVISION_MARKET_REL'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIVISION_MARKET_REL'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIVISION_MARKET_REL'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIVISION_MARKET_REL');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIV_CUST_RELATION'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:25:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIVISION_CUSTOMER_RELATION'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.25:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_CUST_RELATION'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_CUST_RELATION'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_CUST_RELATION'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_CUST_RELATION'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_CUST_RELATION'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_CUST_RELATION'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_CUST_RELATION'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_CUST_RELATION'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIV_CUST_RELATION');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIV_MARKET_IMS_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:46:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIVISION_MARKET_IMS_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.46:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MARKET_IMS_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MARKET_IMS_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MARKET_IMS_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIV_MARKET_IMS_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIV_MARKET_IMS_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 02:47:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIVISION_MARKET_IMS_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.47:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MARKET_IMS_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MARKET_IMS_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MARKET_IMS_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MARKET_IMS_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIV_MARKET_IMS_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIV_MKT_IMS_L30DAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:48:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIVISION_MKT_IMS_LAST_30DAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.48:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L30DAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L30DAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MKT_IMS_L30DAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MKT_IMS_L30DAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L30DAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L30DAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MKT_IMS_L30DAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L30DAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIV_MKT_IMS_L30DAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIV_MKT_IMS_L7DAYS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:49:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIVISION_MKT_IMS_LAST_7DAYS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.49:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L7DAYS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L7DAYS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MKT_IMS_L7DAYS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MKT_IMS_L7DAYS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L7DAYS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L7DAYS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MKT_IMS_L7DAYS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_L7DAYS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIV_MKT_IMS_L7DAYS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIV_MKT_IMS_YDAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIVISION_MKT_IMS_YESTERDAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_YDAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_YDAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MKT_IMS_YDAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MKT_IMS_YDAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_YDAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_YDAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_MKT_IMS_YDAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_MKT_IMS_YDAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIV_MKT_IMS_YDAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DIV_RET_RELATION'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:25:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DIVISION_RETAILER_RELATION'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.25:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_RET_RELATION'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_RET_RELATION'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_RET_RELATION'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_RET_RELATION'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_RET_RELATION'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_RET_RELATION'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DIV_RET_RELATION'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DIV_RET_RELATION'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DIV_RET_RELATION');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_DSM_TSO_SALES_REGISTR'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 03:35:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_DSM_TSO_WISE_SALES_REGISTR'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.35:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DSM_TSO_SALES_REGISTR'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DSM_TSO_SALES_REGISTR'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DSM_TSO_SALES_REGISTR'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DSM_TSO_SALES_REGISTR'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DSM_TSO_SALES_REGISTR'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DSM_TSO_SALES_REGISTR'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_DSM_TSO_SALES_REGISTR'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_DSM_TSO_SALES_REGISTR'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_DSM_TSO_SALES_REGISTR');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_EMPLOYEE_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_EMPLOYEE_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_EMPLOYEE_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_EMPLOYEE_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_EMPLOYEE_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_EMPLOYEE_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_EMPLOYEE_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_EMPLOYEE_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_EMPLOYEE_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_EMPLOYEE_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_EMPLOYEE_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:05:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_BONUS_SLAB_DTL_V1'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_BNS_SLAB_DTL_V1');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_BONUS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:12:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_BONUS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.12:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BONUS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BONUS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_BONUS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_BONUS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BONUS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BONUS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_BONUS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_BONUS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_BONUS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_DISPLAY_BONUS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:12:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_DISPLAY_BONUS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.12:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DISPLAY_BONUS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DISPLAY_BONUS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DISPLAY_BONUS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DISPLAY_BONUS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DISPLAY_BONUS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DISPLAY_BONUS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DISPLAY_BONUS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DISPLAY_BONUS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_DISPLAY_BONUS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_DTL'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:05:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_DTL'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.05:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_DTL');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_DTL_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:00:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_DTL_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.00:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_DTL_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 01:52:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_DTL_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.52:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_DTL_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_DTL_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 01:58:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_DTL_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.58:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_DTL_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_DTL_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_GIFT_DETAILS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_GIFT_DETAILS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_GIFT_DETAILS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_GIFT_DETAILS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_GIFT_DETAILS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_GIFT_DETAILS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_GIFT_DETAILS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_GIFT_DETAILS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_GIFT_DETAILS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_GIFT_DETAILS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_GIFT_DETAILS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_ISSUE'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:07:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_ISSUE'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.07:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_ISSUE'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_ISSUE'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_ISSUE'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_ISSUE');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_ISSUE_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:05:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_ISSUE_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.05:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_ISSUE_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_ISSUE_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_ISSUE_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_ISSUE_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_MST'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:03:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_MST'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.03:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_MST');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_MST_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:10:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_MST_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.10:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_MST_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 01:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_MST_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_MST_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_MST_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 01:57:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_MST_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.57:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_MST_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_MST_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_PROD_IMS_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 06:40:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_PROD_IMS_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.40:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_PROD_IMS_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_PROD_IMS_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 06:45:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_PROD_IMS_PMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.45:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_PROD_IMS_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_PROD_IMS_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_SPEC_BONUS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:16:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_SPEC_BONUS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.16:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_SPEC_BONUS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_SPEC_BONUS_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:15:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_SPEC_BONUS_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.15:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_SPEC_BONUS_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_TRADE'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:15:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_TRADE'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.15:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_TRADE'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_TRADE'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_TRADE'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_TRADE');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_TRADE_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:20:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_TRADE_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.20:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_TRADE_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_TRADE_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_TRADE_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INVOICE_TRADE_BONUS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_TRADE_BONUS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_BONUS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_BONUS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_TRADE_BONUS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_TRADE_BONUS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_BONUS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_BONUS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INVOICE_TRADE_BONUS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INVOICE_TRADE_BONUS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INVOICE_TRADE_BONUS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INV_SPEC_PRICE_DISC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:17:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INV_SPEC_PRICE_DISC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.17:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_INV_SPEC_PRICE_DISC');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_INV_SPEC_PRICE_DISC_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 06:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INV_SPEC_PRICE_DISC_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_INV_SPEC_PRICE_DISC_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MARKET_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MARKET_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MARKET_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MARKET_PROD_IMS_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:25:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MARKET_PROD_IMS_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.25:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MARKET_PROD_IMS_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MARKET_PROD_IMS_L30DAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:26:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MARKET_PROD_IMS_LAST_30DAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.26:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L30DAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L30DAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L30DAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L30DAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L30DAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L30DAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L30DAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L30DAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MARKET_PROD_IMS_L30DAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MARKET_PROD_IMS_L7DAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:27:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MARKET_PROD_IMS_LAST_7DAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.27:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L7DAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L7DAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L7DAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L7DAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L7DAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L7DAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L7DAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_L7DAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MARKET_PROD_IMS_L7DAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MARKET_PROD_IMS_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 02:28:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MARKET_PROD_IMS_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.28:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MARKET_PROD_IMS_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MARKET_PROD_IMS_YDAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:29:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MARKET_PROD_IMS_YESTERDAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.29:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_YDAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_YDAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_YDAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_YDAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_YDAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_YDAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MARKET_PROD_IMS_YDAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MARKET_PROD_IMS_YDAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MARKET_PROD_IMS_YDAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:45:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_LOC_CAT_NUMERIC_DIST_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.45:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MOM_LOC_CAT_NM_DIST_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_LOC_CAT_NM_DIST_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_LOC_CAT_NUMERIC_DIST_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_CAT_NM_DIST_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:55:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_LOC_PROD_NM_DIST_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.55:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MOM_LOC_PROD_NM_DIST_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_LOC_PROD_NM_DIST_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:58:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_LOC_PROD_NM_DIST_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.58:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_PROD_NM_DIST_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:00:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_LOC_SKU_NUMERIC_DIST_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.00:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MOM_LOC_SKU_NM_DIST_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_LOC_SKU_NM_DIST_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:10:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_LOC_SKU_NUMERIC_DIST_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.10:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_LOC_SKU_NM_DIST_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 05:00:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_NTL_PROD_NU_DIST_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 05.00:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MOM_NTL_PROD_NU_DIST_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_NTL_PROD_NU_DIST_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 05:05:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_NTL_PROD_NU_DIST_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 05.05:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_PROD_NU_DIST_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:20:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_NTL_SKU_NUMERIC_DIST_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.20:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MOM_NTL_SKU_NM_DIST_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_NTL_SKU_NM_DIST_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 04:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_NTL_SKU_NUMERIC_DIST_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 04.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_NTL_SKU_NM_DIST_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_RETAIL_PROD_TND_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:51:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_RETAIL_PRODUCT_TREND_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.51:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MOM_RETAIL_PROD_TND_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MOM_RETAIL_PROD_TND_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 03:10:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MOM_RETAIL_PRODUCT_TREND_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.10:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MOM_RETAIL_PROD_TND_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MONTH_TRADE_RET_IMS_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:53:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MONTH_WISE_TRADE_RET_IMS_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.53:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MONTH_TRADE_RET_IMS_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MONTH_TRADE_RET_IMS_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 06:15:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MONTH_WISE_TRADE_RET_IMS_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.15:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MONTH_TRADE_RET_IMS_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 06:20:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MTD_IMS_ACV_GROWTH_DASH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.20:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MTD_IMS_ACV_GROWTH_DASH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 06:25:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_MTD_LIFTING_ACV_GROWTH_DASH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.25:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_MTD_LIFT_ACV_GRO_DASH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_MV_INVOICE_BONUS_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 06:55:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_INVOICE_BONUS_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.55:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MV_INVOICE_BONUS_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MV_INVOICE_BONUS_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MV_INVOICE_BONUS_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MV_INVOICE_BONUS_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MV_INVOICE_BONUS_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MV_INVOICE_BONUS_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_MV_INVOICE_BONUS_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_MV_INVOICE_BONUS_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_NATIONAL_PRODUCT_SALES'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 06:00:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_NATIONAL_PRODUCT_SALES'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.00:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_NATIONAL_PRODUCT_SALES'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_NATIONAL_PRODUCT_SALES'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_NATIONAL_PRODUCT_SALES'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_NATIONAL_PRODUCT_SALES'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_NATIONAL_PRODUCT_SALES'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_NATIONAL_PRODUCT_SALES'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_NATIONAL_PRODUCT_SALES'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_NATIONAL_PRODUCT_SALES'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_NATIONAL_PRODUCT_SALES');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ORDER_DETAILS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 01:45:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ORDER_DETAILS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.45:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DETAILS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DETAILS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_DETAILS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_DETAILS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DETAILS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DETAILS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_DETAILS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DETAILS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ORDER_DETAILS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ORDER_DTL'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:40:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ORDER_DTL'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.40:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_DTL'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_DTL'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_DTL'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ORDER_DTL');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ORDER_DTL_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:25:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ORDER_DTL_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.25:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_DTL_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_DTL_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_DTL_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_DTL_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ORDER_MST'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:35:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ORDER_MST'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.35:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_MST'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_MST'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_MST'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ORDER_MST');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ORDER_MST_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ORDER_MST_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_MST_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_MST_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ORDER_MST_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ORDER_MST_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_PRODUCT_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_PRODUCT_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_PRODUCT_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_PRODUCT_INFORMATION'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_PRODUCT_INFORMATION'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFORMATION'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFORMATION'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_INFORMATION'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_INFORMATION'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFORMATION'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFORMATION'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_INFORMATION'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_INFORMATION'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_PRODUCT_INFORMATION');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_PRODUCT_PRICE'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_PRODUCT_PRICE'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_PRICE'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_PRICE'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_PRICE'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_PRODUCT_PRICE');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_PRODUCT_PRICE_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_PRODUCT_PRICE_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_PRICE_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_PRICE_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_PRODUCT_PRICE_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_PRODUCT_PRICE_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_PRODUCT_PRICE_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETAILER_DETAILS_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 06:05:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETAILER_DETAILS_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.05:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_DETAILS_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_DETAILS_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_DETAILS_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_DETAILS_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_DETAILS_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_DETAILS_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_DETAILS_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_DETAILS_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETAILER_DETAILS_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETAILER_IMS_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:31:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETAILER_IMS_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.31:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETAILER_IMS_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETAILER_IMS_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 03:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETAILER_IMS_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETAILER_IMS_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETAILER_IMS_L30DAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:32:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETAILER_IMS_LAST_30DAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.32:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L30DAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L30DAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_L30DAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_L30DAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L30DAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L30DAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_L30DAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L30DAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETAILER_IMS_L30DAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETAILER_IMS_L7DAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:33:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETAILER_IMS_LAST_7DAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.33:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L7DAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L7DAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_L7DAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_L7DAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L7DAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L7DAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_L7DAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_L7DAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETAILER_IMS_L7DAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETAILER_IMS_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 02:34:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETAILER_IMS_PMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.34:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETAILER_IMS_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETAILER_IMS_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 03:20:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETAILER_IMS_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.20:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETAILER_IMS_YDAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:35:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETAILER_IMS_YESTERDAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.35:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_YDAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_YDAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_YDAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_YDAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_YDAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_YDAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_IMS_YDAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_IMS_YDAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETAILER_IMS_YDAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETAILER_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETAILER_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETAILER_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETAILER_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETAILER_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:06:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETURN_BONUS_SLAB_DTL_V1'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.06:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETURN_BNS_SLAB_DTL_V1');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RETURN_DISC_TRACKING'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RETURN_DISC_TRACKING'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_DISC_TRACKING'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_DISC_TRACKING'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETURN_DISC_TRACKING'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETURN_DISC_TRACKING'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_DISC_TRACKING'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_DISC_TRACKING'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RETURN_DISC_TRACKING'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RETURN_DISC_TRACKING'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RETURN_DISC_TRACKING');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_PROD_IMS_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:11:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_PROD_IMS_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.11:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_PROD_IMS_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_PROD_IMS_L30DAYS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:12:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_PROD_IMS_LAST_30DAYS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.12:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L30DAYS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L30DAYS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_L30DAYS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_L30DAYS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L30DAYS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L30DAYS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_L30DAYS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L30DAYS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_PROD_IMS_L30DAYS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_PROD_IMS_L7DAYS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:13:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_PROD_IMS_LAST_7DAYS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.13:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L7DAYS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L7DAYS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_L7DAYS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_L7DAYS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L7DAYS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L7DAYS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_L7DAYS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_L7DAYS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_PROD_IMS_L7DAYS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_PROD_IMS_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 02:14:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_PROD_IMS_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.14:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_PROD_IMS_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_PROD_IMS_YDAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:15:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_PROD_IMS_YESTERDAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.15:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_YDAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_YDAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_YDAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_YDAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_YDAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_YDAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_PROD_IMS_YDAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_PROD_IMS_YDAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_PROD_IMS_YDAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_BONUS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:28:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_BONUS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.28:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_BONUS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_BONUS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_BONUS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_RETURN_BONUS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_BONUS_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:32:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_BONUS_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.32:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_BONUS_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_BONUS_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_BONUS_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_BONUS_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_DTL'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:21:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_DTL'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.21:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_RETURN_DTL');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_DTL_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:34:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_DTL_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.34:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_DTL_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 01:56:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_DTL_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.56:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_RETURN_DTL_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_DTL_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 01:59:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_DTL_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.59:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_DTL_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_DTL_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_ISSUE'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:24:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_ISSUE'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.24:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_ISSUE'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_ISSUE'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_ISSUE'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_RETURN_ISSUE');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_ISSUE_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:36:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_ISSUE_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.36:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_ISSUE_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_ISSUE_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_ISSUE_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_ISSUE_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_MST'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:18:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_MST'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.18:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_RETURN_MST');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_MST_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:38:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_MST_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.38:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_MST_CY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 01:54:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_MST_CY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.54:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_CY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_CY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST_CY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST_CY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_CY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_CY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST_CY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_CY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_RETURN_MST_CY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_MST_LY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 01:59:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_MST_LY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.59:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_LY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_LY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST_LY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST_LY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_LY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_LY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_MST_LY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_MST_LY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_SPEC_BNS_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:40:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_SPEC_BONUS_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.40:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BNS_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BNS_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BNS_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BNS_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BNS_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BNS_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BNS_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BNS_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_SPEC_BONUS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:33:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_SPEC_BONUS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.33:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BONUS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BONUS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BONUS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BONUS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BONUS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BONUS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BONUS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_BONUS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_RETURN_SPEC_BONUS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_SPEC_DISC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:34:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_SPEC_DISC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.34:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_DISC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_DISC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPEC_DISC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPEC_DISC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_DISC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_DISC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPEC_DISC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPEC_DISC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_RETURN_SPEC_DISC');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_SPE_DISC_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:42:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_SPEC_DISC_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.42:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPE_DISC_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPE_DISC_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPE_DISC_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPE_DISC_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPE_DISC_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPE_DISC_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_SPE_DISC_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_SPE_DISC_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_TRADE'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:32:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_TRADE'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.32:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_TRADE'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_TRADE'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_TRADE'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_RET_RETURN_TRADE');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_RET_RETURN_TRADE_ARC'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:44:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_RET_RETURN_TRADE_ARC'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.44:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE_ARC'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE_ARC'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_TRADE_ARC'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_TRADE_ARC'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE_ARC'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE_ARC'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_RET_RETURN_TRADE_ARC'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_RET_RETURN_TRADE_ARC'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:41:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_BRAND_IMS_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.41:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_BRAND_IMS_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:42:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_BRAND_IMS_LAST_30DAYS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.42:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_BRAND_IMS_L30DAYS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:43:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_BRAND_IMS_LAST_7DAYS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.43:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_BRAND_IMS_L7DAYS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 02:44:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_BRAND_IMS_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.44:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_BRAND_IMS_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_BRAND_IMS_YDAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:45:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_BRAND_IMS_YESTERDAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.45:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_YDAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_YDAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_YDAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_YDAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_YDAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_YDAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_YDAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_BRAND_IMS_YDAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_BRAND_IMS_YDAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 03:40:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_ORDER_COUNT_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.40:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_ORDER_CNT_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 03:45:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_ORDER_COUNT_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.45:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_ORDER_CNT_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_WISE_IMS_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:36:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_WISE_IMS_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.36:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_WISE_IMS_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:37:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_WISE_IMS_LAST_30DAYS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.37:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_WISE_IMS_L30DAYS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:38:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_WISE_IMS_LAST_7DAYS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.38:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_WISE_IMS_L7DAYS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_WISE_IMS_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 02:39:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_WISE_IMS_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.39:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_WISE_IMS_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ROUTE_WISE_IMS_YDAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:40:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ROUTE_WISE_IMS_YESTERDAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.40:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_YDAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_YDAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_YDAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_YDAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_YDAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_YDAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_YDAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ROUTE_WISE_IMS_YDAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ROUTE_WISE_IMS_YDAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 03:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SKU_NUMERIC_SALES_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_SKU_NUMERIC_SAL_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 03:55:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SKU_NUMERIC_SALES_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.55:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_SKU_NUMERIC_SAL_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_SR_ACH_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 05:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SR_ACH_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 05.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_ACH_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_ACH_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_ACH_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_SR_ACH_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_SR_ACH_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 05:55:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SR_ACH_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 05.55:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_ACH_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_ACH_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_ACH_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_ACH_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_SR_ACH_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_SR_PRODUCT_IMS_CMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:21:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SR_PRODUCT_IMS_CMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.21:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_CMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_CMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_CMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_CMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_CMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_CMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_CMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_CMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_SR_PRODUCT_IMS_CMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:22:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SR_PRODUCT_IMS_LAST_30DAYS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.22:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_SR_PRODUCT_IMS_L30DAYS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:23:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SR_PRODUCT_IMS_LAST_7DAYS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.23:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_SR_PRODUCT_IMS_L7DAYS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_SR_PRODUCT_IMS_LMONTH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 02:24:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SR_PRODUCT_IMS_LMONTH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.24:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_LMONTH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_LMONTH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_LMONTH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_LMONTH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_LMONTH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_LMONTH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_LMONTH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_LMONTH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_SR_PRODUCT_IMS_LMONTH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_SR_PRODUCT_IMS_YDAY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 02:25:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SR_PRODUCT_IMS_YESTERDAY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 02.25:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_YDAY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_YDAY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_YDAY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_YDAY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_YDAY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_YDAY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_YDAY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_SR_PRODUCT_IMS_YDAY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_SR_PRODUCT_IMS_YDAY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TARGET_L3YEARS'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TARGET_L3YEARS'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TARGET_L3YEARS'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TARGET_L3YEARS'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TARGET_L3YEARS'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TARGET_L3YEARS'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TARGET_L3YEARS'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TARGET_L3YEARS'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TARGET_L3YEARS'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TARGET_L3YEARS'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TARGET_L3YEARS');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TERRITORY_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TERRITORY_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TERRITORY_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TERRITORY_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TERRITORY_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TERRITORY_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TERRITORY_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TERRITORY_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TERRITORY_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TERRITORY_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TERRITORY_INFO');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TO_DAYS_FACT_INV_RECV'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 05:35:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TO_DAYS_FACTORY_INV_RECV'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 05.35:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TO_DAYS_FACT_INV_RECV'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TO_DAYS_FACT_INV_RECV'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TO_DAYS_FACT_INV_RECV'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TO_DAYS_FACT_INV_RECV'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TO_DAYS_FACT_INV_RECV'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TO_DAYS_FACT_INV_RECV'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TO_DAYS_FACT_INV_RECV'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TO_DAYS_FACT_INV_RECV'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TO_DAYS_FACT_INV_RECV');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TRADE_PROGRAM_PARTICI'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 03:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TRADE_PROGRAM_PARTICIPATION'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_PARTICI'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_PARTICI'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROGRAM_PARTICI'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROGRAM_PARTICI'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_PARTICI'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_PARTICI'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROGRAM_PARTICI'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_PARTICI'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TRADE_PROGRAM_PARTICI');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TRADE_PROGRAM_RETAILER'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TRADE_PROGRAM_RETAILER'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_RETAILER'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_RETAILER'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROGRAM_RETAILER'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROGRAM_RETAILER'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_RETAILER'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_RETAILER'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROGRAM_RETAILER'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROGRAM_RETAILER'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TRADE_PROGRAM_RETAILER');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TRADE_PROG_AMOUNT_SLAB'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TRADE_PROG_AMOUNT_SLAB');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TRADE_PROG_PRODUCT'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TRADE_PROG_PRODUCT'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PRODUCT'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PRODUCT'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_PRODUCT'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_PRODUCT'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PRODUCT'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PRODUCT'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_PRODUCT'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PRODUCT'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TRADE_PROG_PRODUCT');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TRADE_PROG_PROD_DTL'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TRADE_PROG_PROD_DTL'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_DTL'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_DTL'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_PROD_DTL'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_PROD_DTL'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_DTL'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_DTL'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_PROD_DTL'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_DTL'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TRADE_PROG_PROD_DTL');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TRADE_PROG_PROD_MST'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TRADE_PROG_PROD_MST'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_MST'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_MST'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_PROD_MST'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_PROD_MST'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_MST'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_MST'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TRADE_PROG_PROD_MST'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TRADE_PROG_PROD_MST'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TRADE_PROG_PROD_MST');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TSO_WISE_ORDER_SUMMARY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/01 03:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TSO_WISE_ORDER_SUMMARY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 03.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TSO_WISE_ORDER_SUMMARY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TSO_WISE_ORDER_SUMMARY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TSO_WISE_ORDER_SUMMARY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TSO_WISE_ORDER_SUMMARY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TSO_WISE_ORDER_SUMMARY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TSO_WISE_ORDER_SUMMARY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TSO_WISE_ORDER_SUMMARY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TSO_WISE_ORDER_SUMMARY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TSO_WISE_ORDER_SUMMARY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TT_TRADE_GIFT_ITEM_QTY_V1'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TT_TRADE_G_ITEM_QTY_V1');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_TT_TRADE_PROG_DISC_V1'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_TT_TRADE_PROG_DISCOUNT_V1'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_PROG_DISC_V1'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_PROG_DISC_V1'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TT_TRADE_PROG_DISC_V1'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TT_TRADE_PROG_DISC_V1'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_PROG_DISC_V1'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_PROG_DISC_V1'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_TT_TRADE_PROG_DISC_V1'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_TT_TRADE_PROG_DISC_V1'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_TT_TRADE_PROG_DISC_V1');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:50:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_UPTO_CUR_MONTH_DIV_RET_REL'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.50:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_UPTO_CUR_MONTH_DIV_RET');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 07:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_VIEW_CUST_ORDER_SUMMARY'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 07.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_VIEW_CUST_ORDER_SUMMARY');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_YTD_IMS_ACV_GRO_DASH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 06:30:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_YTD_IMS_ACV_GROWTH_DASH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.30:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_IMS_ACV_GRO_DASH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_IMS_ACV_GRO_DASH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_YTD_IMS_ACV_GRO_DASH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_YTD_IMS_ACV_GRO_DASH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_IMS_ACV_GRO_DASH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_IMS_ACV_GRO_DASH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_YTD_IMS_ACV_GRO_DASH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_IMS_ACV_GRO_DASH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_YTD_IMS_ACV_GRO_DASH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 06:35:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_YTD_LIFTING_ACV_GROWTH_DASH'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 06.35:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_YTD_LIFT_ACV_GRO_DASH');
END;
/

BEGIN
  SYS.DBMS_SCHEDULER.CREATE_JOB
    (
       job_name        => 'SYN_MV_ZONE_INFO'
      ,start_date      => TO_TIMESTAMP_TZ('2022/01/23 01:01:00.000000 +06:00','yyyy/mm/dd hh24:mi:ss.ff tzr')
      ,repeat_interval => 'FREQ=DAILY'
      ,end_date        => NULL
      ,job_class       => 'DEFAULT_JOB_CLASS'
      ,job_type        => 'PLSQL_BLOCK'
      ,job_action      => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ZONE_INFO'', METHOD => ''C'', ATOMIC_REFRESH=>FALSE); END;'
      ,comments        => 'Refresh every day at 01.01:00 AM'
    );
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ZONE_INFO'
     ,attribute => 'RESTARTABLE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ZONE_INFO'
     ,attribute => 'LOGGING_LEVEL'
     ,value     => SYS.DBMS_SCHEDULER.LOGGING_OFF);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ZONE_INFO'
     ,attribute => 'MAX_FAILURES');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ZONE_INFO'
     ,attribute => 'MAX_RUNS');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ZONE_INFO'
     ,attribute => 'STOP_ON_WINDOW_CLOSE'
     ,value     => FALSE);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ZONE_INFO'
     ,attribute => 'JOB_PRIORITY'
     ,value     => 3);
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL
    ( name      => 'SYN_MV_ZONE_INFO'
     ,attribute => 'SCHEDULE_LIMIT');
  SYS.DBMS_SCHEDULER.SET_ATTRIBUTE
    ( name      => 'SYN_MV_ZONE_INFO'
     ,attribute => 'AUTO_DROP'
     ,value     => TRUE);

  SYS.DBMS_SCHEDULER.ENABLE
    (name                  => 'SYN_MV_ZONE_INFO');
END;
/

ALTER TABLE DEPOT_INFO ADD (
  CONSTRAINT PK1_DEPOT_INFO
  PRIMARY KEY
  (DEPOT_ID)
  USING INDEX PK1_DEPOT_INFO
  ENABLE VALIDATE);

ALTER TABLE DEPOT_INFO ADD (
  CONSTRAINT UK1_DEPOT_INFO
  UNIQUE (DEPOT_CODE)
  USING INDEX UK1_DEPOT_INFO
  ENABLE VALIDATE);


ALTER TABLE SC_COMPANY ADD (
  CONSTRAINT PK_SC_COMPANY_ID
  PRIMARY KEY
  (ID)
  USING INDEX PK_SC_COMPANY_ID
  ENABLE VALIDATE);

ALTER TABLE SC_COMPANY ADD (
  CONSTRAINT UK_SC_COMPANY_CCODE
  UNIQUE (COMP_CODE)
  USING INDEX UK_SC_COMPANY_CCODE
  ENABLE VALIDATE);


ALTER TABLE SC_DESIGNATION ADD (
  CONSTRAINT PK_SC_DESIG_ID
  PRIMARY KEY
  (DESIGNATION_ID)
  USING INDEX PK_SC_DESIG_ID
  ENABLE VALIDATE);

ALTER TABLE SC_DESIGNATION ADD (
  CONSTRAINT UK_SC_DESIG_DCODE
  UNIQUE (DESIGNATION_CODE)
  USING INDEX UK_SC_DESIG_DCODE
  ENABLE VALIDATE);


ALTER TABLE SC_EMPLOYEE_INFO ADD (
  CONSTRAINT UK1_EMPLOYEE_INFO
  UNIQUE (EMPLOYEE_ID)
  USING INDEX UK1_EMPLOYEE_INFO
  ENABLE VALIDATE);


ALTER TABLE SC_FIELD_LOCATION ADD (
  CONSTRAINT PK_SC_FIELD_LOCATION_ID
  PRIMARY KEY
  (ID)
  USING INDEX PK_SC_FIELD_LOCATION_ID
  ENABLE VALIDATE);

ALTER TABLE SC_FIELD_LOCATION ADD (
  CONSTRAINT UK_SC_FIELD_LOCATION_FCODE
  UNIQUE (FIELD_CODE)
  USING INDEX UK_SC_FIELD_LOCATION_FCODE
  ENABLE VALIDATE);


ALTER TABLE SC_REPORT_INFO ADD (
  CONSTRAINT PK_REPORT_INFO_ID
  PRIMARY KEY
  (REPORT_ID)
  USING INDEX PK_REPORT_INFO_ID
  ENABLE VALIDATE);


ALTER TABLE SC_ROLE_INFO ADD (
  CONSTRAINT PK_ROLE_INFO_ROLE_ID
  PRIMARY KEY
  (ROLE_ID)
  USING INDEX PK_ROLE_INFO_ROLE_ID
  ENABLE VALIDATE);


ALTER TABLE SC_ROLE_MENU_CONF ADD (
  CONSTRAINT PK_ROLE_MENU_CONF_ID
  PRIMARY KEY
  (ID)
  USING INDEX PK_ROLE_MENU_CONF_ID
  ENABLE VALIDATE);

ALTER TABLE SC_ROLE_MENU_CONF ADD (
  CONSTRAINT UK_ROLE_MENU_CONF_RMID
  UNIQUE (MC_ID, ROLE_ID)
  USING INDEX UK_ROLE_MENU_CONF_RMID
  ENABLE VALIDATE);


ALTER TABLE SC_ROLE_REPORT_CONF ADD (
  CONSTRAINT PK_ROLE_REPORT_ID
  PRIMARY KEY
  (ID)
  USING INDEX PK_ROLE_REPORT_ID
  ENABLE VALIDATE);


ALTER TABLE SC_ROLE_USER_CONF ADD (
  CONSTRAINT PK_ROLE_USER_CONF_RC_ID
  PRIMARY KEY
  (ID)
  USING INDEX PK_ROLE_USER_CONF_RC_ID
  ENABLE VALIDATE);


ALTER TABLE SC_AUDIT_TRAIL ADD (
  CONSTRAINT AUDIT_TRAIL_PK
  PRIMARY KEY
  (AUDIT_ID)
  USING INDEX AUDIT_TRAIL_PK
  ENABLE VALIDATE);


CREATE MATERIALIZED VIEW MV_INVOICE_MST_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
       inv_mst_slno, invoice_no, invoice_date, order_no, order_date, inv_type_code, delivery_date, delivery_time, retailer_code, route_code, 
       market_code, employee_code, customer_code, grand_total, total_tds, slab_adjustment, total_adjustment, net_inv_amount, 
       inv_status, remarks, entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal, 
       trade_policy_no, special_bonus_disc, retailer_type, zone_code, 
       area_code, belt_code, territory_code, invoice_version
from spa_sfbl_arc.invoice_mst@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_MST_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_MST_ARC';

CREATE MATERIALIZED VIEW MV_INVOICE_DTL_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_dtl_slno, inv_mst_slno, product_code, product_price, issued_qty, rtl_discount, rtl_discount_val, prod_discount, 
     prod_discount_val, bonus_price_discount, total_val, slab_adj_val, slab_adj_status, slab_adj_date, net_val
from spa_sfbl_arc.invoice_dtl@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_DTL_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_DTL_ARC';

CREATE MATERIALIZED VIEW MV_INVOICE_ISSUE_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_iss_slno, inv_dtl_slno, product_code, product_batch_no, lot_no, issued_qty, customer_code, invoice_date, issued_price
from spa_sfbl_arc.invoice_issue@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_ISSUE_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_ISSUE_ARC';

CREATE MATERIALIZED VIEW MV_INVOICE_BONUS_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_bns_slno, inv_dtl_slno, product_code, product_batch_no, lot_no, bonus_qty, customer_code, invoice_date
from spa_sfbl_arc.invoice_bonus@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_BONUS_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_BONUS_ARC';

CREATE MATERIALIZED VIEW MV_INV_SPEC_PRICE_DISC_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_spec_price_slno, inv_mst_slno, price_disc_amt
from spa_sfbl_arc.inv_spec_price_disc@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INV_SPEC_PRICE_DISC_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INV_SPEC_PRICE_DISC_ARC';

CREATE MATERIALIZED VIEW MV_INVOICE_SPEC_BONUS_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_spec_bns_slno, inv_mst_slno, customer_code, invoice_date, product_code, product_batch_no, lot_no, spec_bonus_qty, product_price
from spa_sfbl_arc.invoice_spec_bonus@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_SPEC_BONUS_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_SPEC_BONUS_ARC';

CREATE MATERIALIZED VIEW MV_INVOICE_TRADE_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_trd_slno, inv_dtl_slno, product_code, product_batch_no, lot_no, trade_qty, customer_code, invoice_date
from spa_sfbl_arc.invoice_trade@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_TRADE_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_TRADE_ARC';

CREATE MATERIALIZED VIEW MV_RET_RETURN_BONUS_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
       ret_recv_bns_slno, ret_recv_dtl_slno, product_code, product_batch_no, lot_no, bonus_qty, bonus_value, 
       entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal, customer_code
FROM spa_sfbl_arc.ret_return_bonus@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_BONUS_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_BONUS_ARC';

CREATE MATERIALIZED VIEW MV_RET_RETURN_DTL_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_dtl_slno, ret_recv_mst_slno, product_code, trade_price, issued_qty, return_qty, cust_discount_val, 
     cust_bonus_discount, adjustment_val, return_value, bonus_price_discount, invoice_no, return_type
FROM spa_sfbl_arc.ret_return_dtl@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_DTL_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_DTL_ARC';

CREATE MATERIALIZED VIEW MV_RET_RETURN_ISSUE_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_iss_slno, ret_recv_dtl_slno, product_code, product_batch_no, lot_no, received_qty, received_value, 
     entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal, customer_code
FROM spa_sfbl_arc.ret_return_issue@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_ISSUE_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_ISSUE_ARC';

CREATE MATERIALIZED VIEW MV_RET_RETURN_MST_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_mst_slno, customer_code, retailer_code, return_date, invoice_no, return_type, 
     net_return_val, tds_val, adjustment_val, return_status, return_bns_disc, return_slab_amount, special_bonus_disc, return_value, 
     inv_type_code, invoice_date, employee_code, return_datetime, market_code, route_code
FROM spa_sfbl_arc.ret_return_mst@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_MST_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_MST_ARC';

CREATE MATERIALIZED VIEW MV_RET_RETURN_SPEC_BONUS_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_spec_bns_slno, ret_recv_mst_slno, product_code, product_batch_no, lot_no, spec_bonus_qty, spec_bonus_val
FROM spa_sfbl_arc.ret_return_spec_bonus@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_SPEC_BONUS_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_SPEC_BONUS_ARC';

CREATE MATERIALIZED VIEW MV_RET_RETURN_SPEC_DISC_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_spec_disc_slno, ret_recv_mst_slno, special_bonus_disc
FROM spa_sfbl_arc.ret_return_spec_disc@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_SPEC_DISC_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_SPEC_DISC_ARC';

CREATE MATERIALIZED VIEW MV_RET_RETURN_TRADE_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_trd_slno, ret_recv_dtl_slno, product_code, product_batch_no, lot_no, trade_qty, trade_value, 
     entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal, customer_code
FROM spa_sfbl_arc.ret_return_trade@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_TRADE_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_TRADE_ARC';

CREATE MATERIALIZED VIEW MV_ZONE_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     zone_code, zone_name, zone_address, zone_remarks, zone_status
from spa_sfbl.zone_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ZONE_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ZONE_INFO';

CREATE MATERIALIZED VIEW MV_AREA_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     area_code, area_name, area_address, area_remarks, area_status
from spa_sfbl.area_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_AREA_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_AREA_INFO';

CREATE MATERIALIZED VIEW MV_BELT_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     belt_code, belt_name, belt_address, belt_remarks, belt_status
from spa_sfbl.belt_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_BELT_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_BELT_INFO';

CREATE MATERIALIZED VIEW MV_TERRITORY_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     territory_code, territory_name, territory_address, territory_remarks, territory_status
from spa_sfbl.territory_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TERRITORY_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TERRITORY_INFO';

CREATE MATERIALIZED VIEW MV_MARKET_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     market_code, market_name, market_address, market_contact, market_email, market_status, market_remarks
from spa_sfbl.market_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_MARKET_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MARKET_INFO';

CREATE MATERIALIZED VIEW MV_ROUTE_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     route_code, route_name, route_desc, remarks
from spa_sfbl.route_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_INFO';

CREATE MATERIALIZED VIEW MV_RETAILER_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     retailer_code, retailer_name, address, contact_no, email, retailer_category, retailer_type, workstation, distance, monthle_avg_sales, 
     contribution, base_exchq, spec_discount, price_type, discount_val, credit_limit_amount, credit_limit_day, 
     remarks, status, retailer_version, retailer_lat, retailer_long, retailer_name_bn, retailer_address_bn, retailer_type_new, 
     retail_channel, location_type, monthly_avg, contact_person, retailer_entry_date, check_status, check_by, check_date, 
     approved_status, approved_by, approved_date
from spa_sfbl.retailer_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RETAILER_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETAILER_INFO';

CREATE MATERIALIZED VIEW MV_PRODUCT_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     product_code, product_name, product_name_bn, pack_size, group_code, brand_code, product_category, bonus_allow, discount_allow, discount_type, 
     discount_val, shipper_qty, status, product_version, cp_flag, base_product_code
from spa_sfbl.product_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_PRODUCT_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_PRODUCT_INFO';

CREATE MATERIALIZED VIEW MV_PRODUCT_PRICE_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     prd_price_slno, price_date, product_code, unit_tp, unit_vat, supp_tax, mrp, employee_price, special_price, gross_profit
from spa_sfbl.product_price_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_PRODUCT_PRICE_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_PRODUCT_PRICE_INFO';

CREATE MATERIALIZED VIEW MV_BASE_PRODUCT_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     base_product_code, base_product_name, status
from spa_sfbl.base_product_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_BASE_PRODUCT_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_BASE_PRODUCT_INFO';

CREATE MATERIALIZED VIEW MV_BRAND_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     brand_code, brand_name, brand_type, brand_status, brand_remarks
from spa_sfbl.brand_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_BRAND_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_BRAND_INFO';

CREATE MATERIALIZED VIEW MV_CATEGORY_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     category_code, category_name, category_remarks
from spa_sfbl.category_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_CATEGORY_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_CATEGORY_INFO';

CREATE MATERIALIZED VIEW MV_CUSTOMER_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     customer_code, customer_name, vat_reg_no, customer_address, customer_contact, customer_email, customer_proptr, customer_status, 
     customer_type, price_type, customer_commission, customer_add_commission, customer_remarks, cust_contact_person, db_location
from spa_sfbl.customer_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_CUSTOMER_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_CUSTOMER_INFO';

CREATE MATERIALIZED VIEW MV_ORDER_MST_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     order_mst_slno, order_no, order_date, order_type, delivery_date, retailer_code, route_code, market_code, employee_code, 
     customer_code, invoice_status, retailer_lat, 
     retailer_long, trade_policy_no, order_actual_datetime
from spa_sfbl_arc.order_mst@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ORDER_MST_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ORDER_MST_ARC';

CREATE MATERIALIZED VIEW MV_ORDER_MST 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     order_mst_slno, order_no, order_date, order_type, delivery_date, retailer_code, route_code, market_code, employee_code, 
     customer_code, invoice_status, retailer_lat, 
     retailer_long, trade_policy_no, order_actual_datetime
from spa_sfbl.view_order_mst@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ORDER_MST IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ORDER_MST';

CREATE MATERIALIZED VIEW MV_ORDER_DTL 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     order_dtl_slno, order_mst_slno, product_code, order_qty, revised_order_qty, product_price
from spa_sfbl.view_order_dtl@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ORDER_DTL IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ORDER_DTL';

CREATE MATERIALIZED VIEW MV_ORDER_DTL_ARC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     order_dtl_slno, order_mst_slno, product_code, order_qty, revised_order_qty, product_price
from spa_sfbl_arc.order_dtl@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ORDER_DTL_ARC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ORDER_DTL_ARC';

CREATE MATERIALIZED VIEW MV_PRODUCT_PRICE 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
    product_code, product_name, pack_size, shipper_qty, product_category, category_name, brand_code, bonus_allow, 
    discount_allow, discount_type, discount_val, unit_tp, unit_vat, 
    supp_tax, mrp, special_price, employee_price, gross_profit, status
from spa_sfbl.product_price@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_PRODUCT_PRICE IS 'snapshot table for snapshot SPA_SFBL_BI.MV_PRODUCT_PRICE';

CREATE MATERIALIZED VIEW MV_DIVISION_CUSTOMER_RELATION 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     zone_code, zone_name, area_code, area_name, belt_code, belt_name, territory_code, territory_name, 
     market_code, market_name, customer_code, customer_name, db_location
from spa_sfbl.vw_location_relation@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIVISION_CUSTOMER_RELATION IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIVISION_CUSTOMER_RELATION';

CREATE MATERIALIZED VIEW MV_DIVISION_RETAILER_RELATION 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     zone_code, zone_name, area_code, area_name, belt_code, belt_name, territory_code, territory_name, market_code, 
     market_name, route_code, route_name, retailer_code, retailer_name, retailer_entry_date, check_status,
     check_by, check_date, approved_status, approved_by, approved_date
from spa_sfbl.vw_all_location_relation@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIVISION_RETAILER_RELATION IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIVISION_RETAILER_RELATION';

CREATE MATERIALIZED VIEW MV_CUSTOMER_MKT_MST 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     cust_mkt_mst_slno, customer_code
from spa_sfbl.customer_mkt_mst@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_CUSTOMER_MKT_MST IS 'snapshot table for snapshot SPA_SFBL_BI.MV_CUSTOMER_MKT_MST';

CREATE MATERIALIZED VIEW MV_CUSTOMER_MKT_DTL 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     cust_mkt_dtl_slno, cust_mkt_mst_slno, market_code, market_status, market_flag, distribution_ratio
from spa_sfbl.customer_mkt_dtl@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_CUSTOMER_MKT_DTL IS 'snapshot table for snapshot SPA_SFBL_BI.MV_CUSTOMER_MKT_DTL';

CREATE MATERIALIZED VIEW MV_EMPLOYEE_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     employee_code, employee_name, father_name, present_add, permanent_add, joining_date, designation, contact_no, email, remarks, status
FROM spa_sfbl.employee_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_EMPLOYEE_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_EMPLOYEE_INFO';

CREATE MATERIALIZED VIEW MV_MOM_LOC_SKU_NUMERIC_DIST_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
          sysdate refresh_date, 
          c.zone_code division_code,
          c.zone_name division_name,
          c.area_code region_code,
          c.area_name region_name,
          c.belt_code area_code,
          c.belt_name area_name,
          c.territory_code,
          c.territory_name,
          c.db_location,
          a.customer_code,
          fn_customer_name (a.customer_code) customer_name,
          a.market_code,
          c.market_name,
          a.product_code,
          b.product_name,
          b.pack_size,
          a.jan,
          a.feb,
          a.mar,
          a.apr,
          a.may,
          a.jun,
          a.jul,
          a.aug,
          a.sep,
          a.oct,
          a.nov,
          a.dec,
            NVL (a.jan, 0)
          + NVL (a.feb, 0)
          + NVL (a.mar, 0)
          + NVL (a.apr, 0)
          + NVL (a.may, 0)
          + NVL (a.jun, 0)
          + NVL (a.jul, 0)
          + NVL (a.aug, 0)
          + NVL (a.sep, 0)
          + NVL (a.oct, 0)
          + NVL (a.nov, 0)
          + NVL (a.dec, 0)
             total
     FROM (  SELECT customer_code,
                    market_code,
                    product_code,
                    SUM (jan) jan,
                    SUM (feb) feb,
                    SUM (mar) mar,
                    SUM (apr) apr,
                    SUM (may) may,
                    SUM (jun) jun,
                    SUM (jul) jul,
                    SUM (aug) aug,
                    SUM (sep) sep,
                    SUM (oct) oct,
                    SUM (nov) nov,
                    SUM (dec) dec
               FROM (  SELECT customer_code,
                              market_code,
                              product_code,
                              COUNT (DISTINCT retailer_code) jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -12),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -12),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              COUNT (DISTINCT retailer_code) feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -11),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -11),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              COUNT (DISTINCT retailer_code) mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -10),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -10),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              COUNT (DISTINCT retailer_code) apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -9),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -9),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              COUNT (DISTINCT retailer_code) may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -8),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -8),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              COUNT (DISTINCT retailer_code) jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -7),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -7),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              COUNT (DISTINCT retailer_code) jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -6),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -6),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              COUNT (DISTINCT retailer_code) aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -5),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -5),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              COUNT (DISTINCT retailer_code) sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -4),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -4),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              COUNT (DISTINCT retailer_code) oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -3),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -3),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              COUNT (DISTINCT retailer_code) nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -2),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -2),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              COUNT (DISTINCT retailer_code) dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              a.customer_code,
                                              a.market_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -1),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -1),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code='25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_code)
           GROUP BY customer_code, market_code, product_code) a,
          mv_product_info b,
          mv_division_customer_relation c
    WHERE     a.product_code = b.product_code
          AND a.market_code = c.market_code(+);


COMMENT ON MATERIALIZED VIEW MV_MOM_LOC_SKU_NUMERIC_DIST_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_LOC_SKU_NUMERIC_DIST_LY';

CREATE MATERIALIZED VIEW MV_MOM_NTL_PROD_NU_DIST_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
          sysdate refresh_date,
          a.base_product_code,
          b.base_product_name,
          jan,
          feb,
          mar,
          apr,
          may,
          jun,
          jul,
          aug,
          sep,
          oct,
          nov,
          dec,
          0 total
     FROM (  SELECT base_product_code,
                    SUM (jan) jan,
                    SUM (feb) feb,
                    SUM (mar) mar,
                    SUM (apr) apr,
                    SUM (may) may,
                    SUM (jun) jun,
                    SUM (jul) jul,
                    SUM (aug) aug,
                    SUM (sep) sep,
                    SUM (oct) oct,
                    SUM (nov) nov,
                    SUM (dec) dec
               FROM (  SELECT base_product_code,
                              COUNT (DISTINCT retailer_code) jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -12),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -12),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              COUNT (DISTINCT retailer_code) feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -11),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -11),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              COUNT (DISTINCT retailer_code) mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -10),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -10),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              COUNT (DISTINCT retailer_code) apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -9),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -9),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'F
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              COUNT (DISTINCT retailer_code) may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -8),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -8),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              COUNT (DISTINCT retailer_code) jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -7),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -7),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              COUNT (DISTINCT retailer_code) jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -6),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -6),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              COUNT (DISTINCT retailer_code) aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -5),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -5),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              COUNT (DISTINCT retailer_code) sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -4),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -4),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              COUNT (DISTINCT retailer_code) oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -3),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -3),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              COUNT (DISTINCT retailer_code) nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -2),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -2),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              COUNT (DISTINCT retailer_code) dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -1),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -1),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code)
           GROUP BY base_product_code) a,
          mv_base_product_info b
    WHERE a.base_product_code = b.base_product_code;


COMMENT ON MATERIALIZED VIEW MV_MOM_NTL_PROD_NU_DIST_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_NTL_PROD_NU_DIST_LY';

CREATE MATERIALIZED VIEW MV_MOM_LOC_PROD_NM_DIST_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date, 
        c.zone_code division_code,
        c.zone_name division_name,
        c.area_code region_code,
        c.area_name region_name,
        c.belt_code area_code,
        c.belt_name area_name,
        c.territory_code,
        c.territory_name,
        c.db_location,
        a.customer_code,
        c.customer_name,  
        a.market_code,
        c.market_name,

        a.base_product_code , 
        b.base_product_name,
        jan ,
        feb ,
        mar ,
        apr ,
        may ,
        jun ,
        jul ,
        aug ,
        sep ,
        oct ,
        nov ,
        dec ,                
        0 total                 
from
    (

        select  customer_code,
                market_code,
                base_product_code, 
                sum( jan ) jan ,
                sum( feb ) feb ,
                sum( mar ) mar ,
                sum( apr ) apr ,
                sum( may ) may ,
                sum( jun ) jun ,
                sum( jul ) jul ,
                sum( aug ) aug ,
                sum( sep ) sep ,
                sum( oct ) oct ,
                sum( nov ) nov ,
                sum( dec ) dec         
        from
            (

                select  customer_code,
                        market_code,
                        base_product_code, 
                        count( distinct retailer_code) jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-12),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-12),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code  


                union all

                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        count( distinct retailer_code) feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-11),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-11),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code  


                union all
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        count( distinct retailer_code) mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-10),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-10),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code 


                union all
                
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        count( distinct retailer_code) apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-9),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-9),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code   



                union all
                
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        count( distinct retailer_code) may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-8),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-8),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code 



                union all
                
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        count( distinct retailer_code) jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-7),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-7),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code 



                union all
                
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        count( distinct retailer_code) jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-6),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-6),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code 


                union all
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        count( distinct retailer_code) aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-5),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-5),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code 



                union all
                
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        count( distinct retailer_code) sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-4),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-4),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code 





                union all
                
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        count( distinct retailer_code) oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-3),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-3),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code 



                union all
                
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        count( distinct retailer_code) nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-2),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-2),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code  




                union all
                
                
                select  customer_code,
                        market_code,
                        base_product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        count( distinct retailer_code) dec         
                from
                    (
                    select  a.customer_code,a.market_code,a.base_product_code,a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.customer_code,a.market_code,a.invoice_no,p.base_product_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-1),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-1),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code = '25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code,market_code,base_product_code 
           


         )
          group by  customer_code,market_code,base_product_code
  
  
 ) a, mv_base_product_info b,mv_division_customer_relation c
 where a.base_product_code=b.base_product_code
 and   a.market_code=c.market_code(+);


COMMENT ON MATERIALIZED VIEW MV_MOM_LOC_PROD_NM_DIST_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_LOC_PROD_NM_DIST_LY';

CREATE MATERIALIZED VIEW MV_RETAILER_IMS_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
          b.zone_code division_code,
          b.zone_name division_name,
          b.area_code region_code,
          b.area_name region_name,
          b.belt_code area_code,
          b.belt_name area_name,
          b.territory_code,
          b.territory_name,
          a.customer_code,
          b.customer_name,
          b.db_location,
          a.market_code,
          b.market_name,
          a.route_code,
          d.route_name,
          a.retailer_code,
          c.retailer_name,
          jan_no_of_inv,
          jan_net_ims,
          feb_no_of_inv,
          feb_net_ims,
          mar_no_of_inv,
          mar_net_ims,
          apr_no_of_inv,
          apr_net_ims,
          may_no_of_inv,
          may_net_ims,
          jun_no_of_inv,
          jun_net_ims,
          jul_no_of_inv,
          jul_net_ims,
          aug_no_of_inv,
          aug_net_ims,
          sep_no_of_inv,
          sep_net_ims,
          oct_no_of_inv,
          oct_net_ims,
          nov_no_of_inv,
          nov_net_ims,
          dec_no_of_inv,
          dec_net_ims
     FROM (  SELECT customer_code,
                    market_code,
                    route_code,
                    retailer_code,
                    SUM (NVL (jan_no_of_inv, 0)) jan_no_of_inv,
                    SUM (NVL (jan_net_ims, 0)) jan_net_ims,
                    SUM (NVL (feb_no_of_inv, 0)) feb_no_of_inv,
                    SUM (NVL (feb_net_ims, 0)) feb_net_ims,
                    SUM (NVL (mar_no_of_inv, 0)) mar_no_of_inv,
                    SUM (NVL (mar_net_ims, 0)) mar_net_ims,
                    SUM (NVL (apr_no_of_inv, 0)) apr_no_of_inv,
                    SUM (NVL (apr_net_ims, 0)) apr_net_ims,
                    SUM (NVL (may_no_of_inv, 0)) may_no_of_inv,
                    SUM (NVL (may_net_ims, 0)) may_net_ims,
                    SUM (NVL (jun_no_of_inv, 0)) jun_no_of_inv,
                    SUM (NVL (jun_net_ims, 0)) jun_net_ims,
                    SUM (NVL (jul_no_of_inv, 0)) jul_no_of_inv,
                    SUM (NVL (jul_net_ims, 0)) jul_net_ims,
                    SUM (NVL (aug_no_of_inv, 0)) aug_no_of_inv,
                    SUM (NVL (aug_net_ims, 0)) aug_net_ims,
                    SUM (NVL (sep_no_of_inv, 0)) sep_no_of_inv,
                    SUM (NVL (sep_net_ims, 0)) sep_net_ims,
                    SUM (NVL (oct_no_of_inv, 0)) oct_no_of_inv,
                    SUM (NVL (oct_net_ims, 0)) oct_net_ims,
                    SUM (NVL (nov_no_of_inv, 0)) nov_no_of_inv,
                    SUM (NVL (nov_net_ims, 0)) nov_net_ims,
                    SUM (NVL (dec_no_of_inv, 0)) dec_no_of_inv,
                    SUM (NVL (dec_net_ims, 0)) dec_net_ims
               FROM (  SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              SUM (NVL (no_of_inv, 0)) jan_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -12),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -12),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -12),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -12),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              SUM (NVL (no_of_inv, 0)) feb_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -11),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -11),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -11),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -11),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              SUM (NVL (no_of_inv, 0)) mar_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -10),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -10),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -10),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -10),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              SUM (NVL (no_of_inv, 0)) apr_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -9),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -9),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -9),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -9),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              SUM (NVL (no_of_inv, 0)) may_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -8),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -8),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -8),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -8),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              SUM (NVL (no_of_inv, 0)) jun_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -7),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -7),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -7),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -7),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              SUM (NVL (no_of_inv, 0)) jul_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -6),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -6),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -6),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -6),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              SUM (NVL (no_of_inv, 0)) aug_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -5),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -5),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -5),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -5),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              SUM (NVL (no_of_inv, 0)) sep_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -4),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -4),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -4),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -4),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              SUM (NVL (no_of_inv, 0)) oct_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -3),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -3),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -3),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -3),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              SUM (NVL (no_of_inv, 0)) nov_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -2),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -2),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -2),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -2),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              SUM (NVL (no_of_inv, 0)) dec_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_ly
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -1),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -1),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_ly a,
                                        mv_invoice_mst_ly b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 -1),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    -1),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code)
           GROUP BY customer_code,
                    market_code,
                    route_code,
                    retailer_code) a,
          mv_division_customer_relation b,
          mv_retailer_info c,
          mv_route_info d
    WHERE     a.market_code = b.market_code(+)
          AND a.retailer_code = c.retailer_code
          AND a.route_code = d.route_code;


COMMENT ON MATERIALIZED VIEW MV_RETAILER_IMS_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETAILER_IMS_LY';

CREATE MATERIALIZED VIEW MV_MOM_NTL_SKU_NUMERIC_DIST_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date, 
        a.product_code, 
        b.product_name,
        b.pack_size,
        jan ,
        feb ,
        mar ,
        apr ,
        may ,
        jun ,
        jul ,
        aug ,
        sep ,
        oct ,
        nov ,
        dec ,                
        0 total                 
from
    (



        select  product_code, 
                sum( jan ) jan ,
                sum( feb ) feb ,
                sum( mar ) mar ,
                sum( apr ) apr ,
                sum( may ) may ,
                sum( jun ) jun ,
                sum( jul ) jul ,
                sum( aug ) aug ,
                sum( sep ) sep ,
                sum( oct ) oct ,
                sum( nov ) nov ,
                sum( dec ) dec         
        from
            (

                select  product_code, 
                        count( distinct retailer_code) jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-12),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-12),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code  


                union all
                select  product_code, 
                        0 jan ,
                        count( distinct retailer_code) feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-11),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-11),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code  


                union all
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        count( distinct retailer_code) mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-10),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-10),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code


                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        count( distinct retailer_code) apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-9),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-9),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code   



                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        count( distinct retailer_code) may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-8),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-8),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 




                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        count( distinct retailer_code) jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-7),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-7),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 



                union all
                
                select   product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        count( distinct retailer_code) jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-6),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-6),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 



                union all
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        count( distinct retailer_code) aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-5),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-5),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 



                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        count( distinct retailer_code) sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-4),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-4),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 





                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        count( distinct retailer_code) oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-3),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-3),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code



                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        count( distinct retailer_code) nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-2),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-2),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code  




                union all
                
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        count( distinct retailer_code) dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-1),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-1),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code  
           


         )
          group by  product_code
  
 ) a, mv_product_info b
 where a.product_code=b.product_code;


COMMENT ON MATERIALIZED VIEW MV_MOM_NTL_SKU_NUMERIC_DIST_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_NTL_SKU_NUMERIC_DIST_LY';

CREATE MATERIALIZED VIEW MV_RET_PROD_IMS_LAST_30DAYS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
        market_code, market_name, customer_code, customer_name, db_location, 
        route_code, route_name, retailer_code, retailer_name, base_product_code, 
        base_product_name, brand_code, brand_name, product_category_code, product_category_name, 
        product_code, product_name, pack_size, product_price, invoice_amt, sales_qty, 
        sales_bonus_qty, bonus_price_discount, replace_qty, return_sales_qty, return_bns_qty, 
        ims_sales_qty, ims_bns_qty, return_value, bns_disc_ret, 
        discount_val, net_ims, number_of_invoice, target_qty
from spa_sfbl.view_ret_prod_ims_l30day@dl_spasfbl.squaregroup.com


/*
select 
         sysdate refresh_date,
         b.zone_code division_code,
         b.zone_name division_name,
         b.area_code region_code,
         b.area_name region_name,
         b.belt_code area_code,
         b.belt_name area_name,
         b.territory_code,
         b.territory_name,
         a.market_code,
         b.market_name,         
         a.customer_code,
         b.customer_name,
         b.db_location, 
         a.route_code,
         c.route_name,
         a.retailer_code,
         d.retailer_name,       
         p.base_product_code,
         fn_base_product_name(p.base_product_code)base_product_name, 
         p.brand_code,
         fn_brand_name(p.brand_code) brand_name,
         p.product_category product_category_code,
         fn_category_name(p.product_category) product_category_name,         
         a.product_code,
         fn_product_name(a.product_code) product_name,
         fn_pack_size(a.product_code) pack_size,
         fn_product_price(a.product_code) product_price,
         nvl(a.invoice_amt, 0) invoice_amt,
         nvl(a.issued_qty, 0) sales_qty,
         nvl(a.bonus_qty, 0) sales_bonus_qty,
         nvl(a.bonus_price_discount, 0) bonus_price_discount,
         nvl(a.replace_qty, 0) replace_qty,
         nvl(a.return_sales_qty, 0) return_sales_qty,
         nvl(a.return_bns_qty, 0) return_bns_qty,
         nvl(a.issued_qty, 0) - nvl (a.return_sales_qty, 0) ims_sales_qty,
         nvl(a.bonus_qty, 0) - nvl (a.return_bns_qty, 0) ims_bns_qty,
         nvl(a.return_value, 0) return_value,
         nvl(a.bns_disc_ret, 0) bns_disc_ret,
         nvl(a.bonus_price_discount, 0) - nvl (a.bns_disc_ret, 0) discount_val,
         nvl(a.invoice_amt, 0) - nvl (return_value, 0) net_ims,
         nvl(a.number_of_invoice,0) number_of_invoice
    from (
            select customer_code,
                   market_code,
                   route_code,
                   retailer_code,
                   product_code,
                   sum(nvl(issued_qty,0)) issued_qty,
                   sum(nvl(bonus_qty,0)) bonus_qty,
                   sum(nvl(bonus_price_discount,0)) bonus_price_discount,
                   sum(nvl(invoice_amt,0))invoice_amt ,
                   sum(nvl(replace_qty,0)) replace_qty,                   
                   sum(nvl(return_sales_qty,0)) return_sales_qty,
                   sum(nvl(return_value,0)) return_value,
                   sum(nvl(return_bns_qty,0)) return_bns_qty,
                   sum(nvl(bns_disc_ret,0)) bns_disc_ret, 
                   sum(nvl(number_of_invoice,0)) number_of_invoice                  
                               
              from (    
                        select customer_code,
                               market_code,
                               route_code,
                               retailer_code,
                               product_code,
                               sum (issued_qty) issued_qty,
                               sum (bonus_qty) + sum (trade_qty) + sum (spec_bonus_qty) bonus_qty,
                               sum (bonus_price_discount) bonus_price_discount,
                               sum (total) invoice_amt,
                               sum (replace_qty) replace_qty,                   
                               0 return_sales_qty,
                               0 return_value,
                               0 return_bns_qty,
                               0 bns_disc_ret,
                               0 number_of_invoice                    
                               
                          from (                    
                                  select m.customer_code,
                                         m.market_code,
                                         m.route_code,
                                         m.retailer_code,
                                         d.product_code,
                                         sum (nvl (d.issued_qty, 0)) issued_qty,
                                         0 bonus_qty,
                                         sum (d.bonus_price_discount) bonus_price_discount,
                                         sum (d.total_val)- sum(d.bonus_price_discount) total,
                                         0 trade_qty,
                                         0 spec_bonus_qty,
                                         0 replace_qty
                                  from  mv_invoice_mst m, mv_invoice_dtl d
                                  where m.inv_mst_slno = d.inv_mst_slno
                                  and   m.inv_type_code = 'INV001'
                                  and   trunc(m.invoice_date)  between trunc(sysdate-30) AND trunc(sysdate-1)  
                                  group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                
                                
                                UNION ALL
                                
                                
                                
                                  select m.customer_code,
                                         m.market_code,
                                         m.route_code,
                                         m.retailer_code,
                                         i.product_code,
                                         0 issued_qty,
                                         sum (nvl (i.bonus_qty, 0)) bonus_qty,
                                         0 bonus_price_discount,
                                         0 total,
                                         0 trade_qty,
                                         0 spec_bonus_qty,
                                         0 replace_qty
                                  from   mv_invoice_mst m, mv_invoice_dtl d, mv_invoice_bonus i
                                  where  m.inv_mst_slno = d.inv_mst_slno
                                  and    d.inv_dtl_slno = i.inv_dtl_slno
                                  and   trunc(m.invoice_date)  between trunc(sysdate-30) AND trunc(sysdate-1)  
                                  and    m.inv_type_code = 'INV001'
                                  group by i.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                  
                        
                                UNION ALL
                                
                                
                                  select m.customer_code,
                                         m.market_code,
                                         m.route_code,
                                         m.retailer_code,
                                         i.product_code,
                                         0 issued_qty,
                                         0 bonus_qty,
                                         0 bonus_price_discount,
                                         0 total,
                                         sum (nvl (i.trade_qty, 0)) trade_qty,
                                         0 spec_bonus_qty,
                                         0 replace_qty
                                  from  mv_invoice_mst m, mv_invoice_dtl d, mv_invoice_trade i
                                  where  m.inv_mst_slno = d.inv_mst_slno
                                  and    d.inv_dtl_slno = i.inv_dtl_slno
                                  and   trunc(m.invoice_date)  between trunc(sysdate-30) AND trunc(sysdate-1)  
                                  and    m.inv_type_code = 'INV001'
                                  group by i.product_code, m.customer_code,m.market_code,m.route_code,m.retailer_code
                                  
                                  
                                UNION ALL
                                
                                
                                
                                  select m.customer_code,
                                         m.market_code,
                                         m.route_code,
                                         m.retailer_code,
                                         d.product_code,
                                         0 issued_qty,
                                         0 bonus_qty,
                                         0 bonus_price_discount,
                                         0 total,
                                         0 trade_qty,
                                         sum (d.spec_bonus_qty) spec_bonus_qty,
                                         0 replace_qty
                                  from   mv_invoice_mst m, mv_invoice_spec_bonus d
                                  where  m.inv_mst_slno = d.inv_mst_slno
                                  and   trunc(m.invoice_date)  between trunc(sysdate-30) AND trunc(sysdate-1)  
                                  and    m.inv_type_code = 'INV001'
                                  group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code
                                  
                                  
                                  
                                  
                                UNION ALL
                                
                                
                                
                                  select m.customer_code,
                                         m.market_code,
                                         m.route_code,
                                         m.retailer_code,
                                         d.product_code,
                                         0 issued_qty,
                                         0 bonus_qty,
                                         0 bonus_price_discount,
                                         0 total,
                                         0 trade_qty,
                                         0 spec_bonus_qty,
                                         sum (issued_qty) replace_qty
                                  from   mv_invoice_mst m, mv_invoice_dtl d
                                  where  m.inv_mst_slno = d.inv_mst_slno
                                  and   trunc(m.invoice_date)  between trunc(sysdate-30) AND trunc(sysdate-1)  
                                  and   m.inv_type_code = 'INV002'
                                  group by d.product_code,m.customer_code,m.market_code,m.route_code,m.retailer_code     
                      )
                      group by product_code, customer_code,market_code,route_code,retailer_code
                      

                     
                     union all
                     
                     
                      select customer_code,
                             market_code,
                             route_code,
                             retailer_code,                      
                             product_code,                 
                             0 issued_qty,
                             0 bonus_qty,
                             0 bonus_price_discount,
                             0 invoice_amt,
                             0 replace_qty,                                  
                             sum (nvl (return_qty, 0)) return_sales_qty,
                             sum (nvl (return_value, 0)) return_value,
                             sum (nvl (ret_bns_qty, 0))+ sum (nvl (ret_trd_qty, 0))+ sum (nvl (spec_bonus_qty, 0)) return_bns_qty,
                             sum (nvl (bns_disc_ret, 0)) bns_disc_ret,
                             0 number_of_invoice                             
                       FROM (  
                             
                             
                              select m.customer_code,
                                     m.market_code,
                                     m.route_code,
                                     m.retailer_code,                      
                                     d.product_code,
                                     sum (d.return_qty) return_qty,
                                     sum (nvl (d.return_value, 0)) return_value,
                                     0 ret_bns_qty,
                                     0 ret_trd_qty,
                                     0 bns_disc_ret,
                                     0 spec_bonus_qty
                             from    mv_ret_return_mst m, mv_ret_return_dtl d, mv_invoice_mst i
                             where   m.ret_recv_mst_slno = d.ret_recv_mst_slno
                             and     m.invoice_no=i.invoice_no
                             and     i.inv_type_code = 'INV001'
                             and    trunc(i.invoice_date) between trunc(sysdate-30) AND trunc(sysdate-1)                               
                             group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,d.product_code
                             
                             
                             
                             UNION ALL
                                
                                
                              select m.customer_code,
                                     m.market_code,
                                     m.route_code,
                                     m.retailer_code,                      
                                     d.product_code,
                                     0 return_qty,
                                     0 return_value,
                                     0 ret_bns_qty,
                                     0 ret_trd_qty,
                                     sum (bonus_price_discount) bns_disc_ret,
                                     0 spec_bonus_qty
                              from   mv_ret_return_mst m, mv_ret_return_dtl d, mv_invoice_mst i
                              where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                              and    m.invoice_no=i.invoice_no
                              and    i.inv_type_code = 'INV001'
                              and    trunc(i.invoice_date)  between trunc(sysdate-30) AND trunc(sysdate-1)                                
                              group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,d.product_code
                                
                                
                                
                                UNION ALL
                                
                                
                                
                              select m.customer_code,
                                     m.market_code,
                                     m.route_code,
                                     m.retailer_code,                      
                                     b.product_code,
                                     0 return_qty,
                                     0 return_value,
                                     sum (b.bonus_qty) ret_bns_qty,
                                     0 ret_trd_qty,
                                     0 bns_disc_ret,
                                     0 spec_bonus_qty
                              from   mv_ret_return_mst m, mv_ret_return_dtl d, mv_ret_return_bonus b, mv_invoice_mst i
                              where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                              and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                              and    m.invoice_no=i.invoice_no
                              and    i.inv_type_code = 'INV001' 
                              and    trunc(i.invoice_date)  between trunc(sysdate-30) AND trunc(sysdate-1)                                                 
                              group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,b.product_code
                                
                                
                                
                                UNION ALL
                                
                                
                                
                              select m.customer_code,
                                     m.market_code,
                                     m.route_code,
                                     m.retailer_code,                      
                                     b.product_code,
                                     0 return_qty,
                                     0 return_value,
                                     0 ret_bns_qty,
                                     sum (b.trade_qty) ret_trd_qty,
                                     0 bns_disc_ret,
                                     0 spec_bonus_qty
                              from   mv_ret_return_mst m, mv_ret_return_dtl d, mv_ret_return_trade b, mv_invoice_mst i
                              where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                              and    d.ret_recv_dtl_slno = b.ret_recv_dtl_slno
                              and    m.invoice_no=i.invoice_no
                              and    i.inv_type_code = 'INV001' 
                              and    trunc(i.invoice_date)  between trunc(sysdate-30) AND trunc(sysdate-1)                                                 
                              group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,b.product_code
                                
                                
                                
                                
                                UNION ALL
                                
                                
                                
                              select m.customer_code,
                                     m.market_code,
                                     m.route_code,
                                     m.retailer_code,                      
                                     d.product_code,
                                     0 return_qty,
                                     0 return_value,
                                     0 ret_bns_qty,
                                     0 ret_trd_qty,
                                     0 bns_disc_ret,
                                     sum (d.spec_bonus_qty) spec_bonus_qty
                              from   mv_ret_return_mst m, mv_ret_return_spec_bonus d, mv_invoice_mst i
                              where  m.ret_recv_mst_slno = d.ret_recv_mst_slno
                              and    m.invoice_no=i.invoice_no
                              and    i.inv_type_code = 'INV001'  
                              and    trunc(i.invoice_date)  between trunc(sysdate-30) AND trunc(sysdate-1)                                                             
                              group by  m.customer_code,m.market_code,m.route_code,m.retailer_code,d.product_code
                                
                                
                                )
                      group by  customer_code,market_code,route_code,retailer_code,product_code
                
                
                     union all
                     
                     
                        select   customer_code,
                                 market_code,
                                 route_code,
                                 retailer_code,
                                 d.product_code,
                                 0 issued_qty,
                                 0 bonus_qty,
                                 0 bonus_price_discount,
                                 0 invoice_amt,
                                 0 replace_qty,                                  
                                 0 return_sales_qty,
                                 0 return_value,
                                 0 return_bns_qty,
                                 0 bns_disc_ret,                                
                                count(invoice_no) number_of_invoice 
                        from mv_invoice_mst m, mv_invoice_dtl d
                        where m.inv_mst_slno=d.inv_mst_slno
                        and    m.inv_type_code = 'INV001'
                        and    trunc(m.invoice_date) between trunc(sysdate-30) AND trunc(sysdate-1)  
                        group by customer_code,market_code,route_code,retailer_code,d.product_code                     
                
                
                
                )          
             group by  customer_code,market_code,route_code,retailer_code,product_code
    ) a, mv_division_customer_relation b,mv_route_info c,mv_retailer_info d,mv_product_info p
where a.market_code=b.market_code(+)
and   a.route_code=c.route_code
and   a.retailer_code=d.retailer_code
and   a.product_code=p.product_code(+)
*/
;


COMMENT ON MATERIALIZED VIEW MV_RET_PROD_IMS_LAST_30DAYS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_PROD_IMS_LAST_30DAYS';

CREATE MATERIALIZED VIEW MV_MTD_LIFTING_ACV_GROWTH_DASH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */
      SYSDATE refresh_date,
       ROUND (SUM (NET_LIFTING_TARGET_VALUE) / 10000000, 2)
          NET_LIFTING_TARGET_VALUE,
       ROUND (SUM (CYM_ACTUAL_LIFTING_VALUE) / 10000000, 2)
          CYM_ACTUAL_LIFTING_VALUE,
       ROUND (SUM (PYM_ACTUAL_LIFTING_VALUE) / 10000000, 2)
          PYM_ACTUAL_LIFTING_VALUE,
       ROUND (
            SUM (CYM_ACTUAL_LIFTING_VALUE)
          / SUM (NET_LIFTING_TARGET_VALUE)
          * 100,
          2)
          ACH_PCT,
       ROUND (
            (SUM (CYM_ACTUAL_LIFTING_VALUE) - SUM (PYM_ACTUAL_LIFTING_VALUE))
          / SUM (PYM_ACTUAL_LIFTING_VALUE)
          * 100,
          2)
          GROWTH
  FROM (SELECT DECODE(NET_LIFTING_TARGET_VALUE,NULL,1,NET_LIFTING_TARGET_VALUE)NET_LIFTING_TARGET_VALUE,
               0 CYM_ACTUAL_LIFTING_VALUE,
               0 PYM_ACTUAL_LIFTING_VALUE
          FROM MV_BUDGETED_NET_LIFTING_TARGET
         WHERE YEAR || MONTH_CODE =
                  TO_CHAR (TRUNC (SYSDATE - 1, 'MM'), 'YYYYMM')
        UNION ALL
        SELECT 0 NET_LIFTING_TARGET_VALUE,
               SUM (CYM_ACTUAL_LIFTING_VALUE) CYM_ACTUAL_LIFTING_VALUE,
               SUM (PYM_ACTUAL_LIFTING_VALUE) PYM_ACTUAL_LIFTING_VALUE
          FROM SPA_SFBL.VW_ACTUAL_LIFTING_VAL_MONTHLY@DL_SPASFBL.SQUAREGROUP.COM);


COMMENT ON MATERIALIZED VIEW MV_MTD_LIFTING_ACV_GROWTH_DASH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MTD_LIFTING_ACV_GROWTH_DASH';

CREATE MATERIALIZED VIEW MV_MTD_IMS_ACV_GROWTH_DASH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */
      SYSDATE refresh_date,
       ROUND (SUM (TARGET_VAL) / 10000000, 2) CYM_TARGET_VAL,
       ROUND (SUM (PYM_IMS_SALES_VAL) / 10000000, 2) PYM_IMS_SALES_VAL,
       ROUND (SUM (CYM_IMS_SALES_VAL) / 10000000, 2) CYM_IMS_SALES_VAL,
       ROUND (SUM (CYM_IMS_SALES_VAL) / SUM (TARGET_VAL) * 100, 2) ACH_PCT,
       ROUND (
            (SUM (CYM_IMS_SALES_VAL) - SUM (PYM_IMS_SALES_VAL))
          / SUM (PYM_IMS_SALES_VAL)
          * 100,
          2)
          GROWTH
  FROM (SELECT DECODE (NET_IMS_TARGET_VALUE,NULL, 1,NET_IMS_TARGET_VALUE)TARGET_VAL,
               0 CYM_IMS_SALES_VAL,
               0 PYM_IMS_SALES_VAL
          FROM MV_BUDGETED_NET_IMS_TARGET
         WHERE YEAR || MONTH_CODE =
                  TO_CHAR (TRUNC (SYSDATE - 1, 'MM'), 'YYYYMM')
        UNION ALL
        SELECT 0 TARGET_VAL,
               SUM (NVL (NET_IMS, 0)) CYM_IMS_SALES_VAL,
               0 PYM_IMS_SALES_VAL
          FROM MV_MARKET_PROD_IMS_CMONTH
        UNION ALL
        SELECT 0 TARGET_VAL,
               0 CYM_IMS_SALES_VAL,
               SUM (NVL (PYM_IMS_SALES_VAL, 0)) PYM_IMS_SALES_VAL
          FROM (  SELECT I.INVOICE_NO,
                         NVL (I.GRAND_TOTAL, 0) GRAND_TOTAL,
                         NVL (R.RETURN_VALUE, 0) RETURN_VALUE,
                         (  SUM (NVL (GRAND_TOTAL, 0))
                          - SUM (NVL (RETURN_VALUE, 0)))
                            PYM_IMS_SALES_VAL
                    FROM MV_INVOICE_MST_ARC I, MV_RET_RETURN_MST_ARC R
                   WHERE     I.INVOICE_NO = R.INVOICE_NO(+)
                         AND TRUNC (I.INVOICE_DATE) BETWEEN TO_DATE (
                                                               TRUNC (
                                                                  ADD_MONTHS (
                                                                       SYSDATE
                                                                     - 1,
                                                                     -12),
                                                                  'MM'),
                                                               'DD/MM/RRRR')
                                                        AND TO_DATE (
                                                               TRUNC (
                                                                  ADD_MONTHS (
                                                                       SYSDATE
                                                                     - 1,
                                                                     -12)),
                                                               'DD/MM/RRRR')
                GROUP BY I.INVOICE_NO, I.GRAND_TOTAL, R.RETURN_VALUE));


COMMENT ON MATERIALIZED VIEW MV_MTD_IMS_ACV_GROWTH_DASH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MTD_IMS_ACV_GROWTH_DASH';

CREATE MATERIALIZED VIEW MV_INVOICE_BONUS_SLAB_DTL_V1 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,

       ORDER_MST_SLNO, INV_MST_SLNO, INV_DTL_SLNO, ISSUE_PRODUCT_CODE, 
       BONUS_PRODUCT_CODE, SLAB_QTY, BONUS_QTY, BONUS_VALUE, 
       BONUS_TYPE, BONUS_SLAB_TYPE, BNS_DEC_QTY
FROM spa_sfbl.vw_invoice_bonus_slab_dtl_v1@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_BONUS_SLAB_DTL_V1 IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_BONUS_SLAB_DTL_V1';

CREATE MATERIALIZED VIEW MV_RETURN_BONUS_SLAB_DTL_V1 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
       invoice_no, inv_dtl_slno, inv_mst_slno, product_code, bonus_product_code, 
       slab_qty, bonus_qty, status, ret_bns_back_qty
FROM spa_sfbl.vw_return_bonus_slab_dtl_v1@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RETURN_BONUS_SLAB_DTL_V1 IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETURN_BONUS_SLAB_DTL_V1';

CREATE MATERIALIZED VIEW MV_FSO_WISE_FIRST_LAST_INVOICE 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ SYSDATE REFRESH_DATE,
       D.CUSTOMER_CODE,
       D.CUSTOMER_NAME,
       D.DB_LOCATION,
       C.MARKET_CODE,
       E.MARKET_NAME,
       A.EMPLOYEE_CODE,
       B.EMPLOYEE_NAME,
       B.JOINING_DATE,
       B.CONTACT_NO MOBILE_NO,
       FIRST_INVOICE_NO,       
       TO_CHAR(A.FIRST_INVOICE_DATE,'MM/DD/RRRR HH:MI:SS AM')FIRST_INVOICE_DATE,
       LAST_INVOICE_NO,
       TO_CHAR(A.LAST_INVOICE_DATE,'MM/DD/RRRR HH:MI:SS AM')LAST_INVOICE_DATE,
       DECODE(B.STATUS,'A','Active','I','Inactive') STATUS
FROM
    (
        SELECT  EMPLOYEE_CODE,
                MIN(INVOICE_NO) FIRST_INVOICE_NO,
                MIN (INVOICE_DATE) FIRST_INVOICE_DATE,
                MAX(INVOICE_NO) LAST_INVOICE_NO,
                MAX (INVOICE_DATE) LAST_INVOICE_DATE
        FROM (               
              SELECT EMPLOYEE_CODE, INVOICE_NO,INVOICE_DATE 
              FROM SPA_SFBL.VW_INVOICE_MST@DL_SPASFBL.SQUAREGROUP.COM                         
              )
        GROUP BY EMPLOYEE_CODE    
    ) A,SPA_SFBL.EMPLOYEE_INFO@DL_SPASFBL.SQUAREGROUP.COM B,
     (
     SELECT DISTINCT EMPLOYEE_CODE,MARKET_CODE FROM SPA_SFBL.VW_MAR_ROUTE_RET_SR@DL_SPASFBL.SQUAREGROUP.COM
     )C,SPA_SFBL.VW_LOCATION_RELATION@DL_SPASFBL.SQUAREGROUP.COM D,SPA_SFBL.MARKET_INFO@DL_SPASFBL.SQUAREGROUP.COM E
WHERE A.EMPLOYEE_CODE=B.EMPLOYEE_CODE 
AND   A.EMPLOYEE_CODE=C.EMPLOYEE_CODE  
AND   C.MARKET_CODE=D.MARKET_CODE 
AND   C.MARKET_CODE=E.MARKET_CODE;


COMMENT ON MATERIALIZED VIEW MV_FSO_WISE_FIRST_LAST_INVOICE IS 'snapshot table for snapshot SPA_SFBL_BI.MV_FSO_WISE_FIRST_LAST_INVOICE';

CREATE MATERIALIZED VIEW MV_ALL_FSO_FIRST_LAST_INVOICE 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ SYSDATE REFRESH_DATE,       
       A.EMPLOYEE_CODE,
       B.EMPLOYEE_NAME,
       B.JOINING_DATE,
       B.CONTACT_NO MOBILE_NO,
       FIRST_INVOICE_NO,       
       TO_CHAR(A.FIRST_INVOICE_DATE,'MM/DD/RRRR HH:MI:SS AM')FIRST_INVOICE_DATE,
       LAST_INVOICE_NO,
       TO_CHAR(A.LAST_INVOICE_DATE,'MM/DD/RRRR HH:MI:SS AM')LAST_INVOICE_DATE,
       DECODE(B.STATUS,'A','Active','I','Inactive') STATUS
FROM
    (
        SELECT  EMPLOYEE_CODE,
                MIN(INVOICE_NO) FIRST_INVOICE_NO,
                MIN (INVOICE_DATE) FIRST_INVOICE_DATE,
                MAX(INVOICE_NO) LAST_INVOICE_NO,
                MAX (INVOICE_DATE) LAST_INVOICE_DATE
        FROM (               
              SELECT EMPLOYEE_CODE, INVOICE_NO,INVOICE_DATE 
              FROM SPA_SFBL.VW_INVOICE_MST@DL_SPASFBL.SQUAREGROUP.COM                         
              )
        GROUP BY EMPLOYEE_CODE    
    ) A,SPA_SFBL.EMPLOYEE_INFO@DL_SPASFBL.SQUAREGROUP.COM B
    
WHERE A.EMPLOYEE_CODE=B.EMPLOYEE_CODE;


COMMENT ON MATERIALIZED VIEW MV_ALL_FSO_FIRST_LAST_INVOICE IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ALL_FSO_FIRST_LAST_INVOICE';

CREATE MATERIALIZED VIEW MV_REL_FSO_FIRST_LAST_INVOICE 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ SYSDATE REFRESH_DATE,
       D.CUSTOMER_CODE,
       D.CUSTOMER_NAME,
       D.DB_LOCATION,
       C.MARKET_CODE,
       E.MARKET_NAME,
       A.EMPLOYEE_CODE,
       B.EMPLOYEE_NAME,
       B.JOINING_DATE,
       B.CONTACT_NO MOBILE_NO,
       FIRST_INVOICE_NO,       
       TO_CHAR(A.FIRST_INVOICE_DATE,'MM/DD/RRRR HH:MI:SS AM')FIRST_INVOICE_DATE,
       LAST_INVOICE_NO,
       TO_CHAR(A.LAST_INVOICE_DATE,'MM/DD/RRRR HH:MI:SS AM')LAST_INVOICE_DATE,
       DECODE(B.STATUS,'A','Active','I','Inactive') STATUS
FROM
    (
        SELECT  EMPLOYEE_CODE,
                MIN(INVOICE_NO) FIRST_INVOICE_NO,
                MIN (INVOICE_DATE) FIRST_INVOICE_DATE,
                MAX(INVOICE_NO) LAST_INVOICE_NO,
                MAX (INVOICE_DATE) LAST_INVOICE_DATE
        FROM (               
              SELECT EMPLOYEE_CODE, INVOICE_NO,INVOICE_DATE 
              FROM SPA_SFBL.VW_INVOICE_MST@DL_SPASFBL.SQUAREGROUP.COM                         
              )
        GROUP BY EMPLOYEE_CODE    
    ) A,SPA_SFBL.EMPLOYEE_INFO@DL_SPASFBL.SQUAREGROUP.COM B,
     (
     SELECT DISTINCT EMPLOYEE_CODE,MARKET_CODE FROM SPA_SFBL.VW_MAR_ROUTE_RET_SR@DL_SPASFBL.SQUAREGROUP.COM
     )C,SPA_SFBL.VW_LOCATION_RELATION@DL_SPASFBL.SQUAREGROUP.COM D,SPA_SFBL.MARKET_INFO@DL_SPASFBL.SQUAREGROUP.COM E
WHERE A.EMPLOYEE_CODE=B.EMPLOYEE_CODE 
AND   A.EMPLOYEE_CODE=C.EMPLOYEE_CODE  
AND   C.MARKET_CODE=D.MARKET_CODE 
AND   C.MARKET_CODE=E.MARKET_CODE;


COMMENT ON MATERIALIZED VIEW MV_REL_FSO_FIRST_LAST_INVOICE IS 'snapshot table for snapshot SPA_SFBL_BI.MV_REL_FSO_FIRST_LAST_INVOICE';

CREATE MATERIALIZED VIEW MV_PRODUCT_INFORMATION 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
          sysdate refresh_date,
          
        /*product_code, product_name, product_name_bn, pack_size, base_product_code, base_product_name, brand_code, brand_name, 
         product_category_code, product_category_name, bonus_allow, discount_allow, discount_type, discount_val, 
         shipper_qty, status, cp_flag, unit_tp, unit_vat, mrp, first_invoice_date, last_invoice_date
          from spa_sfbl.view_product_information@dl_spasfbl.squaregroup.com*/          
          
          a.product_code,
          a.product_name,
          a.product_name_bn,
          a.pack_size,
          a.base_product_code,
          d.base_product_name,
          a.brand_code,
          b.brand_name,
          a.product_category product_category_code,
          c.category_name product_category_name,
          DECODE (a.bonus_allow,  'Y', 'Yes',  'N', 'No') bonus_allow,
          DECODE (a.discount_allow,  'Y', 'Yes',  'N', 'No') discount_allow,
          DECODE (a.DISCOUNT_TYPE,  'P', 'Percentage',  'F', 'Fixed')
             discount_type,
          a.discount_val,
          a.shipper_qty,
          DECODE (a.status,  'A', 'Active',  'I', 'Inactive') status,
          DECODE (a.cp_flag,  'Y', 'Yes',  'N', 'No') cp_flag,
          e.unit_tp,
          e.unit_vat,
          e.mrp,
          f.first_invoice_date,
          f.last_invoice_date
     FROM mv_product_info a,
          (  SELECT product_code,
                    MIN (invoice_date) first_invoice_date,
                    MAX (invoice_date) last_invoice_date
               FROM (SELECT b.product_code, TRUNC (a.invoice_date) invoice_date
                       FROM vw_invoice_mst a, vw_invoice_dtl b
                      WHERE a.inv_mst_slno = b.inv_mst_slno
                     UNION ALL
                     SELECT c.product_code, TRUNC (a.invoice_date) invoice_date
                       FROM vw_invoice_mst a,
                            vw_invoice_dtl b,
                            vw_invoice_bonus c
                      WHERE     a.inv_mst_slno = b.inv_mst_slno
                            AND b.inv_dtl_slno = c.inv_dtl_slno)
           GROUP BY product_code) f,
          mv_brand_info b,
          mv_category_info c,
          mv_base_product_info d,
          mv_product_price e
    WHERE     a.brand_code = b.brand_code(+)
          AND a.product_category = c.category_code(+)
          AND a.base_product_code = d.base_product_code(+)
          AND a.product_code = e.product_code(+)
          AND a.product_code = f.product_code(+);


COMMENT ON MATERIALIZED VIEW MV_PRODUCT_INFORMATION IS 'snapshot table for snapshot SPA_SFBL_BI.MV_PRODUCT_INFORMATION';

CREATE MATERIALIZED VIEW MV_DIVISION_MARKET_RELATION 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select distinct sysdate refresh_date,zone_code, zone_name, area_code, area_name, belt_code, belt_name, territory_code, territory_name, 
     market_code, market_name
from spa_sfbl.vw_location_relation@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIVISION_MARKET_RELATION IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIVISION_MARKET_RELATION';

CREATE MATERIALIZED VIEW MV_DIVISION_MARKET_IMS_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select  sysdate refresh_date,

         /*
         select  sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, return_value, 
        return_slab_adjust, net_return_val, net_ims, no_of_replace_inv, 
        replace_inv_amt, target_val, no_of_retailer, no_of_ord_retailer  
        from spa_sfbl.view_market_ims_cmonth@dl_spasfbl.squaregroup.com;
        */

          b.zone_code division_code,
          b.zone_name division_name,
          b.area_code region_code,
          b.area_name region_name,
          b.belt_code area_code,
          b.belt_name area_name,
          b.territory_code,
          b.territory_name,
          a.market_code,
          b.market_name,
          a.customer_code,
          c.customer_name,
          c.db_location,
          a.no_of_inv,
          a.total_inv_amt,
          a.slab_adjustment,
          a.net_inv_amount,
          a.return_value,
          a.return_slab_adjust,
          a.net_return_val,
          a.net_ims,
          a.no_of_replace_inv,
          a.replace_inv_amt,
          a.target_val,
          a.no_of_retailer,
          a.no_of_ord_retailer
     FROM (SELECT customer_code,
                  market_code,
                  NVL (no_of_inv, 0) no_of_inv,
                  NVL (total_inv_amt, 0) total_inv_amt,
                  NVL (slab_adjustment, 0) slab_adjustment,
                  NVL (net_inv_amount, 0) net_inv_amount,
                  NVL (return_value, 0) return_value,
                  NVL (return_slab_adjust, 0) return_slab_adjust,
                  NVL (net_return_val, 0) net_return_val,
                  NVL (net_inv_amount, 0) - NVL (net_return_val, 0) net_ims,
                  NVL (no_of_replace_inv, 0) no_of_replace_inv,
                  NVL (replace_inv_amt, 0) replace_inv_amt,
                  NVL (target_val, 0) target_val,
                  NVL (no_of_retailer, 0) no_of_retailer,
                  NVL (no_of_ord_retailer, 0) no_of_ord_retailer
             FROM (  SELECT customer_code,
                            market_code,
                            SUM (no_of_inv) no_of_inv,
                            SUM (total_inv_amt) total_inv_amt,
                            SUM (slab_adjustment) slab_adjustment,
                            SUM (net_inv_amount) net_inv_amount,
                            SUM (return_value) return_value,
                            SUM (return_slab_adjust) return_slab_adjust,
                            SUM (net_return_val) net_return_val,
                            SUM (no_of_replace_inv) no_of_replace_inv,
                            SUM (replace_inv_amt) replace_inv_amt,
                            SUM (target_val) target_val,
                            SUM (no_of_retailer) no_of_retailer,
                            SUM (no_of_ord_retailer) no_of_ord_retailer
                       FROM (  SELECT customer_code,
                                      market_code,
                                      COUNT (invoice_no) no_of_inv,
                                      SUM (total_inv_amt) total_inv_amt,
                                      SUM (slab_adjustment) slab_adjustment,
                                      SUM (net_inv_amount) net_inv_amount,
                                      0 return_value,
                                      0 return_slab_adjust,
                                      0 net_return_val,
                                      0 no_of_replace_inv,
                                      0 replace_inv_amt,
                                      0 target_val,
                                      0 no_of_retailer,
                                      0 no_of_ord_retailer
                                 FROM (SELECT customer_code,
                                              market_code,
                                              invoice_no,
                                              NVL (grand_total, 0) total_inv_amt,
                                                NVL (slab_adjustment, 0)
                                              + NVL (special_bonus_disc, 0)
                                                 slab_adjustment,
                                              NVL (net_inv_amount, 0)
                                                 net_inv_amount
                                         FROM mv_invoice_mst
                                        WHERE     inv_type_code = 'INV001'
                                              AND TRUNC (invoice_date) BETWEEN TRUNC (
                                                                                    SYSDATE
                                                                                  - 1,
                                                                                  'MM')
                                                                           AND TRUNC (
                                                                                    SYSDATE
                                                                                  - 1))
                             GROUP BY customer_code, market_code
                             UNION ALL
                               SELECT customer_code,
                                      market_code,
                                      0 no_of_inv,
                                      0 total_inv_amt,
                                      0 slab_adjustment,
                                      0 net_inv_amount,
                                      SUM (return_value) return_value,
                                      SUM (return_slab_adjust) return_slab_adjust,
                                      SUM (net_return_val) net_return_val,
                                      0 no_of_replace_inv,
                                      0 replace_inv_amt,
                                      0 target_val,
                                      0 no_of_retailer,
                                      0 no_of_ord_retailer
                                 FROM (
                                 
                                 
                                 SELECT customer_code,
                                        market_code,
                                        NVL (return_value, 0) return_value,
                                        NVL (return_slab_amount, 0)+ NVL (special_bonus_disc, 0)return_slab_adjust,
                                        NVL (net_return_val, 0)net_return_val
                                        FROM mv_ret_return_mst
                                        WHERE     TRUNC (invoice_date) BETWEEN TRUNC (SYSDATE - 1,'MM')AND TRUNC (SYSDATE- 1)
                                        AND inv_type_code = 'INV001'
                                        
                                        
                                        )
                             GROUP BY customer_code, market_code
                             
                             
                             
                             UNION ALL
                               SELECT customer_code,
                                      market_code,
                                      0 no_of_inv,
                                      0 total_inv_amt,
                                      0 slab_adjustment,
                                      0 net_inv_amount,
                                      0 return_value,
                                      0 return_slab_adjust,
                                      0 net_return_val,
                                      COUNT (NVL (invoice_no, 0))
                                         no_of_replace_inv,
                                      SUM (NVL (replace_inv_amt, 0))
                                         replace_inv_amt,
                                      0 target_val,
                                      0 no_of_retailer,
                                      0 no_of_ord_retailer
                                 FROM (SELECT customer_code,
                                              market_code,
                                              invoice_no,
                                              NVL (net_inv_amount, 0)
                                                 replace_inv_amt
                                         FROM mv_invoice_mst
                                        WHERE     TRUNC (invoice_date) BETWEEN TRUNC (
                                                                                    SYSDATE
                                                                                  - 1,
                                                                                  'MM')
                                                                           AND TRUNC (
                                                                                    SYSDATE
                                                                                  - 1)
                                              AND inv_type_code = 'INV002')
                             GROUP BY customer_code, market_code
                             UNION ALL
                               SELECT b.customer_code,
                                      a.market_code,
                                      0 no_of_inv,
                                      0 total_inv_amt,
                                      0 slab_adjustment,
                                      0 net_inv_amount,
                                      0 return_value,
                                      0 return_slab_adjust,
                                      0 net_return_val,
                                      0 no_of_replace_inv,
                                      0 replace_inv_amt,
                                      SUM (NVL (a.target_val, 0)) target_val,
                                      0 no_of_retailer,
                                      0 no_of_ord_retailer
                                 FROM mv_target_l3years a,
                                      mv_division_customer_relation b
                                WHERE     a.market_code = b.market_code
                                      AND (a.year || a.month_code) =
                                             TO_CHAR (TRUNC (SYSDATE - 1, 'MM'),
                                                      'YYYYMM')
                             GROUP BY b.customer_code, a.market_code
                             UNION ALL
                               SELECT customer_code,
                                      market_code,
                                      0 no_of_inv,
                                      0 total_inv_amt,
                                      0 slab_adjustment,
                                      0 net_inv_amount,
                                      0 return_value,
                                      0 return_slab_adjust,
                                      0 net_return_val,
                                      0 no_of_replace_inv,
                                      0 replace_inv_amt,
                                      0 target_val,
                                      SUM (no_of_retailer) no_of_retailer,
                                      SUM (no_of_ord_retailer) no_of_ord_retailer
                                 FROM (  SELECT m.customer_code,
                                                a.market_code,
                                                COUNT (a.retailer_code)
                                                   no_of_retailer,
                                                0 no_of_ord_retailer
                                           FROM mv_division_retailer_relation a,
                                                mv_customer_mkt_mst m,
                                                mv_customer_mkt_dtl d
                                          WHERE     a.market_code = d.market_code
                                                AND m.cust_mkt_mst_slno =
                                                       d.cust_mkt_mst_slno
                                       GROUP BY m.customer_code, a.market_code
                                       UNION ALL
                                         SELECT customer_code,
                                                market_code,
                                                0 no_of_retailer,
                                                COUNT (retailer_code)
                                                   no_of_ord_retailer
                                           FROM (SELECT DISTINCT
                                                        customer_code,
                                                        market_code,
                                                        retailer_code
                                                   FROM mv_order_mst
                                                  WHERE TRUNC (order_date) BETWEEN TRUNC (
                                                                                        SYSDATE
                                                                                      - 1,
                                                                                      'MM')
                                                                               AND TRUNC (
                                                                                        SYSDATE
                                                                                      - 1))
                                       GROUP BY customer_code, market_code)
                             GROUP BY customer_code, market_code)
                   GROUP BY customer_code, market_code)) a,
          (SELECT DISTINCT zone_code,
                           zone_name,
                           area_code,
                           area_name,
                           belt_code,
                           belt_name,
                           territory_code,
                           territory_name,
                           customer_code,
                           customer_name,
                           market_code,
                           market_name
             FROM mv_division_customer_relation) b,
          mv_customer_info c
    WHERE     a.market_code = b.market_code(+)
          AND a.customer_code = c.customer_code(+);


COMMENT ON MATERIALIZED VIEW MV_DIVISION_MARKET_IMS_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIVISION_MARKET_IMS_CMONTH';

CREATE MATERIALIZED VIEW MV_INVOICE_DISPLAY_BONUS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_display_bns_slno, inv_mst_slno, customer_code, invoice_date, product_code, product_batch_no, lot_no,
     display_bonus_qty, product_price, display_prod_val
from spa_sfbl.invoice_display_bonus@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_DISPLAY_BONUS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_DISPLAY_BONUS';

CREATE MATERIALIZED VIEW MV_DIST_WISE_PIPELINE_STK 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */
      SYSDATE refresh_date,
       division_code,
       division_name,
       region_code,
       region_name,
       area_code,
       area_name,
       territory_code,
       territory_name,
       db_location,
       customer_code,
       customer_name,
       invoice_no,
       invoice_date ,
       requisition_no,
       requisition_date  ,
       product_code,
       product_name,
       pack_size,
       trade_price,
       stock_qty,
       pipeline_qty
  FROM spa_sfbl.VW_DIST_WISE_PIPELINE_STK @dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_WISE_PIPELINE_STK IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_WISE_PIPELINE_STK';

CREATE MATERIALIZED VIEW MV_TRADE_PROGRAM_PARTICIPATION 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, customer_code, customer_name, 
     db_location, market_code, market_name, route_code, route_name, retailer_code, retailer_name, trade_program_no, program_name, 
     effect_type, trade_policy_no, slab_target_val, slab_upper_amt, no_of_inv, gift, discount_amt, discount_percentage, 
     entry_date, program_type_code, program_type, effect_from_date, effect_to_date, sales_value, return_value, ims_value
from  spa_sfbl.vw_trade_program_participation@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TRADE_PROGRAM_PARTICIPATION IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TRADE_PROGRAM_PARTICIPATION';

CREATE MATERIALIZED VIEW MV_TT_TRADE_GIFT_ITEM_QTY_V1 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_mst_slno, retailer_code, gift_item_code, item_qty
from spa_sfbl.tt_trade_gift_item_qty_v1@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TT_TRADE_GIFT_ITEM_QTY_V1 IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TT_TRADE_GIFT_ITEM_QTY_V1';

CREATE MATERIALIZED VIEW MV_INVOICE_PROD_IMS_PMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,  
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, route_code, route_name, retailer_code, retailer_name, base_product_code, base_product_name, 
        brand_code, brand_name, product_category_code, product_category_name, invoice_no, invoice_date, product_code, product_name, pack_size, 
        product_price, invoice_amt, sales_qty, sales_bonus_qty, bonus_price_discount, replace_qty, return_sales_qty, return_bns_qty, 
        ims_sales_qty, ims_bns_qty, return_value, bns_disc_ret, discount_val, net_ims, number_of_invoice, target_qty
from spa_sfbl.view_invoice_prod_ims_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_PROD_IMS_PMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_PROD_IMS_PMONTH';

CREATE MATERIALIZED VIEW MV_INVOICE_GIFT_DETAILS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     invoice_no, retailer_code, customer_code, gift_item, inv_mst_slno
from spa_sfbl.invoice_gift_details@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_GIFT_DETAILS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_GIFT_DETAILS';

CREATE MATERIALIZED VIEW MV_VIEW_CUST_ORDER_SUMMARY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     order_date, customer_code, market_code, route_code, total_route_retailer, no_of_route_visit, total_visit_retailer, no_of_normal_order, 
     no_of_replace_order, order_value, no_of_ordering_ret, no_of_ordering_sku
from spa_sfbl.view_cust_order_summary@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_VIEW_CUST_ORDER_SUMMARY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_VIEW_CUST_ORDER_SUMMARY';

CREATE MATERIALIZED VIEW MV_INVOICE_TRADE_BONUS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT  SYSDATE refresh_date,
       INV_TRADE_BNS_SLNO, 
      INV_MST_SLNO, 
      CUSTOMER_CODE, 
      INVOICE_DATE, 
      PRODUCT_CODE, 
      PRODUCT_BATCH_NO, 
      LOT_NO, 
      TRADE_BONUS_QTY, 
      PRODUCT_PRICE, 
      TRADE_BONUS_VAL
      FROM spa_sfbl.INVOICE_TRADE_BONUS@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_TRADE_BONUS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_TRADE_BONUS';

CREATE MATERIALIZED VIEW MV_MOM_RETAIL_PRODUCT_TREND_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
       sysdate refresh_date, 
       b.zone_code division_code,
       b.zone_name division_name,
       b.area_code region_code,
       b.area_name region_name,
       b.belt_code area_code,
       b.belt_name area_name,
       b.territory_code,
       b.territory_name,
       a.customer_code,
       b.customer_name,
       b.db_location,
       a.market_code,
       b.market_name,
       a.route_code,
       d.route_name,
       a.retailer_code, 
       c.retailer_name,
       e.brand_code, 
       e.product_category, 
       e.base_product_code,
       a.product_code,
       e.product_name,
       e.pack_size,
       jan_sales_qty,
       jan_sales_val,
       
       feb_sales_qty,
       feb_sales_val,
       
       mar_sales_qty,
       mar_sales_val,
       
       apr_sales_qty,
       apr_sales_val,
       
       may_sales_qty,
       may_sales_val,
       
       jun_sales_qty,
       jun_sales_val,
       
       jul_sales_qty,
       jul_sales_val,
       
       aug_sales_qty,
       aug_sales_val,
       
       sep_sales_qty,
       sep_sales_val,
       
       oct_sales_qty,
       oct_sales_val,
       
       nov_sales_qty,
       nov_sales_val,
              
       dec_sales_qty, 
       dec_sales_val,
       
       nvl(jan_sales_qty,0)+nvl(feb_sales_qty,0)+nvl(mar_sales_qty,0)+nvl(apr_sales_qty,0)+nvl(may_sales_qty,0)+nvl(jun_sales_qty,0)+nvl(jul_sales_qty,0)+nvl(aug_sales_qty,0)+nvl(sep_sales_qty,0)+nvl(oct_sales_qty,0)+nvl(nov_sales_qty,0)+nvl(dec_sales_qty,0) total_sales_qty,
       
        nvl(jan_sales_val,0)+nvl(feb_sales_val,0)+nvl(mar_sales_val,0)+nvl(apr_sales_val,0)+nvl(may_sales_val,0)+nvl(jun_sales_val,0)+nvl(jul_sales_val,0)+nvl(aug_sales_val,0)+nvl(sep_sales_val,0)+nvl(oct_sales_val,0)+nvl(nov_sales_val,0)+nvl(dec_sales_val,0) total_sales_val
                  
from
   (
    select a.customer_code,
           a.market_code,
           a.route_code,
           a.retailer_code, 
           a.product_code,
           sum(nvl(jan_sales_qty,0)) jan_sales_qty,
           sum(nvl(jan_sales_val,0)) jan_sales_val,
           
           sum(nvl(feb_sales_qty,0)) feb_sales_qty,
           sum(nvl(feb_sales_val,0)) feb_sales_val,
           
           sum(nvl(mar_sales_qty,0)) mar_sales_qty,
           sum(nvl(mar_sales_val,0)) mar_sales_val,
           
           sum(nvl(apr_sales_qty,0)) apr_sales_qty,
           sum(nvl(apr_sales_val,0)) apr_sales_val,
           
           sum(nvl(may_sales_qty,0)) may_sales_qty,
           sum(nvl(may_sales_val,0)) may_sales_val,
           
           sum(nvl(jun_sales_qty,0)) jun_sales_qty,
           sum(nvl(jun_sales_val,0)) jun_sales_val,
           
           sum(nvl(jul_sales_qty,0)) jul_sales_qty,
           sum(nvl(jul_sales_val,0)) jul_sales_val,
           
           sum(nvl(aug_sales_qty,0)) aug_sales_qty,
           sum(nvl(aug_sales_val,0)) aug_sales_val,
           
           sum(nvl(sep_sales_qty,0)) sep_sales_qty,
           sum(nvl(sep_sales_val,0)) sep_sales_val,
           
           sum(nvl(oct_sales_qty,0)) oct_sales_qty,
           sum(nvl(oct_sales_val,0)) oct_sales_val,
           
           sum(nvl(nov_sales_qty,0)) nov_sales_qty,
           sum(nvl(nov_sales_val,0)) nov_sales_val,
                  
           sum(nvl(dec_sales_qty,0)) dec_sales_qty, 
           sum(nvl(dec_sales_val,0)) dec_sales_val           
    from
       (

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,           
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) jan_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,

               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-12),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-12),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,               
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code, 
                         
               0 jan_sales_qty,
               0 jan_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) feb_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,

               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-11),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-11),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                             
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) mar_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,

               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-10),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-10),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0)return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code, 
                         
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) apr_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-9),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-9),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) may_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) amy_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-8),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-8),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
              nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                            
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) jun_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,           
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-7),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-7),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) jul_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-6),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-6),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                             
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,      
                    
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) aug_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-5),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-5),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                               
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) sep_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-4),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-4),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code
     
        union all
        
        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) oct_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-3),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-3),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all
        
        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) nov_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-2),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-2),'DD/MM/RRRR'))         
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                             
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code
   
        union all
        
        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,  
                        
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) dec_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_ly m, mv_invoice_dtl_ly d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-1),'DD/MM/RRRR') 
                               and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),-1),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_ly m, mv_ret_return_dtl_ly d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code
        ) a   
        group by customer_code,market_code,route_code,retailer_code, product_code
  )a,mv_division_customer_relation b,mv_retailer_info c,mv_route_info d,mv_product_info e
 where a.market_code=b.market_code(+)
 and   a.retailer_code=c.retailer_code
 and   a.route_code=d.route_code
 and   a.product_code=e.product_code;


COMMENT ON MATERIALIZED VIEW MV_MOM_RETAIL_PRODUCT_TREND_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_RETAIL_PRODUCT_TREND_LY';

CREATE MATERIALIZED VIEW MV_INVOICE_PROD_IMS_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,  
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, route_code, route_name, retailer_code, retailer_name, base_product_code, base_product_name, 
        brand_code, brand_name, product_category_code, product_category_name, invoice_no, invoice_date, product_code, product_name, pack_size, 
        product_price, invoice_amt, sales_qty, sales_bonus_qty, bonus_price_discount, replace_qty, return_sales_qty, return_bns_qty, 
        ims_sales_qty, ims_bns_qty, return_value, bns_disc_ret, discount_val, net_ims, number_of_invoice, target_qty
from spa_sfbl.view_invoice_prod_ims_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_PROD_IMS_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_PROD_IMS_CMONTH';

CREATE MATERIALIZED VIEW MV_MOM_LOC_CAT_NUMERIC_DIST_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
Select /*+ append */ 
        Sysdate Refresh_date, 
        c.zone_code division_code,
          c.zone_name division_name,
          c.area_code region_code,
          c.area_name region_name,
          c.belt_code area_code,
          c.belt_name area_name,
          c.territory_code,
          c.territory_name,
          c.db_location,
          a.customer_code,
          d.customer_name,
          a.market_code,
          c.market_name,
          a.product_category product_category_code,
          b.category_name product_category_name,
          jan,
          feb,
          mar,
          apr,
          may,
          jun,
          jul,
          aug,
          sep,
          oct,
          nov,
          dec,
          0 total
     FROM (  SELECT customer_code,
                    market_code,
                    product_category,
                    SUM (jan) jan,
                    SUM (feb) feb,
                    SUM (mar) mar,
                    SUM (apr) apr,
                    SUM (may) may,
                    SUM (jun) jun,
                    SUM (jul) jul,
                    SUM (aug) aug,
                    SUM (sep) sep,
                    SUM (oct) oct,
                    SUM (nov) nov,
                    SUM (dec) dec
               FROM (  SELECT customer_code,
                              market_code,
                              product_category,
                              COUNT (DISTINCT retailer_code) jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -12),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -12),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              COUNT (DISTINCT retailer_code) feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -11),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -11),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              COUNT (DISTINCT retailer_code) mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -10),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -10),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              COUNT (DISTINCT retailer_code) apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -9),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -9),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              COUNT (DISTINCT retailer_code) may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -8),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -8),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              COUNT (DISTINCT retailer_code) jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -7),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -7),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              COUNT (DISTINCT retailer_code) jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -6),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -6),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              COUNT (DISTINCT retailer_code) aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -5),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -5),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              COUNT (DISTINCT retailer_code) sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -4),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -4),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              COUNT (DISTINCT retailer_code) oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -3),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -3),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              COUNT (DISTINCT retailer_code) nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -2),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -2),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              COUNT (DISTINCT retailer_code) dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_ly a,
                                              mv_invoice_dtl_ly b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       -1),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          -1),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_ly a,
                                              mv_ret_return_dtl_ly b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category)
           GROUP BY customer_code, market_code, product_category) a,
          mv_category_info b,
          mv_division_customer_relation c,
          mv_customer_info d
    WHERE     a.product_category = b.category_code
          AND a.market_code = c.market_code(+)
          AND a.customer_code = d.customer_code(+);


COMMENT ON MATERIALIZED VIEW MV_MOM_LOC_CAT_NUMERIC_DIST_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_LOC_CAT_NUMERIC_DIST_LY';

CREATE MATERIALIZED VIEW MV_RET_PROD_IMS_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,  
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, route_code, route_name, retailer_code, retailer_name, base_product_code, 
        base_product_name, brand_code, brand_name, product_category_code, product_category_name, 
        product_code, product_name, pack_size, product_price, invoice_amt, sales_qty, 
        sales_bonus_qty, bonus_price_discount, replace_qty, return_sales_qty, 
        return_bns_qty, ims_sales_qty, ims_bns_qty, return_value, bns_disc_ret, 
        discount_val, net_ims, number_of_invoice, target_qty,
        last_year_as_on_date_ims_qty, last_year_as_on_date_ims_val
from spa_sfbl.view_ret_prod_ims_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_PROD_IMS_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_PROD_IMS_CMONTH';

CREATE MATERIALIZED VIEW MV_MARKET_PROD_IMS_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, db_location, customer_code, 
        customer_name, market_code, market_name, product_code, product_name, pack_size, product_price, sales_qty, 
        return_sales_qty, ims_sales_qty, bonus_qty, return_bonus_qty, ims_bonus_qty, invoice_value, return_value, 
        ims_sales_val, ims_bonus_val, bonus_price_discount, ret_bonus_price_discount, net_ims, bonus_per, 
        target_qty, target_val, last_year_as_on_date_ims_qty, last_year_as_on_date_ims_val
from spa_sfbl.view_market_prod_ims_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_MARKET_PROD_IMS_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MARKET_PROD_IMS_CMONTH';

CREATE MATERIALIZED VIEW MV_MARKET_PROD_IMS_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, db_location, customer_code, 
        customer_name, market_code, market_name, product_code, product_name, pack_size, product_price, sales_qty, return_sales_qty, 
        ims_sales_qty, bonus_qty, return_bonus_qty, ims_bonus_qty, invoice_value, return_value, ims_sales_val, ims_bonus_val, 
        bonus_price_discount, ret_bonus_price_discount, net_ims, bonus_per, target_qty, target_val, 
        last_year_as_on_date_ims_qty, last_year_as_on_date_ims_val
from spa_sfbl.view_market_prod_ims_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_MARKET_PROD_IMS_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MARKET_PROD_IMS_LMONTH';

CREATE MATERIALIZED VIEW MV_MOM_LOC_CAT_NUMERIC_DIST_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date, 

          c.zone_code division_code,
          c.zone_name division_name,
          c.area_code region_code,
          c.area_name region_name,
          c.belt_code area_code,
          c.belt_name area_name,
          c.territory_code,
          c.territory_name,
          d.db_location,
          a.customer_code,
          d.customer_name,
          a.market_code,
          c.market_name,
          a.product_category product_category_code,
          b.category_name product_category_name,
          jan,
          feb,
          mar,
          apr,
          may,
          jun,
          jul,
          aug,
          sep,
          oct,
          nov,
          dec,
          0 total
     FROM (  SELECT customer_code,
                    market_code,
                    product_category,
                    SUM (jan) jan,
                    SUM (feb) feb,
                    SUM (mar) mar,
                    SUM (apr) apr,
                    SUM (may) may,
                    SUM (jun) jun,
                    SUM (jul) jul,
                    SUM (aug) aug,
                    SUM (sep) sep,
                    SUM (oct) oct,
                    SUM (nov) nov,
                    SUM (dec) dec
               FROM (  SELECT customer_code,
                              market_code,
                              product_category,
                              COUNT (DISTINCT retailer_code) jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +0),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +0),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              COUNT (DISTINCT retailer_code) feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +1),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +1),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              COUNT (DISTINCT retailer_code) mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +2),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +2),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              COUNT (DISTINCT retailer_code) apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +3),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +3),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              COUNT (DISTINCT retailer_code) may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +4),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +4),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              COUNT (DISTINCT retailer_code) jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +5),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +5),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              COUNT (DISTINCT retailer_code) jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +6),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +6),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              COUNT (DISTINCT retailer_code) aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +7),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +7),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              COUNT (DISTINCT retailer_code) sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +8),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +8),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              COUNT (DISTINCT retailer_code) oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +9),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +9),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              COUNT (DISTINCT retailer_code) nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +10),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +10),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              product_category,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              COUNT (DISTINCT retailer_code) dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.product_category,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.product_category,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +11),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +11),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, product_category)
           GROUP BY customer_code, market_code, product_category) a,
          mv_category_info b,
          mv_division_customer_relation c,
          mv_customer_info d
    WHERE     a.product_category = b.category_code
          AND a.market_code = c.market_code(+)
          AND a.customer_code = d.customer_code(+);


COMMENT ON MATERIALIZED VIEW MV_MOM_LOC_CAT_NUMERIC_DIST_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_LOC_CAT_NUMERIC_DIST_CY';

CREATE MATERIALIZED VIEW MV_MOM_LOC_PROD_NM_DIST_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date, 
         c.zone_code division_code,
          c.zone_name division_name,
          c.area_code region_code,
          c.area_name region_name,
          c.belt_code area_code,
          c.belt_name area_name,
          c.territory_code,
          c.territory_name,
          c.db_location,
          a.customer_code,
          fn_customer_name (a.customer_code) customer_name,
          a.market_code,
          c.market_name,
          a.base_product_code,
          b.base_product_name,
          jan,
          feb,
          mar,
          apr,
          may,
          jun,
          jul,
          aug,
          sep,
          oct,
          nov,
          dec,
          0 total
     FROM (  SELECT customer_code,
                    market_code,
                    base_product_code,
                    SUM (jan) jan,
                    SUM (feb) feb,
                    SUM (mar) mar,
                    SUM (apr) apr,
                    SUM (may) may,
                    SUM (jun) jun,
                    SUM (jul) jul,
                    SUM (aug) aug,
                    SUM (sep) sep,
                    SUM (oct) oct,
                    SUM (nov) nov,
                    SUM (dec) dec
               FROM (  SELECT customer_code,
                              market_code,
                              base_product_code,
                              COUNT (DISTINCT retailer_code) jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +0),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +0),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              COUNT (DISTINCT retailer_code) feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +1),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +1),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              COUNT (DISTINCT retailer_code) mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +2),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +2),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              COUNT (DISTINCT retailer_code) apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +3),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +3),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              COUNT (DISTINCT retailer_code) may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +4),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +4),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              COUNT (DISTINCT retailer_code) jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +5),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +5),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              COUNT (DISTINCT retailer_code) jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +6),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +6),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              COUNT (DISTINCT retailer_code) aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +7),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +7),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              COUNT (DISTINCT retailer_code) sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +8),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +8),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              COUNT (DISTINCT retailer_code) oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +9),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +9),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              COUNT (DISTINCT retailer_code) nov,
                              0 dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +10),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +10),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              COUNT (DISTINCT retailer_code) dec
                         FROM (SELECT a.customer_code,
                                      a.market_code,
                                      a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.customer_code,
                                              a.market_code,
                                              a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +11),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +11),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY customer_code, market_code, base_product_code)
           GROUP BY customer_code, market_code, base_product_code) a,
          mv_base_product_info b,
          mv_division_customer_relation c
    WHERE     a.base_product_code = b.base_product_code
          AND a.market_code = c.market_code(+);


COMMENT ON MATERIALIZED VIEW MV_MOM_LOC_PROD_NM_DIST_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_LOC_PROD_NM_DIST_CY';

CREATE MATERIALIZED VIEW MV_MOM_RETAIL_PRODUCT_TREND_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
       sysdate refresh_date, 
       b.zone_code division_code,
       b.zone_name division_name,
       b.area_code region_code,
       b.area_name region_name,
       b.belt_code area_code,
       b.belt_name area_name,
       b.territory_code,
       b.territory_name,
       a.customer_code,
       b.customer_name,
       b.db_location,
       a.market_code,
       b.market_name,
       a.route_code,
       d.route_name,
       a.retailer_code, 
       c.retailer_name,
       e.brand_code, 
       e.product_category, 
       e.base_product_code,
       a.product_code,
       e.product_name,
       e.pack_size,
       jan_sales_qty,
       jan_sales_val,
       
       feb_sales_qty,
       feb_sales_val,
       
       mar_sales_qty,
       mar_sales_val,
       
       apr_sales_qty,
       apr_sales_val,
       
       may_sales_qty,
       may_sales_val,
       
       jun_sales_qty,
       jun_sales_val,
       
       jul_sales_qty,
       jul_sales_val,
       
       aug_sales_qty,
       aug_sales_val,
       
       sep_sales_qty,
       sep_sales_val,
       
       oct_sales_qty,
       oct_sales_val,
       
       nov_sales_qty,
       nov_sales_val,
              
       dec_sales_qty, 
       dec_sales_val,
       
       nvl(jan_sales_qty,0)+nvl(feb_sales_qty,0)+nvl(mar_sales_qty,0)+nvl(apr_sales_qty,0)+nvl(may_sales_qty,0)+nvl(jun_sales_qty,0)+nvl(jul_sales_qty,0)+nvl(aug_sales_qty,0)+nvl(sep_sales_qty,0)+nvl(oct_sales_qty,0)+nvl(nov_sales_qty,0)+nvl(dec_sales_qty,0) total_sales_qty,
       
        nvl(jan_sales_val,0)+nvl(feb_sales_val,0)+nvl(mar_sales_val,0)+nvl(apr_sales_val,0)+nvl(may_sales_val,0)+nvl(jun_sales_val,0)+nvl(jul_sales_val,0)+nvl(aug_sales_val,0)+nvl(sep_sales_val,0)+nvl(oct_sales_val,0)+nvl(nov_sales_val,0)+nvl(dec_sales_val,0) total_sales_val
                  
from
   (
    select a.customer_code,
           a.market_code,
           a.route_code,
           a.retailer_code, 
           a.product_code,
           sum(nvl(jan_sales_qty,0)) jan_sales_qty,
           sum(nvl(jan_sales_val,0)) jan_sales_val,
           
           sum(nvl(feb_sales_qty,0)) feb_sales_qty,
           sum(nvl(feb_sales_val,0)) feb_sales_val,
           
           sum(nvl(mar_sales_qty,0)) mar_sales_qty,
           sum(nvl(mar_sales_val,0)) mar_sales_val,
           
           sum(nvl(apr_sales_qty,0)) apr_sales_qty,
           sum(nvl(apr_sales_val,0)) apr_sales_val,
           
           sum(nvl(may_sales_qty,0)) may_sales_qty,
           sum(nvl(may_sales_val,0)) may_sales_val,
           
           sum(nvl(jun_sales_qty,0)) jun_sales_qty,
           sum(nvl(jun_sales_val,0)) jun_sales_val,
           
           sum(nvl(jul_sales_qty,0)) jul_sales_qty,
           sum(nvl(jul_sales_val,0)) jul_sales_val,
           
           sum(nvl(aug_sales_qty,0)) aug_sales_qty,
           sum(nvl(aug_sales_val,0)) aug_sales_val,
           
           sum(nvl(sep_sales_qty,0)) sep_sales_qty,
           sum(nvl(sep_sales_val,0)) sep_sales_val,
           
           sum(nvl(oct_sales_qty,0)) oct_sales_qty,
           sum(nvl(oct_sales_val,0)) oct_sales_val,
           
           sum(nvl(nov_sales_qty,0)) nov_sales_qty,
           sum(nvl(nov_sales_val,0)) nov_sales_val,
                  
           sum(nvl(dec_sales_qty,0)) dec_sales_qty, 
           sum(nvl(dec_sales_val,0)) dec_sales_val           
    from
       (

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,           
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) jan_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,

               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+0),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+0),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,               
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code, 
                         
               0 jan_sales_qty,
               0 jan_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) feb_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,

               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+1),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+1),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                             
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) mar_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,

               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+2),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+2),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0)return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code, 
                         
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) apr_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+3),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+3),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) may_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) amy_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+4),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+4),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
              nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                            
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) jun_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,           
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+5),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+5),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) jul_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+6),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+6),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                             
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,      
                    
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) aug_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+7),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+7),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                               
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all

        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) sep_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+8),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+8),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code
     
        union all
        
        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) oct_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+9),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+9),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code

        union all
        
        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,
                          
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) nov_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) nov_sales_val,
               
               0 dec_sales_qty,
               0 dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+10),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+10),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                             
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code
   
        union all
        
        select a.customer_code,
               a.market_code,
               a.route_code,
               a.retailer_code, 
               a.product_code,  
                        
               0 jan_sales_qty,
               0 jan_sales_val,
               
               0 feb_sales_qty,
               0 feb_sales_val,
               
               0 mar_sales_qty,
               0 mar_sales_val,
               
               0 apr_sales_qty,
               0 apr_sales_val,
               
               0 may_sales_qty,
               0 may_sales_val,
               
               0 jun_sales_qty,
               0 jun_sales_val,
               
               0 jul_sales_qty,
               0 jul_sales_val,
               
               0 aug_sales_qty,
               0 aug_sales_val,
               
               0 sep_sales_qty,
               0 sep_sales_val,
               
               0 oct_sales_qty,
               0 oct_sales_val,
               
               0 nov_sales_qty,
               0 nov_sales_val,
               
               sum(nvl(a.issued_qty,0))-sum(nvl(b.return_qty,0)) dec_sales_qty,
               sum(nvl(a.issued_val,0))-sum(nvl(b.return_val,0)) dec_sales_val
        from
        (
        select m.customer_code,
               m.market_code,
               m.route_code,
               m.retailer_code,
               m.invoice_no, 
               d.product_code,
               nvl (d.issued_qty, 0) issued_qty,
               nvl (d.total_val,0)-nvl(d.bonus_price_discount,0) issued_val
        from  mv_invoice_mst_cy m, mv_invoice_dtl_cy d
        where m.inv_mst_slno = d.inv_mst_slno
        and   m.inv_type_code = 'INV001'
        and   trunc(m.invoice_date)  between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+11),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+11),'DD/MM/RRRR'))        
        )a,
        (
        select m.invoice_no,                      
               d.product_code,
               nvl(d.return_qty,0)return_qty,
               nvl(d.return_value,0) return_val
        from   mv_ret_return_mst_cy m, mv_ret_return_dtl_cy d
        where  m.ret_recv_mst_slno = d.ret_recv_mst_slno                                                              
        )b 
        where a.invoice_no=b.invoice_no(+)
        and   a.product_code=b.product_code(+)
        group by a.customer_code,a.market_code,a.route_code,a.retailer_code, a.product_code
        ) a   
        group by customer_code,market_code,route_code,retailer_code, product_code
  )a,mv_division_customer_relation b,mv_retailer_info c,mv_route_info d,mv_product_info e
 where a.market_code=b.market_code(+)
 and   a.retailer_code=c.retailer_code
 and   a.route_code=d.route_code
 and   a.product_code=e.product_code;


COMMENT ON MATERIALIZED VIEW MV_MOM_RETAIL_PRODUCT_TREND_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_RETAIL_PRODUCT_TREND_CY';

CREATE MATERIALIZED VIEW MV_MOM_LOC_SKU_NUMERIC_DIST_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date, 
        c.zone_code division_code,
        c.zone_name division_name,
        c.area_code region_code,
        c.area_name region_name,
        c.belt_code area_code,
        c.belt_name area_name,
        c.territory_code,
        c.territory_name,
        c.db_location,
        a.customer_code,
        fn_customer_name(a.customer_code) customer_name,  
        a.market_code,
        c.market_name,
        a.product_code, 
        b.product_name,
        b.pack_size,
        a.jan ,
        a.feb ,
        a.mar ,
        a.apr ,
        a.may ,
        a.jun ,
        a.jul ,
        a.aug ,
        a.sep ,
        a.oct ,
        a.nov ,
        a.dec,
        nvl(a.jan,0) + nvl(a.feb,0) +  nvl(a.mar,0) + nvl(a.apr,0) +  nvl(a.may,0) +  nvl(a.jun,0) + nvl(a.jul,0) + nvl(a.aug,0) +  nvl(a.sep,0) + nvl(a.oct,0) + nvl(a.nov,0) + nvl(a.dec,0) total  
from
    (
        select  customer_code,
                market_code,
                product_code, 
                sum( jan ) jan ,
                sum( feb ) feb ,
                sum( mar ) mar ,
                sum( apr ) apr ,
                sum( may ) may ,
                sum( jun ) jun ,
                sum( jul ) jul ,
                sum( aug ) aug ,
                sum( sep ) sep ,
                sum( oct ) oct ,
                sum( nov ) nov ,
                sum( dec ) dec         
        from
            (

                select  customer_code,
                        market_code,
                        product_code, 
                        count( distinct retailer_code) jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+0),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+0),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code  


                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        count( distinct retailer_code) feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+1),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+1),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code  


                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        count( distinct retailer_code) mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+2),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+2),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code


                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        count( distinct retailer_code) apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+3),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+3),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code   



                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        count( distinct retailer_code) may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+4),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+4),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code 




                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        count( distinct retailer_code) jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+5),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+5),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code 



                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        count( distinct retailer_code) jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+6),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+6),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code 



                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        count( distinct retailer_code) aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+7),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+7),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code 



                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        count( distinct retailer_code) sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+8),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+8),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code 





                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        count( distinct retailer_code) oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+9),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+9),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code



                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        count( distinct retailer_code) nov ,
                        0 dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+10),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+10),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code  




                union all
                select  customer_code, 
                        market_code,
                        product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        count( distinct retailer_code) dec 
                from
                    (
                    select  a.customer_code, a.market_code,a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,a.customer_code, a.market_code,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+11),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+11),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                             --and     a.customer_code='25'
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  customer_code, market_code,product_code  
            )     
         group by  customer_code, market_code,product_code      
    ) a, mv_product_info b,mv_division_customer_relation c
where a.product_code=b.product_code
and   a.market_code=c.market_code(+);


COMMENT ON MATERIALIZED VIEW MV_MOM_LOC_SKU_NUMERIC_DIST_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_LOC_SKU_NUMERIC_DIST_CY';

CREATE MATERIALIZED VIEW MV_MONTH_WISE_TRADE_RET_IMS_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
          yyyymm,
          trade_program_no,
          retailer_code,
          ims_value
     FROM (  SELECT yyyymm,
                    81 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              81)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             81))
           GROUP BY yyyymm, retailer_code
           UNION ALL
             SELECT yyyymm,
                    79 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              79)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             79))
           GROUP BY yyyymm, retailer_code
           UNION ALL
             SELECT yyyymm,
                    77 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              77)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             77))
           GROUP BY yyyymm, retailer_code
           UNION ALL
             SELECT yyyymm,
                    76 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              76)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             76))
           GROUP BY yyyymm, retailer_code
           UNION ALL
             SELECT yyyymm,
                    75 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              75)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             75))
           GROUP BY yyyymm, retailer_code
           UNION ALL
             SELECT yyyymm,
                    74 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              74)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             74))
           GROUP BY yyyymm, retailer_code
           UNION ALL
             SELECT yyyymm,
                    73 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              73)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             73))
           GROUP BY yyyymm, retailer_code
           UNION ALL
             SELECT yyyymm,
                    72 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              72)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             72))
           GROUP BY yyyymm, retailer_code
           UNION ALL
             SELECT yyyymm,
                    55 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              55)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             55))
           GROUP BY yyyymm, retailer_code
           UNION ALL
             SELECT yyyymm,
                    54 trade_program_no,
                    retailer_code,
                    SUM (NVL (ims_value, 0)) ims_value
               FROM (SELECT a.yyyymm,
                            a.retailer_code,
                            a.product_code,
                            NVL (a.invoice_value, 0) - NVL (b.return_value, 0)
                               ims_value
                       FROM (SELECT TO_CHAR (
                                       TO_DATE (TRUNC (a.invoice_date),
                                                'dd/mm/rrrr'),
                                       'rrrrmm')
                                       yyyymm,
                                    a.invoice_no,
                                    a.retailer_code,
                                    b.product_code,
                                      NVL (b.total_val, 0)
                                    - NVL (bonus_price_discount, 0)
                                       invoice_value
                               FROM mv_invoice_mst_cy a,
                                    mv_invoice_dtl_cy b
                              WHERE     a.inv_mst_slno = b.inv_mst_slno
                                    AND a.inv_type_code = 'INV001'
                                    AND TO_CHAR (
                                           TO_DATE (TRUNC (a.invoice_date),
                                                    'dd/mm/rrrr'),
                                           'rrrr') =
                                           TO_CHAR (
                                              TO_DATE (
                                                 TRUNC (
                                                    TO_DATE (SYSDATE,
                                                             'dd/mm/rrrr'),
                                                    'rr'),
                                                 'dd/mm/rrrr'),
                                              'rrrr')) a,
                            (SELECT a.invoice_no,
                                    b.product_code,
                                    a.retailer_code,
                                    NVL (b.return_value, 0) return_value
                               FROM mv_ret_return_mst_cy a,
                                    mv_ret_return_dtl_cy b
                              WHERE a.ret_recv_mst_slno = b.ret_recv_mst_slno)
                            b
                      WHERE     a.invoice_no = b.invoice_no(+)
                            AND a.product_code = b.product_code(+)
                            AND a.retailer_code IN (SELECT retailer_code
                                                      FROM mv_trade_program_retailer
                                                     WHERE TRADE_PROGRAM_NO =
                                                              54)
                            AND a.product_code IN (SELECT product_code
                                                     FROM mv_trade_prog_product
                                                    WHERE trade_prog_prod_mst_slno =
                                                             54))
           GROUP BY yyyymm, retailer_code);


COMMENT ON MATERIALIZED VIEW MV_MONTH_WISE_TRADE_RET_IMS_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MONTH_WISE_TRADE_RET_IMS_CY';

CREATE MATERIALIZED VIEW MV_MOM_NTL_PROD_NU_DIST_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select  /*+ append */
        sysdate refresh_date,
         a.base_product_code,
          b.base_product_name,
          jan,
          feb,
          mar,
          apr,
          may,
          jun,
          jul,
          aug,
          sep,
          oct,
          nov,
          dec,
          0 total
     FROM (  SELECT base_product_code,
                    SUM (jan) jan,
                    SUM (feb) feb,
                    SUM (mar) mar,
                    SUM (apr) apr,
                    SUM (may) may,
                    SUM (jun) jun,
                    SUM (jul) jul,
                    SUM (aug) aug,
                    SUM (sep) sep,
                    SUM (oct) oct,
                    SUM (nov) nov,
                    SUM (dec) dec
               FROM (  SELECT base_product_code,
                              COUNT (DISTINCT retailer_code) jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +0),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +0),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              COUNT (DISTINCT retailer_code) feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +1),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +1),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              COUNT (DISTINCT retailer_code) mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +2),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +2),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              COUNT (DISTINCT retailer_code) apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +3),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +3),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'F
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              COUNT (DISTINCT retailer_code) may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +4),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +4),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              COUNT (DISTINCT retailer_code) jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +5),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +5),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              COUNT (DISTINCT retailer_code) jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +6),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +6),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              COUNT (DISTINCT retailer_code) aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +7),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +7),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              COUNT (DISTINCT retailer_code) sep,
                              0 oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +8),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +8),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              COUNT (DISTINCT retailer_code) oct,
                              0 nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +9),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +9),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              COUNT (DISTINCT retailer_code) nov,
                              0 dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +10),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +10),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code
                     UNION ALL
                       SELECT base_product_code,
                              0 jan,
                              0 feb,
                              0 mar,
                              0 apr,
                              0 may,
                              0 jun,
                              0 jul,
                              0 aug,
                              0 sep,
                              0 oct,
                              0 nov,
                              COUNT (DISTINCT retailer_code) dec
                         FROM (SELECT a.base_product_code,
                                      a.retailer_code,
                                        NVL (a.sales_qty, 0)
                                      - NVL (b.return_qty, 0)
                                         net_sales_qty
                                 FROM (SELECT a.invoice_no,
                                              p.base_product_code,
                                              b.product_code,
                                              a.retailer_code,
                                              b.issued_qty sales_qty
                                         FROM mv_invoice_mst_cy a,
                                              mv_invoice_dtl_cy b,
                                              mv_product_info p
                                        WHERE     a.inv_mst_slno = b.inv_mst_slno
                                              AND a.inv_type_code = 'INV001'
                                              AND TRUNC (a.invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +11),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +11),
                                                                                       'DD/MM/RRRR'))
                                              AND b.product_code = p.product_code --and     a.customer_code = '25'
                                                                                 )
                                      a,
                                      (SELECT a.invoice_no,
                                              b.product_code,
                                              a.retailer_code,
                                              NVL (b.return_qty, 0) return_qty
                                         FROM mv_ret_return_mst_cy a,
                                              mv_ret_return_dtl_cy b
                                        WHERE a.ret_recv_mst_slno =
                                                 b.ret_recv_mst_slno) b
                                WHERE     a.invoice_no = b.invoice_no(+)
                                      AND a.product_code = b.product_code(+)
                                      AND   NVL (a.sales_qty, 0)
                                          - NVL (b.return_qty, 0) > 0)
                     GROUP BY base_product_code)
           GROUP BY base_product_code) a,
          mv_base_product_info b
    WHERE a.base_product_code = b.base_product_code;


COMMENT ON MATERIALIZED VIEW MV_MOM_NTL_PROD_NU_DIST_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_NTL_PROD_NU_DIST_CY';

CREATE MATERIALIZED VIEW MV_DSM_TSO_WISE_SALES_REGISTR 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, customer_code, 
        customer_name, db_location, market_code, market_name, route_code, route_name, order_value, invoice_amount, 
        return_amount, net_ims, no_of_ordering_outlet, total_route_retailer, 
        no_of_route_visit, no_of_retailer, no_of_ordering_sku, prod_call, lpc
from spa_sfbl.view_dsm_tso_sales_registr@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DSM_TSO_WISE_SALES_REGISTR IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DSM_TSO_WISE_SALES_REGISTR';

CREATE MATERIALIZED VIEW MV_INVOICE_DTL_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_dtl_slno, inv_mst_slno, product_code, product_price, issued_qty, rtl_discount, rtl_discount_val, prod_discount, 
     prod_discount_val, bonus_price_discount, total_val, slab_adj_val, slab_adj_status, slab_adj_date, net_val
from spa_sfbl.view_invoice_dtl_cy@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_DTL_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_DTL_CY';

CREATE MATERIALIZED VIEW MV_INVOICE_DTL_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_dtl_slno, inv_mst_slno, product_code, product_price, issued_qty, rtl_discount, rtl_discount_val, prod_discount, 
     prod_discount_val, bonus_price_discount, total_val, slab_adj_val, slab_adj_status, slab_adj_date, net_val
from spa_sfbl.view_invoice_dtl_ly@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_DTL_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_DTL_LY';

CREATE MATERIALIZED VIEW MV_INVOICE_MST_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
       inv_mst_slno, invoice_no, invoice_date, order_no, order_date, inv_type_code, delivery_date, delivery_time, retailer_code, route_code, 
       market_code, employee_code, customer_code, grand_total, total_tds, slab_adjustment, total_adjustment, net_inv_amount, 
       inv_status, remarks, entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal, 
       trade_policy_no, special_bonus_disc, retailer_type
from spa_sfbl.view_invoice_mst_cy@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_MST_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_MST_CY';

CREATE MATERIALIZED VIEW MV_INVOICE_MST_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
       inv_mst_slno, invoice_no, invoice_date, order_no, order_date, inv_type_code, delivery_date, delivery_time, retailer_code, route_code, 
       market_code, employee_code, customer_code, grand_total, total_tds, slab_adjustment, total_adjustment, net_inv_amount, 
       inv_status, remarks, entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal
from spa_sfbl.view_invoice_mst_ly@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_MST_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_MST_LY';

CREATE MATERIALIZED VIEW MV_RET_RETURN_DTL_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_dtl_slno, ret_recv_mst_slno, product_code, trade_price, issued_qty, return_qty, cust_discount_val, 
     cust_bonus_discount, adjustment_val, return_value, bonus_price_discount
from spa_sfbl.view_ret_return_dtl_ly@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_DTL_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_DTL_LY';

CREATE MATERIALIZED VIEW MV_RET_RETURN_MST_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_mst_slno, customer_code, retailer_code, return_date, invoice_no, return_type, 
     net_return_val, tds_val, adjustment_val, return_status, return_bns_disc, return_slab_amount, special_bonus_disc, return_value
from spa_sfbl.view_ret_return_mst_ly@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_MST_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_MST_LY';

CREATE MATERIALIZED VIEW MV_SR_PRODUCT_IMS_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, db_location, customer_code, 
     customer_name, employee_code, employee_name, market_code, market_name, product_code, product_name, pack_size, product_price, 
     invoice_qty, inv_bonus_qty, bonus_price_discount, ims_sales_qty, ims_bns_qty, bns_disc_ret, invoice_amt, return_sales_qty, 
     return_bns_qty, return_value, ims_sales_val, ims_bns_val, net_ims, bonus_per
from spa_sfbl.view_sr_product_ims_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_SR_PRODUCT_IMS_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_SR_PRODUCT_IMS_LMONTH';

CREATE MATERIALIZED VIEW MV_SKU_NUMERIC_SALES_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
     customer_code, customer_name, db_location, total_retailer, product_category_code, product_category_name, product_code, 
     product_name, pack_size, no_of_retailer, avg_order_qty_per_ret, avg_sales_qty_per_invoice, avg_sales_qty_per_month_ret
from spa_sfbl.view_sku_numeric_sales_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_SKU_NUMERIC_SALES_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_SKU_NUMERIC_SALES_LMONTH';

CREATE MATERIALIZED VIEW MV_MOM_NTL_SKU_NUMERIC_DIST_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date, 
        a.product_code, 
        b.product_name,
        b.pack_size,
        jan ,
        feb ,
        mar ,
        apr ,
        may ,
        jun ,
        jul ,
        aug ,
        sep ,
        oct ,
        nov ,
        dec ,                
        0 total                 
from
    (



        select  product_code, 
                sum( jan ) jan ,
                sum( feb ) feb ,
                sum( mar ) mar ,
                sum( apr ) apr ,
                sum( may ) may ,
                sum( jun ) jun ,
                sum( jul ) jul ,
                sum( aug ) aug ,
                sum( sep ) sep ,
                sum( oct ) oct ,
                sum( nov ) nov ,
                sum( dec ) dec         
        from
            (

                select  product_code, 
                        count( distinct retailer_code) jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec         
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+0),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+0),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code  


                union all
                select  product_code, 
                        0 jan ,
                        count( distinct retailer_code) feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+1),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+1),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code  


                union all
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        count( distinct retailer_code) mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+2),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+2),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code


                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        count( distinct retailer_code) apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+3),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+3),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code   



                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        count( distinct retailer_code) may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+4),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+4),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 




                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        count( distinct retailer_code) jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+5),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+5),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 



                union all
                
                select   product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        count( distinct retailer_code) jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+6),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+6),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 



                union all
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        count( distinct retailer_code) aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+7),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+7),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 



                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        count( distinct retailer_code) sep ,
                        0 oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+8),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+8),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code 





                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        count( distinct retailer_code) oct ,
                        0 nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+9),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+9),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code



                union all
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        count( distinct retailer_code) nov ,
                        0 dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+10),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+10),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code  




                union all
                
                
                select  product_code, 
                        0 jan ,
                        0 feb ,
                        0 mar ,
                        0 apr ,
                        0 may ,
                        0 jun ,
                        0 jul ,
                        0 aug ,
                        0 sep ,
                        0 oct ,
                        0 nov ,
                        count( distinct retailer_code) dec 
                from
                    (
                    select  a.product_code, a.retailer_code,nvl(a.sales_qty,0)-nvl(b.return_qty,0) net_sales_qty
                    from
                        (
                             select  a.invoice_no,b.product_code,a.retailer_code,b.issued_qty sales_qty
                             from    mv_invoice_mst_cy a,  mv_invoice_dtl_cy b,mv_product_info p
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     a.inv_type_code='INV001'
                             and     trunc(a.invoice_date) between to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+11),'DD/MM/RRRR') and  last_day(to_date(add_months(trunc(to_date(sysdate,'DD/MM/RRRR'),'RR'),+11),'DD/MM/RRRR')) 
                             and     b.product_code =  p.product_code
                         )a,                         
                         ( 
                            select  a.invoice_no,b.product_code,a.retailer_code, nvl(b.return_qty,0) return_qty
                            from    mv_ret_return_mst_cy a, mv_ret_return_dtl_cy b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno

                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                    and   nvl(a.sales_qty,0)-nvl(b.return_qty,0)>0
                )
                group by  product_code  
           


         )
          group by  product_code
  
 ) a, mv_product_info b
 where a.product_code=b.product_code;


COMMENT ON MATERIALIZED VIEW MV_MOM_NTL_SKU_NUMERIC_DIST_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MOM_NTL_SKU_NUMERIC_DIST_CY';

CREATE MATERIALIZED VIEW MV_TO_DAYS_FACTORY_INV_RECV 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
       sysdate refresh_date,division_code, division_name, region_code, region_name, area_code, area_name, territory_code, 
       territory_name, customer_code, customer_name, db_location, requisition_no, receive_date, invoice_no, invoice_date, 
       inv_type_code, inv_type_name, product_code, product_name, pack_size, product_price, product_batch_no, lot_no, receive_qty
from spa_sfbl.vw_to_days_factory_inv_recv@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TO_DAYS_FACTORY_INV_RECV IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TO_DAYS_FACTORY_INV_RECV';

CREATE MATERIALIZED VIEW MV_BUDGETED_NET_IMS_TARGET 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     year, month_code, net_ims_target_value, remarks
from spa_sfbl.budgeted_net_ims_target@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_BUDGETED_NET_IMS_TARGET IS 'snapshot table for snapshot SPA_SFBL_BI.MV_BUDGETED_NET_IMS_TARGET';

CREATE MATERIALIZED VIEW MV_BUDGETED_NET_LIFTING_TARGET 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     year, month_code, net_lifting_target_value, remarks
from spa_sfbl.budgeted_net_lifting_target@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_BUDGETED_NET_LIFTING_TARGET IS 'snapshot table for snapshot SPA_SFBL_BI.MV_BUDGETED_NET_LIFTING_TARGET';

CREATE MATERIALIZED VIEW MV_TRADE_PROGRAM_RETAILER 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     emp_reg_no, retailer_code, trade_program_no, trade_policy_no, program_type, entry_date, entry_type
from spa_sfbl.trade_program_retailer@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TRADE_PROGRAM_RETAILER IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TRADE_PROGRAM_RETAILER';

CREATE MATERIALIZED VIEW MV_TRADE_PROG_PRODUCT 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     trade_prog_prod_slno, trade_prog_prod_mst_slno, product_code, base_product_code, priority_flag, group_code, brand_code, product_category, trade_prog_base_prod_slno, entry_date
from spa_sfbl.trade_prog_product@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TRADE_PROG_PRODUCT IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TRADE_PROG_PRODUCT';

CREATE MATERIALIZED VIEW MV_ROUTE_WISE_IMS_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date, 
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, route_code, route_name, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, 
        return_value, return_slab_adjust, net_return_val, net_ims, no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_route_wise_ims_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_WISE_IMS_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_WISE_IMS_LMONTH';

CREATE MATERIALIZED VIEW MV_ROUTE_ORDER_COUNT_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
     customer_code, customer_name, db_location, route_code, route_name, total_route_retailer, no_of_route_visit, total_visit_retailer, 
     no_of_normal_order, no_of_replace_order, no_of_ordering_retailer, no_of_ordering_sku, order_value, productivity_call, lpc
from spa_sfbl.view_route_order_count_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_ORDER_COUNT_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_ORDER_COUNT_LMONTH';

CREATE MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
     customer_code, customer_name, db_location, route_code, route_name, brand_code, 
     brand_name, invoice_amt, replace_inv_amt, return_value, net_ims
from spa_sfbl.view_route_brand_ims_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_BRAND_IMS_LMONTH';

CREATE MATERIALIZED VIEW MV_RETAILER_IMS_PMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, customer_code, customer_name, 
     db_location, market_code, market_name, route_code, route_name, retailer_code, retailer_name, no_of_inv, total_inv_amt, 
     slab_adjustment, net_inv_amount, return_value, return_slab_adjust, 
     net_return_val, net_ims, no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_retailer_ims_pmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RETAILER_IMS_PMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETAILER_IMS_PMONTH';

CREATE MATERIALIZED VIEW MV_RET_PROD_IMS_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
     customer_code, customer_name, db_location, route_code, route_name, retailer_code, retailer_name, base_product_code, base_product_name, 
     brand_code, brand_name, product_category_code, product_category_name, product_code, product_name, pack_size, product_price, 
     invoice_amt, sales_qty, sales_bonus_qty, bonus_price_discount, replace_qty, return_sales_qty, return_bns_qty, 
     ims_sales_qty, ims_bns_qty, return_value, bns_disc_ret, discount_val, net_ims, number_of_invoice, 
     target_qty, last_year_as_on_date_ims_qty, last_year_as_on_date_ims_val
from spa_sfbl.view_ret_prod_ims_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_PROD_IMS_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_PROD_IMS_LMONTH';

CREATE MATERIALIZED VIEW MV_MONTH_WISE_TRADE_RET_IMS_LY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        yyyymm,
        trade_program_no,
        retailer_code, 
        ims_value
from
    (
    
    

            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=81
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=81) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') =to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr')                            
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=81) 
              
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code


            union all


            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=79
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=79) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr')=to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr' )                           
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=79) 
              
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code
            
            
            
            
            
            union all


            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=77
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=77) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr')=to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr' )                           
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=77) 
              
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code            
       
    
    
    
    
            union all


            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=76
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=76) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr')=to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr')                          
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=76)               
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code 






            union all


            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=75
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=75) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr')=to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr')                            
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=75)               
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code 
       
    
    
    
    
    
            union all


            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=74
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=74) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr')=to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr')                            
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=74)               
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code 
     
    
            union all


            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=73
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=73) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr')=to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr')                            
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=73)               
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code      
     
    
    
    
            union all


            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=72
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=72) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr')=to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr')                            
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=72)               
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code    
    
    
    
    
    
    
            union all


            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=55
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=55) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr')=to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr')                            
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=55)               
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code      
    
    
                union all


            select  yyyymm,
                    trade_program_no,
                    retailer_code, 
                    sum(nvl(ims_value,0)) ims_value
            from
                (                                        
                    select  a.yyyymm,
                            a.trade_program_no,
                            a.retailer_code,
                            a.product_code, 
                            nvl(a.invoice_value,0)-nvl(b.return_value,0) ims_value
                    from
                        (
                             select  to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr') yyyymm,
                                     c.trade_program_no,
                                     a.invoice_no,                                   
                                     a.retailer_code,
                                     b.product_code,
                                     nvl(b.total_val,0) - nvl(bonus_price_discount,0) invoice_value
                             from    mv_invoice_mst_ly a,  mv_invoice_dtl_ly b,  mv_trade_program_retailer c
                             where   a.inv_mst_slno=b.inv_mst_slno
                             and     c.trade_program_no=54
                             and     c.retailer_code=a.retailer_code
                             and     a.inv_type_code='INV001'
                             and     b.product_code in (select distinct product_code from mv_trade_prog_product where trade_prog_prod_mst_slno=54) 
                             and     to_char(to_date(trunc(a.invoice_date),'dd/mm/rrrr'),'rrrr')=to_char(to_date(add_months(trunc(to_date(sysdate,'dd/mm/rrrr'),'rr'),-12),'dd/mm/rrrr'),'rrrr')                            
                         )a,                         
                         ( 
                            select  a.invoice_no,
                                    b.product_code,
                                    a.retailer_code, 
                                    nvl(b.return_value,0) return_value
                            from    mv_ret_return_mst_ly a, mv_ret_return_dtl_ly b
                            where   a.ret_recv_mst_slno=b.ret_recv_mst_slno
                            and     b.product_code in (select distinct product_code from mv_trade_prog_product  where trade_prog_prod_mst_slno=54)               
                         )b
                    where a.invoice_no=b.invoice_no(+)
                    and   a.product_code=b.product_code(+)
                )     
            group by   yyyymm,trade_program_no,retailer_code 
    
    );


COMMENT ON MATERIALIZED VIEW MV_MONTH_WISE_TRADE_RET_IMS_LY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MONTH_WISE_TRADE_RET_IMS_LY';

CREATE MATERIALIZED VIEW MV_TRADE_PROG_PROD_MST 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     trade_prog_prod_mst_slno, trade_name, trade_effect_from_date, trade_effect_to_date, trade_program_type, trade_program_status, 
     achievement_time, include_product_category, slab_limit_status, product_value_type, slab_change_type, effect_type, delete_flag, 
     participation_date_flag, participation_start_date, participation_end_date, location_type, all_sku_check_flag, priority_flag, 
     entry_date, retailer_check_flag, approved_status, approved_date
from spa_sfbl.trade_prog_prod_mst@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TRADE_PROG_PROD_MST IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TRADE_PROG_PROD_MST';

CREATE MATERIALIZED VIEW MV_TT_TRADE_PROG_DISCOUNT_V1 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     order_mst_slno, inv_mst_slno, retailer_code, trade_policy_no, discount_val, trade_status, slab_no, slab_amount
from spa_sfbl.tt_trade_program_discount_v1@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TT_TRADE_PROG_DISCOUNT_V1 IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TT_TRADE_PROG_DISCOUNT_V1';

CREATE MATERIALIZED VIEW MV_TRADE_PROG_AMOUNT_SLAB 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     trade_prog_prod_slab_slno, trade_prog_prod_mst_slno, slab_no, slab_amt, slab_upper_amt, disc_parameter
from spa_sfbl.trade_prog_amount_slab@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TRADE_PROG_AMOUNT_SLAB IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TRADE_PROG_AMOUNT_SLAB';

CREATE MATERIALIZED VIEW MV_TRADE_PROG_PROD_DTL 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     trade_prog_prod_dtl_slno, trade_prog_prod_slab_slno, no_of_invoice, trade_disc_amt, trade_disc_pct
from spa_sfbl.trade_prog_prod_dtl@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TRADE_PROG_PROD_DTL IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TRADE_PROG_PROD_DTL';

CREATE MATERIALIZED VIEW MV_RETURN_DISC_TRACKING 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     invoice_no, program_type, program_no, discount_amt
from spa_sfbl.return_disc_tracking@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RETURN_DISC_TRACKING IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETURN_DISC_TRACKING';

CREATE MATERIALIZED VIEW MV_INVOICE_BONUS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_bns_slno, inv_dtl_slno, product_code, product_batch_no, lot_no, bonus_qty, customer_code, invoice_date
from spa_sfbl.invoice_bonus@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_BONUS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_BONUS';

CREATE MATERIALIZED VIEW MV_INVOICE_DTL 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_dtl_slno, inv_mst_slno, product_code, product_price, issued_qty, rtl_discount, rtl_discount_val, prod_discount, 
     prod_discount_val, bonus_price_discount, total_val, slab_adj_val, slab_adj_status, slab_adj_date, net_val
from spa_sfbl.invoice_dtl@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_DTL IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_DTL';

CREATE MATERIALIZED VIEW MV_INVOICE_ISSUE 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_iss_slno, inv_dtl_slno, product_code, product_batch_no, lot_no, issued_qty, customer_code, invoice_date, issued_price
from spa_sfbl.invoice_issue@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_ISSUE IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_ISSUE';

CREATE MATERIALIZED VIEW MV_INVOICE_MST 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
       inv_mst_slno, invoice_no, invoice_date, order_no, order_date, inv_type_code, delivery_date, delivery_time, retailer_code, route_code, 
       market_code, employee_code, customer_code, grand_total, total_tds, slab_adjustment, total_adjustment, net_inv_amount, 
       inv_status, remarks, entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal, 
       trade_policy_no, special_bonus_disc, retailer_type, zone_code, 
       area_code, belt_code, territory_code, invoice_version
from spa_sfbl.invoice_mst@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_MST IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_MST';

CREATE MATERIALIZED VIEW MV_INVOICE_TRADE 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_trd_slno, inv_dtl_slno, product_code, product_batch_no, lot_no, trade_qty, customer_code, invoice_date
from spa_sfbl.invoice_trade@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_TRADE IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_TRADE';

CREATE MATERIALIZED VIEW MV_INV_SPEC_PRICE_DISC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_spec_price_slno, inv_mst_slno, price_disc_amt
from spa_sfbl.inv_spec_price_disc@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INV_SPEC_PRICE_DISC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INV_SPEC_PRICE_DISC';

CREATE MATERIALIZED VIEW MV_INVOICE_SPEC_BONUS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,
     inv_spec_bns_slno, inv_mst_slno, customer_code, invoice_date, product_code, product_batch_no, lot_no, spec_bonus_qty, product_price
from spa_sfbl.invoice_spec_bonus@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_INVOICE_SPEC_BONUS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_INVOICE_SPEC_BONUS';

CREATE MATERIALIZED VIEW MV_RET_RETURN_BONUS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
       ret_recv_bns_slno, ret_recv_dtl_slno, product_code, product_batch_no, lot_no, bonus_qty, bonus_value, 
       entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal, customer_code
FROM spa_sfbl.ret_return_bonus@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_BONUS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_BONUS';

CREATE MATERIALIZED VIEW MV_RET_RETURN_DTL 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_dtl_slno, ret_recv_mst_slno, product_code, trade_price, issued_qty, return_qty, cust_discount_val, 
     cust_bonus_discount, adjustment_val, return_value, bonus_price_discount, invoice_no, return_type
FROM spa_sfbl.view_ret_return_dtl@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_DTL IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_DTL';

CREATE MATERIALIZED VIEW MV_RET_RETURN_ISSUE 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_iss_slno, ret_recv_dtl_slno, product_code, product_batch_no, lot_no, received_qty, received_value, 
     entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal, customer_code
FROM spa_sfbl.ret_return_issue@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_ISSUE IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_ISSUE';

CREATE MATERIALIZED VIEW MV_RET_RETURN_MST 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_mst_slno, customer_code, retailer_code, return_date, invoice_no, return_type, 
     net_return_val, tds_val, adjustment_val, return_status, return_bns_disc, return_slab_amount, special_bonus_disc, return_value, 
     inv_type_code, invoice_date, employee_code, return_datetime, market_code, route_code
FROM spa_sfbl.ret_return_mst@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_MST IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_MST';

CREATE MATERIALIZED VIEW MV_RET_RETURN_SPEC_BONUS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_spec_bns_slno, ret_recv_mst_slno, product_code, product_batch_no, lot_no, spec_bonus_qty, spec_bonus_val
FROM spa_sfbl.ret_return_spec_bonus@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_SPEC_BONUS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_SPEC_BONUS';

CREATE MATERIALIZED VIEW MV_RET_RETURN_SPEC_DISC 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_spec_disc_slno, ret_recv_mst_slno, special_bonus_disc
FROM spa_sfbl.ret_return_spec_disc@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_SPEC_DISC IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_SPEC_DISC';

CREATE MATERIALIZED VIEW MV_RET_RETURN_TRADE 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_trd_slno, ret_recv_dtl_slno, product_code, product_batch_no, lot_no, trade_qty, trade_value, 
     entered_by, entered_date, entered_terminal, updated_by, updated_date, updated_terminal, customer_code
FROM spa_sfbl.ret_return_trade@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_TRADE IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_TRADE';

CREATE MATERIALIZED VIEW MV_MARKET_PROD_IMS_LAST_7DAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, db_location, 
        customer_code, customer_name, market_code, market_name, product_code, product_name, pack_size, product_price, sales_qty, 
        return_sales_qty, ims_sales_qty, bonus_qty, return_bonus_qty, ims_bonus_qty, invoice_value, return_value, ims_sales_val, 
        ims_bonus_val, bonus_price_discount, ret_bonus_price_discount, net_ims, bonus_per, target_qty, target_val
from spa_sfbl.view_market_prod_ims_l7day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_MARKET_PROD_IMS_LAST_7DAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MARKET_PROD_IMS_LAST_7DAY';

CREATE MATERIALIZED VIEW MV_MARKET_PROD_IMS_LAST_30DAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, db_location, 
        customer_code, customer_name, market_code, market_name, product_code, product_name, pack_size, product_price, sales_qty, 
        return_sales_qty, ims_sales_qty, bonus_qty, return_bonus_qty, ims_bonus_qty, invoice_value, return_value, ims_sales_val, 
        ims_bonus_val, bonus_price_discount, ret_bonus_price_discount, net_ims, bonus_per, target_qty, target_val
from spa_sfbl.view_market_prod_ims_l30day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_MARKET_PROD_IMS_LAST_30DAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MARKET_PROD_IMS_LAST_30DAY';

CREATE MATERIALIZED VIEW MV_CAT_NUMERIC_SALES_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
        market_name, customer_code, customer_name, db_location, total_retailer, product_category_code, product_category_name, 
        total_retailer_invoice, avg_order_qty_per_ret, avg_sales_qty_per_invoice, avg_sales_qty_per_month_ret
from spa_sfbl.view_cat_numeric_sales_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_CAT_NUMERIC_SALES_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_CAT_NUMERIC_SALES_LMONTH';

CREATE MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, customer_code, customer_name, 
        db_location, product_code, product_name, pack_size, product_price, invoice_qty, inv_bonus_qty, bonus_price_discount, 
        ims_sales_qty, ims_bns_qty, invoice_amt, return_sales_qty, return_bns_qty, bns_disc_ret, return_value, 
        ims_sales_val, ims_bns_val, net_ims, last_year_as_on_date_ims_qty, last_year_as_on_date_ims_val
from spa_sfbl.view_dist_product_ims_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_PRODUCT_IMS_LMONTH';

CREATE MATERIALIZED VIEW MV_DIST_REPLACE_STK_TRANS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, db_location, customer_code, 
        customer_name, address, product_code, product_name, pack_size, unit_tp, opening_replace_qty, replace_recv_ret_qty, total_qty, 
        replace_return_qty, replace_factory_qty, total_deduct_qty, closing_replace_qty
from spa_sfbl.view_dist_replace_stk_trans@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_REPLACE_STK_TRANS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_REPLACE_STK_TRANS';

CREATE MATERIALIZED VIEW MV_DIST_STOCK_CONSUMPTION 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, db_location, customer_code, 
        customer_name, address, product_code, product_name, pack_size, unit_tp, opening_stock_qty, receive_qty, replace_receive_qty, 
        previous_return_receive_qty, return_receive_qty, prev_replace_ret_receive_qty, replace_ret_receive_qty, gain_qty, 
        total_in_qty, issued_qty, replace_issued_qty, dispatch_qty, bonus_qty, trade_bonus_qty, combo_bonus_qty, 
        loss_qty, requi_return_qty, damage_stock_transfer_qty, total_out_qty, closing_qty, closing_value, 
        cust_prod_wise_target_qty, cust_prod_wise_target_value
from spa_sfbl.view_dist_stock_consumption@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_STOCK_CONSUMPTION IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_STOCK_CONSUMPTION';

CREATE MATERIALIZED VIEW MV_DISTRIBUTOR_ACH_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, customer_code, 
        customer_name, db_location, product_code, product_name, pack_size, sales_qty, sales_val, cumm_sales_qty, 
        cumm_sales_val, target_qty, target_val, achievement
from spa_sfbl.view_distributor_ach_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DISTRIBUTOR_ACH_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DISTRIBUTOR_ACH_CMONTH';

CREATE MATERIALIZED VIEW MV_DISTRIBUTOR_ACH_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
        customer_code, customer_name, db_location, product_code, product_name, pack_size, sales_qty, sales_val, 
        cumm_sales_qty, cumm_sales_val, target_qty, target_val, achievement
from spa_sfbl.view_distributor_ach_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DISTRIBUTOR_ACH_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DISTRIBUTOR_ACH_LMONTH';

CREATE MATERIALIZED VIEW MV_RET_RETURN_DTL_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ sysdate refresh_date,  
     ret_recv_dtl_slno, ret_recv_mst_slno, product_code, trade_price, issued_qty, return_qty, cust_discount_val, 
     cust_bonus_discount, adjustment_val, return_value, bonus_price_discount
from spa_sfbl.view_ret_return_dtl_cy@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_DTL_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_DTL_CY';

CREATE MATERIALIZED VIEW MV_NATIONAL_PRODUCT_SALES 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,  
        base_product_code, base_product_name, product_category_code, product_category_name, brand_code, brand_name, product_code, 
        product_name, pack_size, current_month_sales_val, current_month_return_val, current_month_net_sales_val, 
        current_month_sales_qty, current_month_return_qty, current_month_net_sales_qty, last_month_sales_val, 
        last_month_return_val, last_month_net_sales_val, last_month_sales_qty, last_month_return_qty, 
        last_month_net_sales_qty, current_month_target_qty, current_month_target_val, 
        current_month_ach, current_month_growth, 
        current_year_ims_val, last_year_ims_val
from spa_sfbl.view_national_product_sales@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_NATIONAL_PRODUCT_SALES IS 'snapshot table for snapshot SPA_SFBL_BI.MV_NATIONAL_PRODUCT_SALES';

CREATE MATERIALIZED VIEW MV_DIVISION_MKT_IMS_YESTERDAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, return_value, 
        return_slab_adjust, net_return_val, net_ims, no_of_replace_inv, 
        replace_inv_amt, target_val, no_of_retailer, no_of_ord_retailer  
from spa_sfbl.view_market_ims_yesterday@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIVISION_MKT_IMS_YESTERDAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIVISION_MKT_IMS_YESTERDAY';

CREATE MATERIALIZED VIEW MV_DIVISION_MKT_IMS_LAST_7DAYS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, return_value, 
        return_slab_adjust, net_return_val, net_ims, no_of_replace_inv, 
        replace_inv_amt, target_val, no_of_retailer, no_of_ord_retailer  
from spa_sfbl.view_market_ims_l7day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIVISION_MKT_IMS_LAST_7DAYS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIVISION_MKT_IMS_LAST_7DAYS';

CREATE MATERIALIZED VIEW MV_DIVISION_MKT_IMS_LAST_30DAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, return_value, 
        return_slab_adjust, net_return_val, net_ims, no_of_replace_inv, 
        replace_inv_amt, target_val, no_of_retailer, no_of_ord_retailer  
from spa_sfbl.view_market_ims_l30day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIVISION_MKT_IMS_LAST_30DAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIVISION_MKT_IMS_LAST_30DAY';

CREATE MATERIALIZED VIEW MV_MARKET_PROD_IMS_YESTERDAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, db_location, 
        customer_code, customer_name, market_code, market_name, product_code, product_name, pack_size, product_price, sales_qty, 
        return_sales_qty, ims_sales_qty, bonus_qty, return_bonus_qty, ims_bonus_qty, invoice_value, return_value, ims_sales_val, 
        ims_bonus_val, bonus_price_discount, ret_bonus_price_discount, net_ims, bonus_per, target_qty, target_val
from spa_sfbl.view_market_prod_ims_yesterday@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_MARKET_PROD_IMS_YESTERDAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_MARKET_PROD_IMS_YESTERDAY';

CREATE MATERIALIZED VIEW MV_DIVISION_MARKET_IMS_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, return_value, 
        return_slab_adjust, net_return_val, net_ims, no_of_replace_inv, 
        replace_inv_amt, target_val, no_of_retailer, no_of_ord_retailer  
from spa_sfbl.view_market_ims_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIVISION_MARKET_IMS_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIVISION_MARKET_IMS_LMONTH';

CREATE MATERIALIZED VIEW MV_RETAILER_IMS_YESTERDAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
        customer_code, customer_name, db_location, market_code, market_name, route_code, route_name, 
        retailer_code, retailer_name, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, 
        return_value, return_slab_adjust, net_return_val, net_ims, 
        no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_retailer_ims_yesterday@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RETAILER_IMS_YESTERDAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETAILER_IMS_YESTERDAY';

CREATE MATERIALIZED VIEW MV_RETAILER_IMS_LAST_7DAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
        customer_code, customer_name, db_location, market_code, market_name, route_code, route_name, 
        retailer_code, retailer_name, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, 
        return_value, return_slab_adjust, net_return_val, net_ims, 
        no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_retailer_ims_last_7day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RETAILER_IMS_LAST_7DAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETAILER_IMS_LAST_7DAY';

CREATE MATERIALIZED VIEW MV_RETAILER_IMS_LAST_30DAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
        customer_code, customer_name, db_location, market_code, market_name, route_code, route_name, 
        retailer_code, retailer_name, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, 
        return_value, return_slab_adjust, net_return_val, net_ims, 
        no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_retailer_ims_last_30day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RETAILER_IMS_LAST_30DAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETAILER_IMS_LAST_30DAY';

CREATE MATERIALIZED VIEW MV_RETAILER_IMS_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
        customer_code, customer_name, db_location, market_code, market_name, route_code, route_name, 
        retailer_code, retailer_name, no_of_inv, total_inv_amt, slab_adjustment, net_inv_amount, 
        return_value, return_slab_adjust, net_return_val, net_ims, 
        no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_retailer_ims_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RETAILER_IMS_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETAILER_IMS_CMONTH';

CREATE MATERIALIZED VIEW MV_RET_PROD_IMS_YESTERDAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
        market_code, market_name, customer_code, customer_name, db_location, 
        route_code, route_name, retailer_code, retailer_name, base_product_code, 
        base_product_name, brand_code, brand_name, product_category_code, product_category_name, 
        product_code, product_name, pack_size, product_price, invoice_amt, sales_qty, 
        sales_bonus_qty, bonus_price_discount, replace_qty, return_sales_qty, return_bns_qty, 
        ims_sales_qty, ims_bns_qty, return_value, bns_disc_ret, 
        discount_val, net_ims, number_of_invoice, target_qty
from spa_sfbl.view_ret_prod_ims_yesterday@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_PROD_IMS_YESTERDAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_PROD_IMS_YESTERDAY';

CREATE MATERIALIZED VIEW MV_RET_PROD_IMS_LAST_7DAYS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
        market_code, market_name, customer_code, customer_name, db_location, 
        route_code, route_name, retailer_code, retailer_name, base_product_code, 
        base_product_name, brand_code, brand_name, product_category_code, product_category_name, 
        product_code, product_name, pack_size, product_price, invoice_amt, sales_qty, 
        sales_bonus_qty, bonus_price_discount, replace_qty, return_sales_qty, return_bns_qty, 
        ims_sales_qty, ims_bns_qty, return_value, bns_disc_ret, 
        discount_val, net_ims, number_of_invoice, target_qty
from spa_sfbl.VIEW_RET_PROD_IMS_L7DAY@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_PROD_IMS_LAST_7DAYS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_PROD_IMS_LAST_7DAYS';

CREATE MATERIALIZED VIEW MV_RET_RETURN_MST_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */ sysdate refresh_date,  
     ret_recv_mst_slno, customer_code, retailer_code, return_date, invoice_no, return_type, 
     net_return_val, tds_val, adjustment_val, return_status, return_bns_disc, return_slab_amount, special_bonus_disc, return_value
from spa_sfbl.view_ret_return_mst_cy@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RET_RETURN_MST_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RET_RETURN_MST_CY';

CREATE MATERIALIZED VIEW MV_SR_PRODUCT_IMS_LAST_7DAYS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
       db_location, customer_code, customer_name, employee_code, employee_name, market_code, market_name, 
       product_code, product_name, pack_size, product_price, invoice_qty, inv_bonus_qty, bonus_price_discount, 
       ims_sales_qty, ims_bns_qty, bns_disc_ret, invoice_amt, return_sales_qty, return_bns_qty, return_value, 
       ims_sales_val, ims_bns_val, net_ims, bonus_per
from spa_sfbl.view_sr_product_ims_l7days@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_SR_PRODUCT_IMS_LAST_7DAYS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_SR_PRODUCT_IMS_LAST_7DAYS';

CREATE MATERIALIZED VIEW MV_SR_PRODUCT_IMS_YESTERDAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
       db_location, customer_code, customer_name, employee_code, employee_name, market_code, market_name, 
       product_code, product_name, pack_size, product_price, invoice_qty, inv_bonus_qty, bonus_price_discount, 
       ims_sales_qty, ims_bns_qty, bns_disc_ret, invoice_amt, return_sales_qty, return_bns_qty, return_value, 
       ims_sales_val, ims_bns_val, net_ims, bonus_per
from spa_sfbl.view_sr_product_ims_ydays@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_SR_PRODUCT_IMS_YESTERDAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_SR_PRODUCT_IMS_YESTERDAY';

CREATE MATERIALIZED VIEW MV_SKU_NUMERIC_SALES_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select  /*+ append */
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
        market_name, customer_code, customer_name, db_location, total_retailer, product_category_code, 
        product_category_name, product_code, product_name, pack_size, no_of_retailer, avg_order_qty_per_ret, 
        avg_sales_qty_per_invoice, avg_sales_qty_per_month_ret
from spa_sfbl.view_sku_numeric_sales_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_SKU_NUMERIC_SALES_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_SKU_NUMERIC_SALES_CMONTH';

CREATE MATERIALIZED VIEW MV_ROUTE_WISE_IMS_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, route_code, route_name, no_of_inv, total_inv_amt, slab_adjustment, 
        net_inv_amount, return_value, return_slab_adjust, net_return_val, 
        net_ims, no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_route_wise_ims_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_WISE_IMS_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_WISE_IMS_CMONTH';

CREATE MATERIALIZED VIEW MV_ROUTE_WISE_IMS_YESTERDAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, route_code, route_name, no_of_inv, total_inv_amt, slab_adjustment, 
        net_inv_amount, return_value, return_slab_adjust, net_return_val, 
        net_ims, no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_route_wise_ims_yday@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_WISE_IMS_YESTERDAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_WISE_IMS_YESTERDAY';

CREATE MATERIALIZED VIEW MV_ROUTE_WISE_IMS_LAST_7DAYS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, route_code, route_name, no_of_inv, total_inv_amt, slab_adjustment, 
        net_inv_amount, return_value, return_slab_adjust, net_return_val, 
        net_ims, no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_route_wise_ims_l7day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_WISE_IMS_LAST_7DAYS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_WISE_IMS_LAST_7DAYS';

CREATE MATERIALIZED VIEW MV_ROUTE_WISE_IMS_LAST_30DAYS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, market_name, 
        customer_code, customer_name, db_location, route_code, route_name, no_of_inv, total_inv_amt, slab_adjustment, 
        net_inv_amount, return_value, return_slab_adjust, net_return_val, 
        net_ims, no_of_replace_inv, replace_inv_amt
from spa_sfbl.view_route_wise_ims_l30day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_WISE_IMS_LAST_30DAYS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_WISE_IMS_LAST_30DAYS';

CREATE MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_YESTERDAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
        market_name, customer_code, customer_name, db_location, route_code, route_name, brand_code, 
        brand_name, invoice_amt, replace_inv_amt, return_value, net_ims
from spa_sfbl.view_route_brand_ims_yesterday@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_YESTERDAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_BRAND_IMS_YESTERDAY';

CREATE MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_LAST_7DAYS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
        market_name, customer_code, customer_name, db_location, route_code, route_name, brand_code, 
        brand_name, invoice_amt, replace_inv_amt, return_value, net_ims
from spa_sfbl.view_route_brand_ims_l7days@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_LAST_7DAYS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_BRAND_IMS_LAST_7DAYS';

CREATE MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_LAST_30DAYS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
        market_name, customer_code, customer_name, db_location, route_code, route_name, brand_code, 
        brand_name, invoice_amt, replace_inv_amt, return_value, net_ims
from spa_sfbl.view_route_brand_ims_l30days@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_LAST_30DAYS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_BRAND_IMS_LAST_30DAYS';

CREATE MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
        market_name, customer_code, customer_name, db_location, route_code, route_name, brand_code, 
        brand_name, invoice_amt, replace_inv_amt, return_value, net_ims
from spa_sfbl.view_route_brand_ims_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_BRAND_IMS_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_BRAND_IMS_CMONTH';

CREATE MATERIALIZED VIEW MV_SR_ACH_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
       market_name, customer_code, customer_name, db_location, sr_code, sr_name, 
       product_code, product_name, pack_size, sales_qty, sales_val, cumm_sales_qty, 
       cumm_sales_val, target_qty, target_val, achievement
from spa_sfbl.view_sr_ach_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_SR_ACH_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_SR_ACH_CMONTH';

CREATE MATERIALIZED VIEW MV_SR_ACH_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
       market_name, customer_code, customer_name, db_location, sr_code, sr_name, 
       product_code, product_name, pack_size, sales_qty, sales_val, cumm_sales_qty, 
       cumm_sales_val, target_qty, target_val, achievement
from spa_sfbl.view_sr_ach_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_SR_ACH_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_SR_ACH_LMONTH';

CREATE MATERIALIZED VIEW MV_TARGET_L3YEARS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
      sysdate refresh_date,
      year, month_code, yyyymm, market_code, product_code, target_qty, target_val
from spa_sfbl.view_target_l3years@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TARGET_L3YEARS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TARGET_L3YEARS';

CREATE MATERIALIZED VIEW MV_UPTO_CUR_MONTH_DIV_RET_REL 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
       customer_code, customer_name, db_location, market_code, market_name, sr_code, sr_name, 
       route_code, route_name, retailer_code, retailer_name
from spa_sfbl.view_cur_month_div_ret_rel@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_UPTO_CUR_MONTH_DIV_RET_REL IS 'snapshot table for snapshot SPA_SFBL_BI.MV_UPTO_CUR_MONTH_DIV_RET_REL';

CREATE MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
       customer_code, customer_name, db_location, product_code, product_name, pack_size, product_price, 
       invoice_qty, inv_bonus_qty, bonus_price_discount, ims_sales_qty, ims_bns_qty, invoice_amt, return_sales_qty, 
       return_bns_qty, bns_disc_ret, return_value, ims_sales_val, ims_bns_val, 
       net_ims, last_year_as_on_date_ims_qty, last_year_as_on_date_ims_val
from spa_sfbl.view_dist_product_ims_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_PRODUCT_IMS_CMONTH';

CREATE MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_LAST_30DAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
       customer_code, customer_name, db_location, product_code, product_name, pack_size, product_price, 
       invoice_qty, inv_bonus_qty, bonus_price_discount, ims_sales_qty, ims_bns_qty, invoice_amt, 
       return_sales_qty, return_bns_qty, bns_disc_ret, return_value, ims_sales_val, ims_bns_val, net_ims
from spa_sfbl.view_dist_product_ims_l30day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_LAST_30DAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_PRODUCT_IMS_LAST_30DAY';

CREATE MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_LAST_7DAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
       customer_code, customer_name, db_location, product_code, product_name, pack_size, product_price, 
       invoice_qty, inv_bonus_qty, bonus_price_discount, ims_sales_qty, ims_bns_qty, invoice_amt, 
       return_sales_qty, return_bns_qty, bns_disc_ret, return_value, ims_sales_val, ims_bns_val, net_ims
from spa_sfbl.view_dist_product_ims_l7day@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_LAST_7DAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_PRODUCT_IMS_LAST_7DAY';

CREATE MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_YESTERDAY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
       customer_code, customer_name, db_location, product_code, product_name, pack_size, product_price, 
       invoice_qty, inv_bonus_qty, bonus_price_discount, ims_sales_qty, ims_bns_qty, invoice_amt, 
       return_sales_qty, return_bns_qty, bns_disc_ret, return_value, ims_sales_val, ims_bns_val, net_ims
from spa_sfbl.view_dist_product_ims_yday@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_PRODUCT_IMS_YESTERDAY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_PRODUCT_IMS_YESTERDAY';

CREATE MATERIALIZED VIEW MV_TSO_WISE_ORDER_SUMMARY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */
            sysdate refresh_time,
            order_date, division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
            customer_code, customer_name, db_location, market_code, market_name, route_code,
             route_name, total_route_retailer, no_of_route_visit, total_visit_retailer, 
             no_of_normal_order, no_of_replace_order, order_value, no_of_ordering_ret, 
             no_of_ordering_sku, productivity_call, lpc
from spa_sfbl.view_tso_wise_order_summary@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_TSO_WISE_ORDER_SUMMARY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_TSO_WISE_ORDER_SUMMARY';

CREATE MATERIALIZED VIEW MV_SR_PRODUCT_IMS_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, db_location, 
       customer_code, customer_name, employee_code, employee_name, market_code, 
       market_name, product_code, product_name, pack_size, product_price, invoice_qty, 
       inv_bonus_qty, bonus_price_discount, ims_sales_qty, ims_bns_qty, bns_disc_ret, 
       invoice_amt, return_sales_qty, return_bns_qty, return_value, ims_sales_val, 
       ims_bns_val, net_ims, bonus_per
from spa_sfbl.view_sr_product_ims_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_SR_PRODUCT_IMS_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_SR_PRODUCT_IMS_CMONTH';

CREATE MATERIALIZED VIEW MV_SR_PRODUCT_IMS_LAST_30DAYS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */ 
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, 
       db_location, customer_code, customer_name, employee_code, employee_name, market_code, market_name, 
       product_code, product_name, pack_size, product_price, invoice_qty, inv_bonus_qty, bonus_price_discount, 
       ims_sales_qty, ims_bns_qty, bns_disc_ret, invoice_amt, return_sales_qty, return_bns_qty, return_value, 
       ims_sales_val, ims_bns_val, net_ims, bonus_per
from spa_sfbl.view_sr_product_ims_l30days@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_SR_PRODUCT_IMS_LAST_30DAYS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_SR_PRODUCT_IMS_LAST_30DAYS';

CREATE MATERIALIZED VIEW MV_DISPLAY_PROG_PARTICIPATION 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */
       sysdate refresh_date,
       division_code,division_name,region_code,region_name,area_code,area_name,territory_code,territory_name,customer_code,customer_name,db_location,
       market_code,market_name,route_code,route_name,retailer_code,retailer_name,retailer_address,retailer_contact_no,display_program_no,
       display_program_name,participation_month_code,participation_month,participation_status,discontinue_date,discontinue_reason,
       participate_date,invoice_no,invoice_date,product_code,product_name,pack_size,trade_price,issued_qty,return_qty,ims_qty
  from spa_sfbl.display_prog_participation_rpt@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DISPLAY_PROG_PARTICIPATION IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DISPLAY_PROG_PARTICIPATION';

CREATE MATERIALIZED VIEW MV_DIST_BONUS_ADJUST_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */
       sysdate refresh_date,
       division_code,division_name,region_code,region_name,area_code,area_name,territory_code,territory_name,customer_code,customer_name,db_location, 
       product_code,product_name,pack_size,bonus_qty,ret_bonus_qty,net_bonus_qty,bonus_val,ret_bonus_val,net_bonus_val, 
       bonus_price_discount, ret_bonus_price_discount, net_bonus_price_discount                                                                                         
from spa_sfbl.view_dist_bonus_adjust_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_BONUS_ADJUST_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_BONUS_ADJUST_CMONTH';

CREATE MATERIALIZED VIEW MV_DIST_BONUS_ADJUST_LMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */
       sysdate refresh_date,
       division_code,division_name,region_code,region_name,area_code,area_name,territory_code,territory_name,customer_code,customer_name,db_location, 
       product_code,product_name,pack_size,bonus_qty,ret_bonus_qty,net_bonus_qty,bonus_val,ret_bonus_val,net_bonus_val, 
       bonus_price_discount, ret_bonus_price_discount, net_bonus_price_discount                                                                                        
from spa_sfbl.view_dist_bonus_adjust_lmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_DIST_BONUS_ADJUST_LMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_DIST_BONUS_ADJUST_LMONTH';

CREATE MATERIALIZED VIEW MV_ORDER_DETAILS 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */
       sysdate refresh_time,
       order_date, customer_code, route_code, market_code, employee_code, product_code, order_qty, order_val
FROM spa_sfbl.view_order_details@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ORDER_DETAILS IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ORDER_DETAILS';

CREATE MATERIALIZED VIEW MV_RETAILER_DETAILS_INFO 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, customer_code, 
       customer_name, db_location, market_code, market_name, route_code, route_name, market_route_rel_status, retailer_code, retailer_name, 
       route_retailer_rel_status, retailer_status, retailer_name_bn, address, retailer_address_bn, contact_person, contact_no, retailer_type, 
       retailer_category_code, retailer_category_desc, location_type, retailer_entry_date, recommend_status, recommend_status_desc, recommend_by, 
       recommend_date, approved_status, approved_status_desc, approved_by, approved_date, monthle_avg_sales, 
       first_invoice_date, last_invoice_date, last_invoice_day
from spa_sfbl.view_retailer_details_info@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_RETAILER_DETAILS_INFO IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETAILER_DETAILS_INFO';

CREATE MATERIALIZED VIEW MV_ROUTE_ORDER_COUNT_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */
       sysdate refresh_date,
       division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
       market_name, customer_code, customer_name, db_location, route_code, route_name, total_route_retailer, no_of_route_visit, 
       total_visit_retailer, no_of_normal_order, no_of_replace_order, no_of_ordering_retailer, 
       no_of_ordering_sku, order_value, productivity_call, lpc
from  spa_sfbl.view_route_order_count_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_ROUTE_ORDER_COUNT_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_ROUTE_ORDER_COUNT_CMONTH';

CREATE MATERIALIZED VIEW MV_CAT_NUMERIC_SALES_CMONTH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select  /*+ append */
        sysdate refresh_date,
        division_code, division_name, region_code, region_name, area_code, area_name, territory_code, territory_name, market_code, 
        market_name, customer_code, customer_name, db_location, total_retailer, product_category_code, product_category_name, 
        total_retailer_invoice, avg_order_qty_per_ret, avg_sales_qty_per_invoice, avg_sales_qty_per_month_ret
from spa_sfbl.view_cat_numeric_sales_cmonth@dl_spasfbl.squaregroup.com;


COMMENT ON MATERIALIZED VIEW MV_CAT_NUMERIC_SALES_CMONTH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_CAT_NUMERIC_SALES_CMONTH';

CREATE MATERIALIZED VIEW MV_YTD_IMS_ACV_GROWTH_DASH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */
      SYSDATE refresh_date,
       ROUND (SUM (TARGET_VAL) / 10000000, 2) TARGET_VAL,
       ROUND (SUM (CY_IMS_SALES_VAL) / 10000000, 2) CY_IMS_SALES_VAL,
       ROUND (SUM (PY_IMS_SALES_VAL) / 10000000, 2) PY_IMS_SALES_VAL,
       ROUND (SUM (CY_IMS_SALES_VAL) / SUM (TARGET_VAL) * 100, 2) ACH_PCT,
       ROUND (
            (SUM (CY_IMS_SALES_VAL) - SUM (PY_IMS_SALES_VAL))
          / SUM (PY_IMS_SALES_VAL)
          * 100,
          2)
          GROWTH
  FROM (SELECT SUM (NVL (NET_IMS_TARGET_VALUE, 0)) TARGET_VAL,
               0 CY_IMS_SALES_VAL,
               0 PY_IMS_SALES_VAL
          FROM MV_BUDGETED_NET_IMS_TARGET
         WHERE     (YEAR || MONTH_CODE) >
                      TO_CHAR (
                         ADD_MONTHS (TO_DATE (SYSDATE, 'DD/MM/RRRR'),
                                     -TO_CHAR (SYSDATE, 'MM')),
                         'RRRRMM')
               AND (YEAR || MONTH_CODE) <=
                      TO_CHAR (TRUNC (SYSDATE - 1, 'MM'), 'RRRRMM')
        UNION ALL
        SELECT 0 TARGET_VAL,
               SUM (NVL (CY_IMS_SALES_VAL, 0)) CY_IMS_SALES_VAL,
               0 PY_IMS_SALES_VAL
          FROM (  SELECT I.INVOICE_NO,
                         NVL (I.GRAND_TOTAL, 0) GRAND_TOTAL,
                         NVL (R.RETURN_VALUE, 0) RETURN_VALUE,
                         (  SUM (NVL (GRAND_TOTAL, 0))
                          - SUM (NVL (RETURN_VALUE, 0)))
                            CY_IMS_SALES_VAL
                    FROM VW_INVOICE_MST I, VW_RET_RETURN_MST R
                   WHERE     I.INVOICE_NO = R.INVOICE_NO(+)
                         AND TRUNC (I.INVOICE_DATE) BETWEEN TRUNC (SYSDATE - 1,
                                                                   'YY')
                                                        AND TRUNC (SYSDATE - 1)
                GROUP BY I.INVOICE_NO, I.GRAND_TOTAL, R.RETURN_VALUE)
        UNION ALL
        SELECT 0 TARGET_VAL,
               0 CY_IMS_SALES_VAL,
               SUM (NVL (PY_IMS_SALES_VAL, 0)) PY_IMS_SALES_VAL
          FROM (  SELECT I.INVOICE_NO,
                         NVL (I.GRAND_TOTAL, 0) GRAND_TOTAL,
                         NVL (R.RETURN_VALUE, 0) RETURN_VALUE,
                         (  SUM (NVL (GRAND_TOTAL, 0))
                          - SUM (NVL (RETURN_VALUE, 0)))
                            PY_IMS_SALES_VAL
                    FROM VW_INVOICE_MST I, VW_RET_RETURN_MST R
                   WHERE     I.INVOICE_NO = R.INVOICE_NO(+)
                         AND TRUNC (I.INVOICE_DATE) BETWEEN TO_DATE (
                                                               TRUNC (
                                                                  ADD_MONTHS (
                                                                       SYSDATE
                                                                     - 1,
                                                                     -12),
                                                                  'YY'),
                                                               'DD/MM/RRRR')
                                                        AND TO_DATE (
                                                               TRUNC (
                                                                  ADD_MONTHS (
                                                                       SYSDATE
                                                                     - 1,
                                                                     -12)),
                                                               'DD/MM/RRRR')
                GROUP BY I.INVOICE_NO, I.GRAND_TOTAL, R.RETURN_VALUE));


COMMENT ON MATERIALIZED VIEW MV_YTD_IMS_ACV_GROWTH_DASH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_YTD_IMS_ACV_GROWTH_DASH';

CREATE MATERIALIZED VIEW MV_YTD_LIFTING_ACV_GROWTH_DASH 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT /*+ append */
      SYSDATE refresh_date,
       ROUND (SUM (NET_LIFTING_TARGET_VALUE) / 10000000, 2)
          NET_LIFTING_TARGET_VALUE,
       ROUND (SUM (CY_ACTUAL_LIFTING_VALUE) / 10000000, 2)
          CY_ACTUAL_LIFTING_VALUE,
       ROUND (SUM (PY_ACTUAL_LIFTING_VALUE) / 10000000, 2)
          PY_ACTUAL_LIFTING_VALUE,
       ROUND (
            SUM (CY_ACTUAL_LIFTING_VALUE)
          / SUM (NET_LIFTING_TARGET_VALUE)
          * 100,
          2)
          ACH_PCT,
       ROUND (
            (SUM (CY_ACTUAL_LIFTING_VALUE) - SUM (PY_ACTUAL_LIFTING_VALUE))
          / SUM (PY_ACTUAL_LIFTING_VALUE)
          * 100,
          2)
          GROWTH
  FROM (SELECT SUM(NVL(NET_LIFTING_TARGET_VALUE,0))NET_LIFTING_TARGET_VALUE,
               0 CY_ACTUAL_LIFTING_VALUE,
               0 PY_ACTUAL_LIFTING_VALUE
          FROM MV_BUDGETED_NET_LIFTING_TARGET
         WHERE YEAR || MONTH_CODE >TO_CHAR (ADD_MONTHS (TO_DATE (SYSDATE, 'DD/MM/RRRR'),-TO_CHAR (SYSDATE, 'MM')),'RRRRMM')
          AND   (YEAR || MONTH_CODE) <=  TO_CHAR (TRUNC(SYSDATE-1, 'MM'),'RRRRMM')
         
        UNION ALL
        SELECT 0 NET_LIFTING_TARGET_VALUE,
               SUM (CY_ACTUAL_LIFTING_VALUE) CY_ACTUAL_LIFTING_VALUE,
               SUM (PY_ACTUAL_LIFTING_VALUE) PY_ACTUAL_LIFTING_VALUE
          FROM SPA_SFBL.VW_ACTUAL_LIFTING_VAL_YEARLY@DL_SPASFBL.SQUAREGROUP.COM);


COMMENT ON MATERIALIZED VIEW MV_YTD_LIFTING_ACV_GROWTH_DASH IS 'snapshot table for snapshot SPA_SFBL_BI.MV_YTD_LIFTING_ACV_GROWTH_DASH';

CREATE MATERIALIZED VIEW MV_RETAILER_IMS_CY 
TABLESPACE SPA_SFBL_BI_TS
PCTUSED    0
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS 
select /*+ append */  
          sysdate refresh_date,
          b.zone_code division_code,
          b.zone_name division_name,
          b.area_code region_code,
          b.area_name region_name,
          b.belt_code area_code,
          b.belt_name area_name,
          b.territory_code,
          b.territory_name,
          a.customer_code,
          b.customer_name,
          b.db_location,
          a.market_code,
          b.market_name,
          a.route_code,
          d.route_name,
          a.retailer_code,
          c.retailer_name,
          jan_no_of_inv,
          jan_net_ims,
          feb_no_of_inv,
          feb_net_ims,
          mar_no_of_inv,
          mar_net_ims,
          apr_no_of_inv,
          apr_net_ims,
          may_no_of_inv,
          may_net_ims,
          jun_no_of_inv,
          jun_net_ims,
          jul_no_of_inv,
          jul_net_ims,
          aug_no_of_inv,
          aug_net_ims,
          sep_no_of_inv,
          sep_net_ims,
          oct_no_of_inv,
          oct_net_ims,
          nov_no_of_inv,
          nov_net_ims,
          dec_no_of_inv,
          dec_net_ims
     FROM (  SELECT customer_code,
                    market_code,
                    route_code,
                    retailer_code,
                    SUM (NVL (jan_no_of_inv, 0)) jan_no_of_inv,
                    SUM (NVL (jan_net_ims, 0)) jan_net_ims,
                    SUM (NVL (feb_no_of_inv, 0)) feb_no_of_inv,
                    SUM (NVL (feb_net_ims, 0)) feb_net_ims,
                    SUM (NVL (mar_no_of_inv, 0)) mar_no_of_inv,
                    SUM (NVL (mar_net_ims, 0)) mar_net_ims,
                    SUM (NVL (apr_no_of_inv, 0)) apr_no_of_inv,
                    SUM (NVL (apr_net_ims, 0)) apr_net_ims,
                    SUM (NVL (may_no_of_inv, 0)) may_no_of_inv,
                    SUM (NVL (may_net_ims, 0)) may_net_ims,
                    SUM (NVL (jun_no_of_inv, 0)) jun_no_of_inv,
                    SUM (NVL (jun_net_ims, 0)) jun_net_ims,
                    SUM (NVL (jul_no_of_inv, 0)) jul_no_of_inv,
                    SUM (NVL (jul_net_ims, 0)) jul_net_ims,
                    SUM (NVL (aug_no_of_inv, 0)) aug_no_of_inv,
                    SUM (NVL (aug_net_ims, 0)) aug_net_ims,
                    SUM (NVL (sep_no_of_inv, 0)) sep_no_of_inv,
                    SUM (NVL (sep_net_ims, 0)) sep_net_ims,
                    SUM (NVL (oct_no_of_inv, 0)) oct_no_of_inv,
                    SUM (NVL (oct_net_ims, 0)) oct_net_ims,
                    SUM (NVL (nov_no_of_inv, 0)) nov_no_of_inv,
                    SUM (NVL (nov_net_ims, 0)) nov_net_ims,
                    SUM (NVL (dec_no_of_inv, 0)) dec_no_of_inv,
                    SUM (NVL (dec_net_ims, 0)) dec_net_ims
               FROM (  SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              SUM (NVL (no_of_inv, 0)) jan_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +0),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +0),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +0),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +0),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              SUM (NVL (no_of_inv, 0)) feb_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +1),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +1),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +1),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +1),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              SUM (NVL (no_of_inv, 0)) mar_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +2),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +2),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +2),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +2),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              SUM (NVL (no_of_inv, 0)) apr_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +3),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +3),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +3),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +3),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              SUM (NVL (no_of_inv, 0)) may_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +4),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +4),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +4),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +4),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              SUM (NVL (no_of_inv, 0)) jun_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +5),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +5),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +5),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +5),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              SUM (NVL (no_of_inv, 0)) jul_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +6),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +6),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +6),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +6),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              SUM (NVL (no_of_inv, 0)) aug_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +7),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +7),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +7),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +7),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              SUM (NVL (no_of_inv, 0)) sep_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +8),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +8),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +8),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +8),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              SUM (NVL (no_of_inv, 0)) oct_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +9),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +9),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +9),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +9),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              SUM (NVL (no_of_inv, 0)) nov_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 nov_net_ims,
                              0 dec_no_of_inv,
                              0 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +10),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +10),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +10),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +10),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code
                     UNION ALL
                       SELECT customer_code,
                              market_code,
                              route_code,
                              retailer_code,
                              0 jan_no_of_inv,
                              0 jan_net_ims,
                              0 feb_no_of_inv,
                              0 feb_net_ims,
                              0 mar_no_of_inv,
                              0 mar_net_ims,
                              0 apr_no_of_inv,
                              0 apr_net_ims,
                              0 may_no_of_inv,
                              0 may_net_ims,
                              0 jun_no_of_inv,
                              0 jun_net_ims,
                              0 jul_no_of_inv,
                              0 jul_net_ims,
                              0 aug_no_of_inv,
                              0 aug_net_ims,
                              0 sep_no_of_inv,
                              0 sep_net_ims,
                              0 oct_no_of_inv,
                              0 oct_net_ims,
                              0 nov_no_of_inv,
                              0 nov_net_ims,
                              SUM (NVL (no_of_inv, 0)) dec_no_of_inv,
                                SUM (NVL (net_inv_amount, 0))
                              - SUM (NVL (net_return_val, 0))
                                 dec_net_ims
                         FROM (  SELECT customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code,
                                        COUNT (invoice_no) no_of_inv,
                                        SUM (net_inv_amount) net_inv_amount,
                                        0 net_return_val
                                   FROM (SELECT customer_code,
                                                market_code,
                                                route_code,
                                                retailer_code,
                                                invoice_no,
                                                NVL (net_inv_amount, 0)
                                                   net_inv_amount
                                           FROM mv_invoice_mst_cy
                                          WHERE     inv_type_code = 'INV001'
                                                AND TRUNC (invoice_date) BETWEEN TO_DATE (
                                                                                    ADD_MONTHS (
                                                                                       TRUNC (
                                                                                          TO_DATE (
                                                                                             SYSDATE,
                                                                                             'DD/MM/RRRR'),
                                                                                          'RR'),
                                                                                       +11),
                                                                                    'DD/MM/RRRR')
                                                                             AND LAST_DAY (
                                                                                    TO_DATE (
                                                                                       ADD_MONTHS (
                                                                                          TRUNC (
                                                                                             TO_DATE (
                                                                                                SYSDATE,
                                                                                                'DD/MM/RRRR'),
                                                                                             'RR'),
                                                                                          +11),
                                                                                       'DD/MM/RRRR')) --and   customer_code='25'
                                                                                                     )
                               GROUP BY customer_code,
                                        market_code,
                                        route_code,
                                        retailer_code
                               UNION ALL
                                 SELECT b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code,
                                        0 no_of_inv,
                                        0 net_inv_amount,
                                        SUM (NVL (a.net_return_val, 0))
                                           net_return_val
                                   FROM mv_ret_return_mst_cy a, mv_invoice_mst_cy b
                                  WHERE     a.invoice_no = b.invoice_no
                                        AND TRUNC (b.invoice_date) BETWEEN TO_DATE (
                                                                              ADD_MONTHS (
                                                                                 TRUNC (
                                                                                    TO_DATE (
                                                                                       SYSDATE,
                                                                                       'DD/MM/RRRR'),
                                                                                    'RR'),
                                                                                 +11),
                                                                              'DD/MM/RRRR')
                                                                       AND LAST_DAY (
                                                                              TO_DATE (
                                                                                 ADD_MONTHS (
                                                                                    TRUNC (
                                                                                       TO_DATE (
                                                                                          SYSDATE,
                                                                                          'DD/MM/RRRR'),
                                                                                       'RR'),
                                                                                    +11),
                                                                                 'DD/MM/RRRR'))
                                        AND b.inv_type_code = 'INV001'
                               --and    b.customer_code='25'
                               GROUP BY b.customer_code,
                                        b.market_code,
                                        b.route_code,
                                        b.retailer_code)
                     GROUP BY customer_code,
                              market_code,
                              route_code,
                              retailer_code)
           GROUP BY customer_code,
                    market_code,
                    route_code,
                    retailer_code) a,
          mv_division_customer_relation b,
          mv_retailer_info c,
          mv_route_info d
    WHERE     a.market_code = b.market_code(+)
          AND a.retailer_code = c.retailer_code
          AND a.route_code = d.route_code;


COMMENT ON MATERIALIZED VIEW MV_RETAILER_IMS_CY IS 'snapshot table for snapshot SPA_SFBL_BI.MV_RETAILER_IMS_CY';

CREATE INDEX IDX1_MV_INVOICE_MST ON MV_INVOICE_MST
(INV_MST_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX5_MV_INVOICE_MST ON MV_INVOICE_MST
(CUSTOMER_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_MV_PRODUCT_PRICE ON MV_PRODUCT_PRICE
(PRODUCT_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_DIVI_CUST_REL ON MV_DIVISION_CUSTOMER_RELATION
(CUSTOMER_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX2_MV_RET_RETURN_BONUS ON MV_RET_RETURN_BONUS
(RET_RECV_DTL_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_RET_RETURN_BONUS ON MV_RET_RETURN_BONUS
(PRODUCT_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX2_MV_INVOICE_MST ON MV_INVOICE_MST
(INVOICE_NO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX2_MV_INVOICE_ISSUE ON MV_INVOICE_ISSUE
(PRODUCT_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX2_MV_INVOICE_DTL ON MV_INVOICE_DTL
(INV_MST_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX2_MV_INVOICE_BONUS ON MV_INVOICE_BONUS
(PRODUCT_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_RET_RETURN_MST ON MV_RET_RETURN_MST
(RET_RECV_MST_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX2_MV_RET_RETURN_MST ON MV_RET_RETURN_MST
(INVOICE_NO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX2_MV_RET_RETURN_DTL ON MV_RET_RETURN_DTL
(RET_RECV_DTL_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_RET_RETURN_DTL ON MV_RET_RETURN_DTL
(RET_RECV_MST_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX3_MV_RET_RETURN_DTL ON MV_RET_RETURN_DTL
(PRODUCT_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX2_MV_RET_RETURN_ISSUE ON MV_RET_RETURN_ISSUE
(RET_RECV_DTL_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_RET_RETURN_ISSUE ON MV_RET_RETURN_ISSUE
(PRODUCT_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX2_MV_DIVI_CUST_REL ON MV_DIVISION_CUSTOMER_RELATION
(MARKET_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_MV_PRODUCT_INFO ON MV_PRODUCT_INFO
(PRODUCT_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX3_MV_INVOICE_MST ON MV_INVOICE_MST
(INVOICE_DATE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX4_MV_INVOICE_MST ON MV_INVOICE_MST
(INV_TYPE_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_INVOICE_DTL ON MV_INVOICE_DTL
(INV_DTL_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX3_MV_INVOICE_DTL ON MV_INVOICE_DTL
(PRODUCT_CODE)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_INVOICE_ISSUE ON MV_INVOICE_ISSUE
(INV_DTL_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );

CREATE INDEX IDX1_MV_INVOICE_BONUS ON MV_INVOICE_BONUS
(INV_DTL_SLNO)
TABLESPACE SPA_SFBL_BI_TS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );